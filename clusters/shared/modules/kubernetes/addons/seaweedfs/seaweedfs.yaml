apiVersion: seaweed.seaweedfs.com/v1
kind: Seaweed
metadata:
  name: &instance ${seaweedfs.seaweed.name}
  namespace: ${namespace}
spec:
  image: ${seaweedfs.seaweed.image}
  volumeServerDiskCount: ${seaweedfs.seaweed.volume_server_disk_count}
  master:
    replicas: ${seaweedfs.seaweed.master.replicas}
    volumeSizeLimitMB: ${seaweedfs.seaweed.master.volume_size_limit_mb}
    affinity:
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              topologyKey: topology.kubernetes.io/region
              labelSelector: &masterLabelSelector
                matchLabels:
                  app.kubernetes.io/name: seaweedfs
                  app.kubernetes.io/component: master
                  app.kubernetes.io/managed-by: seaweedfs-operator
                  app.kubernetes.io/instance: *instance
          - weight: 90
            podAffinityTerm:
              topologyKey: topology.kubernetes.io/zone
              labelSelector: *masterLabelSelector
          - weight: 50
            podAffinityTerm:
              topologyKey: incus.linuxcontainers.org/target
              labelSelector: *masterLabelSelector
        requiredDuringSchedulingIgnoredDuringExecution:
          - topologyKey: kubernetes.io/hostname
            labelSelector: *masterLabelSelector
  volume:
    replicas: ${seaweedfs.seaweed.volume.replicas}
    requests:
      storage: ${seaweedfs.seaweed.volume.storage}
    storageClassName: ${seaweedfs.seaweed.volume.storage_class_name}
    affinity:
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              topologyKey: topology.kubernetes.io/region
              labelSelector: &volumeLabelSelector
                matchLabels:
                  app.kubernetes.io/name: seaweedfs
                  app.kubernetes.io/component: volume
                  app.kubernetes.io/managed-by: seaweedfs-operator
                  app.kubernetes.io/instance: *instance
          - weight: 90
            podAffinityTerm:
              topologyKey: topology.kubernetes.io/zone
              labelSelector: *volumeLabelSelector
          - weight: 50
            podAffinityTerm:
              topologyKey: incus.linuxcontainers.org/target
              labelSelector: *volumeLabelSelector
        requiredDuringSchedulingIgnoredDuringExecution:
          - topologyKey: kubernetes.io/hostname
            labelSelector: *volumeLabelSelector
  filer:
    replicas: ${seaweedfs.seaweed.filer.replicas}
    affinity:
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              topologyKey: topology.kubernetes.io/region
              labelSelector: &filerLabelSelector
                matchLabels:
                  app.kubernetes.io/name: seaweedfs
                  app.kubernetes.io/component: filer
                  app.kubernetes.io/managed-by: seaweedfs-operator
                  app.kubernetes.io/instance: *instance
          - weight: 90
            podAffinityTerm:
              topologyKey: topology.kubernetes.io/zone
              labelSelector: *filerLabelSelector
          - weight: 50
            podAffinityTerm:
              topologyKey: incus.linuxcontainers.org/target
              labelSelector: *filerLabelSelector
        requiredDuringSchedulingIgnoredDuringExecution:
          - topologyKey: kubernetes.io/hostname
            labelSelector: *filerLabelSelector
    config: |
      ${indent(6, seaweedfs.seaweed.filer.config)}
---
kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
  name: ${seaweedfs.storage_class.name}
  annotations:
    storageclass.kubernetes.io/is-default-class: "${seaweedfs.storage_class.is_default_class}"
reclaimPolicy: Delete
provisioner: ${seaweedfs.csi_driver.name}
allowVolumeExpansion: true
%{ if length(seaweedfs.storage_class.parameters) > 0 ~}
parameters:
  ${indent(2, yamlencode(seaweedfs.storage_class.parameters))}
%{ endif ~}
---
kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
  name: ${seaweedfs.storage_class.name}-protected
  annotations:
    storageclass.kubernetes.io/is-default-class: "false"
reclaimPolicy: Retain
provisioner: ${seaweedfs.csi_driver.name}
allowVolumeExpansion: true
%{ if length(seaweedfs.storage_class.parameters) > 0 ~}
parameters:
  ${indent(2, yamlencode(seaweedfs.storage_class.parameters))}
%{ endif ~}
