[{
            identifier: "CT.APIGATEWAY.PR.1",
            name: "Require an Amazon API Gateway REST and WebSocket API to have logging activated",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon API Gateway"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-4(26)", "AU-10", "AU-12", "AU-2", "AU-3", "AU-6(3)", "AU-6(4)", "CA-7", "SC-7(9)", "SI-7(8)"]], ["PCI DSS version 3.2.1", ["10.1", "10.2.1", "10.2.4", "10.2.7", "10.3.1", "10.3.2", "10.3.3", "10.3.4", "10.3.5", "10.3.6"]]]),
            controlObjectives: new Set(["Establish logging and monitoring"]),
            releaseDate: "2022-11-28",
            description: "Checks whether all methods in Amazon API Gateway stage have execution logging enabled.",
            resourceTypes: new Set(["AWS::ApiGateway::Stage"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "HIGH"
        }, {
            identifier: "CT.APIGATEWAY.PR.2",
            name: "Require an Amazon API Gateway REST API stage to have AWS X-Ray tracing activated",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon API Gateway"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CA-7"]], ["PCI DSS version 3.2.1", ["10.1", "10.2.1", "10.2.4", "10.2.7", "10.3.1", "10.3.2", "10.3.3", "10.3.4", "10.3.5", "10.3.6"]]]),
            controlObjectives: new Set(["Establish logging and monitoring"]),
            releaseDate: "2022-11-28",
            description: "This control ensures that AWS X-Ray tracing is enabled on Amazon API Gateway REST APIs.",
            resourceTypes: new Set(["AWS::ApiGateway::Stage"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "LOW"
        }, {
            identifier: "CT.APIGATEWAY.PR.3",
            name: "Require that an Amazon API Gateway REST API stage has encryption at rest configured for cache data",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon API Gateway"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CA-9(1)", "CM-3(6)", "SC-13", "SC-28", "SC-28(1)", "SC-7(10)", "SI-7(6)"]], ["PCI DSS version 3.2.1", ["3.4"]]]),
            controlObjectives: new Set(["Encrypt data at rest"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether an Amazon API Gateway REST API stage that has caching enabled also encrypts the caches.",
            resourceTypes: new Set(["AWS::ApiGateway::Stage"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.APIGATEWAY.PR.4",
            name: "Require an Amazon API Gateway V2 stage to have access logging activated",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon API Gateway"]),
            frameworks: new Set([]),
            frameworksIds: new Map,
            controlObjectives: new Set(["Establish logging and monitoring"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether Amazon API Gateway V2 stages have access logging enabled. Access logging is supported for HTTP and WebSocket APIs.",
            resourceTypes: new Set(["AWS::ApiGatewayV2::Stage"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.APIGATEWAY.PR.5",
            name: "Require Amazon API Gateway V2 Websocket and HTTP routes to specify an authorization type",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon API Gateway"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-3", "CM-2", "CM-2(2)"]], ["PCI DSS version 3.2.1", ["7.1.1", "7.2.1", "7.2.2"]]]),
            controlObjectives: new Set(["Use strong authentication"]),
            releaseDate: "2023-05-19",
            description: "This control checks whether Amazon API Gateway V2 API routes have an authorization type set.",
            resourceTypes: new Set(["AWS::ApiGatewayV2::Route", "AWS::ApiGatewayV2::ApiGatewayManagedOverrides"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "INTERNAL.CT.APIGATEWAY.PR.DGUWP",
            name: "Require an Amazon API Gateway REST domain to use a security policy that specifies a minimum TLS protocol version of TLSv1.2",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon API Gateway"]),
            frameworks: new Set([]),
            frameworksIds: new Map,
            controlObjectives: new Set(["Encrypt data in transit"]),
            releaseDate: "2023-04-30",
            description: "This control checks whether an Amazon API Gateway REST API domain name requires a minimum Transport Layer Security protocol version of TLSv1.2 by means of its security policy.",
            resourceTypes: new Set(["AWS::ApiGateway::DomainName"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "HIGH"
        }, {
            identifier: "SH.APIGateway.1",
            name: "API Gateway REST and WebSocket API execution logging should be enabled",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon API Gateway"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-4(26)", "AU-10", "AU-12", "AU-2", "AU-3", "AU-6(3)", "AU-6(4)", "CA-7", "SC-7(9)", "SI-7(8)"]], ["PCI DSS version 3.2.1", ["10.1", "10.2.1", "10.2.4", "10.2.7", "10.3.1", "10.3.2", "10.3.3", "10.3.4", "10.3.5", "10.3.6"]]]),
            controlObjectives: new Set(["Establish logging and monitoring"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether all stages of Amazon API Gateway REST and WebSocket APIs have logging enabled. The control fails if logging is not enabled for all methods of a stage or if loggingLevel is neither ERROR nor INFO.",
            resourceTypes: new Set(["AWS::ApiGateway::Stage", "AWS::ApiGatewayV2::Stage"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.APIGateway.2",
            name: "API Gateway REST API stages should be configured to use SSL certificates for backend authentication",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon API Gateway"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-17(2)", "AC-4", "IA-5(1)", "SC-12(3)", "SC-13", "SC-23", "SC-23(3)", "SC-7(4)", "SC-8", "SC-8(1)", "SC-8(2)", "SI-7(6)"]], ["PCI DSS version 3.2.1", ["2.3", "4.1", "8.2.1"]]]),
            controlObjectives: new Set(["Encrypt data in transit"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether Amazon API Gateway REST API stages have SSL certificates configured that backend systems can use to authenticate that incoming requests are from the API Gateway.",
            resourceTypes: new Set(["AWS::ApiGateway::Stage"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.APIGateway.3",
            name: "API Gateway REST API stages should have AWS X-Ray tracing enabled",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon API Gateway"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CA-7"]], ["PCI DSS version 3.2.1", ["10.1", "10.2.1", "10.2.4", "10.2.7", "10.3.1", "10.3.2", "10.3.3", "10.3.4", "10.3.5", "10.3.6"]]]),
            controlObjectives: new Set(["Establish logging and monitoring"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether AWS X-Ray active tracing is enabled for your Amazon API Gateway REST API stages.",
            resourceTypes: new Set(["AWS::ApiGateway::Stage"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "LOW"
        }, {
            identifier: "SH.APIGateway.4",
            name: "API Gateway should be associated with a WAF Web ACL",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon API Gateway"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-4(21)"]], ["PCI DSS version 3.2.1", ["6.6"]]]),
            controlObjectives: new Set(["Protect configurations", "Manage vulnerabilities"]),
            releaseDate: "2022-11-28",
            description: "This control checks to see if an API Gateway stage is using an AWS WAF Web ACL. This control fails if an AWS WAF Web ACL is not attached to a REST API Gateway stage.",
            resourceTypes: new Set(["AWS::ApiGateway::Stage"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.APIGateway.5",
            name: "API Gateway REST API cache data should be encrypted at rest",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon API Gateway"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CA-9(1)", "CM-3(6)", "SC-13", "SC-28", "SC-28(1)", "SC-7(10)", "SI-7(6)"]], ["PCI DSS version 3.2.1", ["3.4"]]]),
            controlObjectives: new Set(["Encrypt data at rest"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether all methods in Amazon API Gateway REST API stages that have cache enabled are encrypted. The control fails if any method in API Gateway REST API stage is configured to cache and the cache is not encrypted.",
            resourceTypes: new Set(["AWS::ApiGateway::Stage"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.APIGateway.8",
            name: "API Gateway routes should specify an authorization type",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon API Gateway"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-3", "CM-2", "CM-2(2)"]], ["PCI DSS version 3.2.1", ["7.1.1", "7.2.1", "7.2.2"]]]),
            controlObjectives: new Set(["Use strong authentication"]),
            releaseDate: "2023-06-12",
            description: "This control checks if Amazon API Gateway routes have an authorization type. The control fails if the API Gateway route does not specify an authorization type",
            resourceTypes: new Set(["AWS::ApiGatewayV2::Route"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.APIGateway.9",
            name: "Access logging should be configured for API Gateway V2 Stages",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon API Gateway"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-4(26)", "AU-10", "AU-12", "AU-2", "AU-3", "AU-6(3)", "AU-6(4)", "CA-7", "SC-7(9)", "SI-7(8)"]], ["PCI DSS version 3.2.1", ["10.1", "10.2.1", "10.2.4", "10.2.7", "10.3.1", "10.3.2", "10.3.3", "10.3.4", "10.3.5", "10.3.6"]]]),
            controlObjectives: new Set(["Establish logging and monitoring"]),
            releaseDate: "2023-06-12",
            description: "This control checks if Amazon API Gateway V2 stages have access logging configured. This control fails if access log settings aren\u2019t defined.",
            resourceTypes: new Set(["AWS::ApiGatewayV2::Stage"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.ATHENA.PR.1",
            name: "Require an Amazon Athena workgroup to encrypt Athena query results at rest",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon Athena"]),
            frameworks: new Set([]),
            frameworksIds: new Map,
            controlObjectives: new Set(["Encrypt data at rest"]),
            releaseDate: "2023-07-31",
            description: "This control checks whether an Amazon Athena workgroup requires query results to be encrypted at rest.",
            resourceTypes: new Set(["AWS::Athena::WorkGroup"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.ATHENA.PR.2",
            name: "Require an Amazon Athena workgroup to encrypt Athena query results at rest with an AWS Key Management Service (KMS) key",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon Athena"]),
            frameworks: new Set([]),
            frameworksIds: new Map,
            controlObjectives: new Set(["Encrypt data at rest"]),
            releaseDate: "2023-07-31",
            description: "This control checks whether an Amazon Athena workgroup has been configured to encrypt query results at rest with an AWS KMS key.",
            resourceTypes: new Set(["AWS::Athena::WorkGroup"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.Athena.1",
            name: "Athena workgroups should be encrypted at rest",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon Athena"]),
            frameworks: new Set([]),
            frameworksIds: new Map,
            controlObjectives: new Set(["Encrypt data at rest"]),
            releaseDate: "<UPDATE>",
            description: "This control checks if an Athena workgroup is encrypted at rest. The control fails if an Athena workgroup isn\u2019t encrypted at rest.",
            resourceTypes: new Set(["AWS::Athena::WorkGroup"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.CLOUDFRONT.PR.1",
            name: "Require an Amazon CloudFront distribution to have a default root object configured",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon CloudFront"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["SC-7(11)", "SC-7(16)"]], ["PCI DSS version 3.2.1", ["1.2.1", "1.3", "1.3.2", "1.3.4", "1.3.7"]]]),
            controlObjectives: new Set(["Protect configurations"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether an Amazon CloudFront distribution is configured to return a specific object that is the default root object.",
            resourceTypes: new Set(["AWS::CloudFront::Distribution"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "CRITICAL"
        }, {
            identifier: "CT.CLOUDFRONT.PR.10",
            name: "Require any Amazon CloudFront distributions with Amazon S3 backed origins to have origin access control configured",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon CloudFront"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["SC-7(11)"]], ["PCI DSS version 3.2.1", ["1.2.1", "1.3", "1.3.1", "1.3.2", "1.3.4"]]]),
            controlObjectives: new Set(["Enforce least privilege", "Protect configurations"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether your Amazon CloudFront distributions backed by Amazon S3 are configured to use an origin access control.",
            resourceTypes: new Set(["AWS::CloudFront::Distribution"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.CLOUDFRONT.PR.11",
            name: "Require an Amazon CloudFront distribution to use updated SSL protocols between edge locations and custom origins",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon CloudFront"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-17(2)", "AC-4", "IA-5(1)", "SC-12(3)", "SC-13", "SC-23", "SC-7(4)", "SC-8", "SC-8(1)", "SC-8(2)", "SI-7(6)"]], ["PCI DSS version 3.2.1", ["4.1"]]]),
            controlObjectives: new Set(["Manage vulnerabilities"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether your Amazon CloudFront distributions are using deprecated SSL protocols for HTTPS communication between CloudFront edge locations and custom origins.",
            resourceTypes: new Set(["AWS::CloudFront::Distribution"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.CLOUDFRONT.PR.2",
            name: "Require any Amazon CloudFront distributions with Amazon S3 backed origins to have an origin access identity configured",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon CloudFront"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["SC-7(11)"]], ["PCI DSS version 3.2.1", ["1.2.1", "1.3", "1.3.1", "1.3.2", "1.3.4"]]]),
            controlObjectives: new Set(["Protect configurations"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether Amazon CloudFront distributions backed by Amazon S3 are configured with an origin access identity.",
            resourceTypes: new Set(["AWS::CloudFront::Distribution"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.CLOUDFRONT.PR.3",
            name: "Require an Amazon CloudFront distribution to have encryption in transit configured",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon CloudFront"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-17(2)", "AC-4", "IA-5(1)", "SC-12(3)", "SC-13", "SC-23", "SC-23(3)", "SC-7(4)", "SC-8", "SC-8(1)", "SC-8(2)", "SI-7(6)"]], ["PCI DSS version 3.2.1", ["4.1"]]]),
            controlObjectives: new Set(["Encrypt data in transit"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether your Amazon CloudFront distributions use HTTPS (directly or through a redirection).",
            resourceTypes: new Set(["AWS::CloudFront::Distribution"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.CLOUDFRONT.PR.4",
            name: "Require an Amazon CloudFront distribution to have origin failover configured",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon CloudFront"]),
            frameworks: new Set(["NIST 800-53 Rev 5"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CP-10", "SC-36", "SC-5(2)", "SI-13(5)"]]]),
            controlObjectives: new Set(["Improve availability"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether your Amazon CloudFront distribution is configured with an origin group that contains two origin group members.",
            resourceTypes: new Set(["AWS::CloudFront::Distribution"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "LOW"
        }, {
            identifier: "CT.CLOUDFRONT.PR.5",
            name: "Require any Amazon CloudFront distribution to have logging enabled",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon CloudFront"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-2(4)", "AC-4(26)", "AC-6(9)", "AU-10", "AU-12", "AU-2", "AU-3", "AU-6(3)", "AU-6(4)", "CA-7", "SC-7(9)", "SI-3(8)", "SI-4(20)", "SI-7(8)"]], ["PCI DSS version 3.2.1", ["10.1", "10.2.1", "10.2.4", "10.3.1", "10.3.2", "10.3.3", "10.3.4", "10.3.5", "10.3.6"]]]),
            controlObjectives: new Set(["Establish logging and monitoring"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether Amazon CloudFront distributions are configured with access logging.",
            resourceTypes: new Set(["AWS::CloudFront::Distribution"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.CLOUDFRONT.PR.6",
            name: "Require an Amazon CloudFront distribution to use custom SSL/TLS certificates",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon CloudFront"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-17(2)", "AC-4", "IA-5(1)", "SC-12(3)", "SC-13", "SC-23", "SC-23(3)", "SC-7(4)", "SC-8", "SC-8(1)", "SC-8(2)", "SI-7(6)"]], ["PCI DSS version 3.2.1", ["4.1"]]]),
            controlObjectives: new Set(["Encrypt data in transit"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether the certificate associated with an Amazon CloudFront distribution is a custom SSL/TLS certificate.",
            resourceTypes: new Set(["AWS::CloudFront::Distribution"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.CLOUDFRONT.PR.7",
            name: "Require an Amazon CloudFront distribution to use SNI to serve HTTPS requests",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon CloudFront"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CA-9(1)", "CM-2"]], ["PCI DSS version 3.2.1", ["4.1"]]]),
            controlObjectives: new Set(["Encrypt data in transit", "Improve availability"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether your Amazon CloudFront distributions are configured to use SNI to serve HTTPS requests.",
            resourceTypes: new Set(["AWS::CloudFront::Distribution"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "LOW"
        }, {
            identifier: "CT.CLOUDFRONT.PR.8",
            name: "Require an Amazon CloudFront distribution to encrypt traffic to custom origins",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon CloudFront"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-17(2)", "AC-4", "IA-5(1)", "SC-12(3)", "SC-13", "SC-23", "SC-23(3)", "SC-7(4)", "SC-8", "SC-8(1)", "SC-8(2)", "SI-7(6)"]], ["PCI DSS version 3.2.1", ["4.1"]]]),
            controlObjectives: new Set(["Encrypt data in transit"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether your Amazon CloudFront distributions are encrypting traffic to custom origins.",
            resourceTypes: new Set(["AWS::CloudFront::Distribution"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.CLOUDFRONT.PR.9",
            name: "Require an Amazon CloudFront distribution to have a security policy of TLSv1.2 as a minimum",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon CloudFront"]),
            frameworks: new Set([]),
            frameworksIds: new Map,
            controlObjectives: new Set(["Manage vulnerabilities"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether your Amazon CloudFront distributions are using a minimum security policy and cipher suite of TLSv1.2 or greater for viewer connections.",
            resourceTypes: new Set(["AWS::CloudFront::Distribution"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.CloudFront.1",
            name: "CloudFront distributions should have a default root object configured",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon CloudFront"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["SC-7(11)", "SC-7(16)"]], ["PCI DSS version 3.2.1", ["1.2.1", "1.3", "1.3.2", "1.3.4", "1.3.7"]]]),
            controlObjectives: new Set(["Protect configurations"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether an Amazon CloudFront distribution is configured to return a specific object that is the default root object. The control fails if the CloudFront distribution does not have a default root object configured.",
            resourceTypes: new Set(["AWS::CloudFront::Distribution"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "CRITICAL"
        }, {
            identifier: "SH.CloudFront.10",
            name: "CloudFront distributions should not use deprecated SSL protocols between edge locations and custom origins",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon CloudFront"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-17(2)", "AC-4", "IA-5(1)", "SC-12(3)", "SC-13", "SC-23", "SC-7(4)", "SC-8", "SC-8(1)", "SC-8(2)", "SI-7(6)"]], ["PCI DSS version 3.2.1", ["4.1"]]]),
            controlObjectives: new Set(["Manage vulnerabilities"]),
            releaseDate: "2022-11-28",
            description: "This control checks if CloudFront distributions are using deprecated SSL protocols for HTTPS communication between CloudFront edge locations and your custom origins. This control fails for a CloudFront distribution if it has a 'CustomOriginConfig' where \u2018OriginSslProtocols\u2019 includes \u2018SSLv3\u2019.",
            resourceTypes: new Set(["AWS::CloudFront::Distribution"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.CloudFront.12",
            name: "CloudFront distributions should not point to non-existent S3 origins",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon CloudFront"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CM-2", "CM-2(2)"]], ["PCI DSS version 3.2.1", ["2.2"]]]),
            controlObjectives: new Set(["Protect configurations"]),
            releaseDate: "<UPDATE>",
            description: "This control checks whether Amazon CloudFront distributions are pointing to non-existent S3 origins. The control fails for a CloudFront distribution if the origin is configured to point to a non-existent bucket. This control only applies to CloudFront distributions where an S3 bucket without static website hosting is the S3 origin.",
            resourceTypes: new Set(["AWS::CloudFront::Distribution"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "HIGH"
        }, {
            identifier: "SH.CloudFront.13",
            name: "CloudFront distributions should use origin access control",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon CloudFront"]),
            frameworks: new Set([]),
            frameworksIds: new Map,
            controlObjectives: new Set(["Enforce least privilege"]),
            releaseDate: "<UPDATE>",
            description: "This control checks whether an Amazon CloudFront distribution with an Amazon S3 origin has origin access control (OAC) configured. The control fails if OAC isn't configured.",
            resourceTypes: new Set(["AWS::CloudFront::Distribution"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.CloudFront.2",
            name: "CloudFront distributions should have origin access identity enabled",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon CloudFront"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["SC-7(11)"]], ["PCI DSS version 3.2.1", ["1.2.1", "1.3", "1.3.1", "1.3.2", "1.3.4"]]]),
            controlObjectives: new Set(["Protect configurations"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether an Amazon CloudFront distribution with an Amazon S3 origin type has Origin Access Identity (OAI) configured. The control fails if the CloudFront distribution that is backed by Amazon S3 does not have OAI configured.",
            resourceTypes: new Set(["AWS::CloudFront::Distribution"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.CloudFront.3",
            name: "CloudFront distributions should require encryption in transit",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon CloudFront"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-17(2)", "AC-4", "IA-5(1)", "SC-12(3)", "SC-13", "SC-23", "SC-23(3)", "SC-7(4)", "SC-8", "SC-8(1)", "SC-8(2)", "SI-7(6)"]], ["PCI DSS version 3.2.1", ["4.1"]]]),
            controlObjectives: new Set(["Encrypt data in transit"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether an Amazon CloudFront distribution requires viewers to use HTTPS directly, or whether it uses redirection. The control fails if ViewerProtocolPolicy is set to allow-all for defaultCacheBehavior or for cacheBehaviors.",
            resourceTypes: new Set(["AWS::CloudFront::Distribution"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.CloudFront.4",
            name: "CloudFront distributions should have origin failover configured",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon CloudFront"]),
            frameworks: new Set(["NIST 800-53 Rev 5"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CP-10", "SC-36", "SC-5(2)", "SI-13(5)"]]]),
            controlObjectives: new Set(["Improve availability"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether an Amazon CloudFront distribution is configured with an origin group that has 2 or more origins.",
            resourceTypes: new Set(["AWS::CloudFront::Distribution"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "LOW"
        }, {
            identifier: "SH.CloudFront.5",
            name: "CloudFront distributions should have logging enabled",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon CloudFront"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-2(4)", "AC-4(26)", "AC-6(9)", "AU-10", "AU-12", "AU-2", "AU-3", "AU-6(3)", "AU-6(4)", "CA-7", "SC-7(9)", "SI-3(8)", "SI-4(20)", "SI-7(8)"]], ["PCI DSS version 3.2.1", ["10.1", "10.2.1", "10.2.4", "10.3.1", "10.3.2", "10.3.3", "10.3.4", "10.3.5", "10.3.6"]]]),
            controlObjectives: new Set(["Establish logging and monitoring"]),
            releaseDate: "2022-11-28",
            description: "This control checks to see if server access logging is enabled on Amazon CloudFront Distributions. The control will fail if access logging is not enabled for the distribution.",
            resourceTypes: new Set(["AWS::CloudFront::Distribution"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.CloudFront.6",
            name: "CloudFront distributions should have WAF enabled",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon CloudFront"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-4(21)"]], ["PCI DSS version 3.2.1", ["6.6"]]]),
            controlObjectives: new Set(["Limit network access"]),
            releaseDate: "2022-11-28",
            description: "This control checks to see if Amazon CloudFront distributions are associated with either WAF or WAFv2 web ACLs. The control fails if a CloudFront distribution is not associated with a web ACL.",
            resourceTypes: new Set(["AWS::CloudFront::Distribution"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.CloudFront.7",
            name: "CloudFront distributions should use custom SSL/TLS certificates",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon CloudFront"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-17(2)", "AC-4", "IA-5(1)", "SC-12(3)", "SC-13", "SC-23", "SC-23(3)", "SC-7(4)", "SC-8", "SC-8(1)", "SC-8(2)", "SI-7(6)"]], ["PCI DSS version 3.2.1", ["4.1"]]]),
            controlObjectives: new Set(["Encrypt data in transit"]),
            releaseDate: "2022-11-28",
            description: "This control checks if CloudFront distributions are using the default SSL/TLS certificate CloudFront provides instead of a custom one. This control fails for a CloudFront distribution if it uses the default SSL/TLS certificate.",
            resourceTypes: new Set(["AWS::CloudFront::Distribution"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.CloudFront.8",
            name: "CloudFront distributions should use SNI to serve HTTPS requests",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon CloudFront"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CA-9(1)", "CM-2"]], ["PCI DSS version 3.2.1", ["4.1"]]]),
            controlObjectives: new Set(["Encrypt data in transit", "Improve availability"]),
            releaseDate: "2022-11-28",
            description: "This control checks if Amazon CloudFront distributions are using a custom SSL/TLS certificate and are configured to use SNI to serve HTTPS requests as opposed to dedicated IP address.",
            resourceTypes: new Set(["AWS::CloudFront::Distribution"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "LOW"
        }, {
            identifier: "SH.CloudFront.9",
            name: "CloudFront distributions should encrypt traffic to custom origins",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon CloudFront"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-17(2)", "AC-4", "IA-5(1)", "SC-12(3)", "SC-13", "SC-23", "SC-23(3)", "SC-7(4)", "SC-8", "SC-8(1)", "SC-8(2)", "SI-7(6)"]], ["PCI DSS version 3.2.1", ["4.1"]]]),
            controlObjectives: new Set(["Encrypt data in transit"]),
            releaseDate: "2022-11-28",
            description: "This control checks if CloudFront distributions are encrypting traffic to custom origins. This control fails if \u2018OriginProtocolPolicy\u2019 is \u2018http-only\u2019 or if \u2018OriginProtocolPolicy\u2019 is \u2018match-viewer\u2019 and \u2018ViewerProtocolPolicy\u2019 is \u2018allow-all\u2019.",
            resourceTypes: new Set(["AWS::CloudFront::Distribution"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.CLOUDWATCH.PR.1",
            name: "Require Amazon CloudWatch alarm actions to have an action configured for the ALARM state",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon CloudWatch"]),
            frameworks: new Set(["NIST 800-53 Rev 5"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AU-6(1)", "AU-6(5)", "CA-7", "IR-4(1)", "IR-4(5)", "SI-2", "SI-20", "SI-4(12)", "SI-4(5)"]]]),
            controlObjectives: new Set(["Establish logging and monitoring"]),
            releaseDate: "2023-07-24",
            description: "This control checks whether CloudWatch alarms have at least one action configured for the ALARM state.",
            resourceTypes: new Set(["AWS::CloudWatch::Alarm"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "HIGH"
        }, {
            identifier: "CT.CLOUDWATCH.PR.2",
            name: "Require Amazon CloudWatch log groups to be retained for at least 1 year",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon CloudWatch"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AU-10", "AU-11", "AU-6(3)", "AU-6(4)", "CA-7", "SI-12"]], ["PCI DSS version 3.2.1", ["10.7", "3.1"]]]),
            controlObjectives: new Set(["Establish logging and monitoring"]),
            releaseDate: "2023-07-24",
            description: "This control checks whether Amazon CloudWatch LogGroup Retention period is set to a value greater than or equal to 365 days.",
            resourceTypes: new Set(["AWS::Logs::LogGroup"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.CLOUDWATCH.PR.3",
            name: "Require Amazon CloudWatch log groups to be encrypted with an AWS KMS key",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon CloudWatch"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CA-9(1)", "CM-3(6)", "SC-12(2)", "SC-13", "SC-28", "SC-28(1)", "SC-7(10)", "SI-7(6)"]], ["PCI DSS version 3.2.1", ["3.4"]]]),
            controlObjectives: new Set(["Encrypt data at rest"]),
            releaseDate: "2023-07-24",
            description: "This control checks whether CloudWatch log groups are encrypted with an AWS KMS key.",
            resourceTypes: new Set(["AWS::Logs::LogGroup"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.CLOUDWATCH.PR.4",
            name: "Require Amazon CloudWatch alarm actions to be activated",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon CloudWatch"]),
            frameworks: new Set(["NIST 800-53 Rev 5"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AU-6(1)", "AU-6(5)", "CA-7", "SI-2", "SI-4(12)"]]]),
            controlObjectives: new Set(["Establish logging and monitoring"]),
            releaseDate: "2023-07-24",
            description: "This control checks whether Amazon CloudWatch alarms actions are enabled.",
            resourceTypes: new Set(["AWS::CloudWatch::Alarm"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "AWS-GR_LOG_GROUP_POLICY",
            name: "Disallow changes to CloudWatch Logs Log Groups",
            behavior: "PREVENTIVE",
            implementationTypes: new Set(["Service control policy (SCP)"]),
            services: new Set(["Amazon CloudWatch"]),
            frameworks: new Set(["NIST 800-53 Rev 5"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CM-2", "CM-2(2)", "CM-3", "CM-3(8)", "SA-8(19)"]]]),
            controlObjectives: new Set(["Protect configurations"]),
            releaseDate: "2019-10-14",
            description: "Disallow changes to CloudWatch Logs Log Groups created by AWS Control Tower in the log archive account.",
            resourceTypes: new Set(["AWS::Logs::LogGroup"]),
            controlOwner: "AWS Control Tower",
            guidance: "Mandatory",
            severity: "CRITICAL"
        }, {
            identifier: "CT.DOCUMENTDB.PR.1",
            name: "Require Amazon Document DB Clusters to be encrypted at rest",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon DocumentDB"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CA-9(1)", "CM-3(6)", "SC-13", "SC-28", "SC-28(1)", "SC-7(10)", "SI-7(6)"]], ["PCI DSS version 3.2.1", ["3.4", "8.2.1"]]]),
            controlObjectives: new Set(["Encrypt data at rest"]),
            releaseDate: "2023-07-24",
            description: "This control checks whether storage encryption is enabled for Amazon DocumentDB (with MongoDB compatibility) clusters.",
            resourceTypes: new Set(["AWS::DocDB::DBCluster"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.DOCUMENTDB.PR.2",
            name: "Require an Amazon DocumentDB cluster to have a backup retention period greater than or equal to seven days",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon DocumentDB"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["SI-12"]], ["PCI DSS version 3.2.1", ["3.1"]]]),
            controlObjectives: new Set(["Improve resiliency"]),
            releaseDate: "2023-07-24",
            description: "This control checks whether an Amazon DocumentDB cluster retention period is set to seven or more days (>=7). The default retention period is one day.",
            resourceTypes: new Set(["AWS::DocDB::DBCluster"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.DocumentDB.1",
            name: "Amazon DocumentDB clusters should be encrypted at rest",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon DocumentDB"]),
            frameworks: new Set([]),
            frameworksIds: new Map,
            controlObjectives: new Set(["Encrypt data at rest"]),
            releaseDate: "<UPDATE>",
            description: "This control checks whether an Amazon DocumentDB cluster is encrypted at rest. The control fails if an Amazon DocumentDB cluster isn't encrypted at rest.",
            resourceTypes: new Set(["AWS::RDS::DBCluster"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.DocumentDB.2",
            name: "Amazon DocumentDB clusters should have an adequate backup retention period",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon DocumentDB"]),
            frameworks: new Set([]),
            frameworksIds: new Map,
            controlObjectives: new Set(["Improve resiliency"]),
            releaseDate: "<UPDATE>",
            description: "This control checks whether an Amazon DocumentDB cluster has a minimum backup retention period greater than or equal to 7 days. The control fails if the backup retention period is less than 7 days.",
            resourceTypes: new Set(["AWS::RDS::DBCluster"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.DAX.PR.1",
            name: "Require encryption at rest for all Amazon DAX clusters",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon DynamoDB"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CA-9(1)", "CM-3(6)", "SC-13", "SC-28", "SC-28(1)", "SC-7(10)", "SI-7(6)"]], ["PCI DSS version 3.2.1", ["3.4"]]]),
            controlObjectives: new Set(["Encrypt data at rest"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether Amazon DAX clusters are encrypted.",
            resourceTypes: new Set(["AWS::DAX::Cluster"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.DAX.PR.2",
            name: "Require an Amazon DAX cluster to deploy nodes to at least three Availability Zones",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon DynamoDB"]),
            frameworks: new Set([]),
            frameworksIds: new Map,
            controlObjectives: new Set(["Improve resiliency", "Improve availability"]),
            releaseDate: "2023-08-31",
            description: "This control checks whether an Amazon DAX cluster is configured to deploy cluster nodes to at least three Availability Zones.",
            resourceTypes: new Set(["AWS::DAX::Cluster"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.DYNAMODB.PR.1",
            name: "Require that point-in-time recovery for a Amazon DynamoDB table is activated.",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon DynamoDB"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CP-10", "CP-6(2)", "CP-9", "SC-5(2)", "SI-12", "SI-13(5)"]], ["PCI DSS version 3.2.1", ["3.1"]]]),
            controlObjectives: new Set(["Improve resiliency"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether point-in-time recovery is enabled for an Amazon DynamoDB table.",
            resourceTypes: new Set(["AWS::DynamoDB::Table"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.DYNAMODB.PR.2",
            name: "Require DynamoDB tables to be encrypted at rest using AWS KMS keys",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon DynamoDB"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CA-9(1)", "CM-3(6)", "SC-13", "SC-28", "SC-28(1)", "SC-7(10)", "SI-7(6)"]], ["PCI DSS version 3.2.1", ["3.4", "3.5.3", "8.2.1"]]]),
            controlObjectives: new Set(["Encrypt data at rest"]),
            releaseDate: "2023-07-24",
            description: "This control checks whether Amazon DynamoDB table is encrypted with AWS Key Management Service (KMS) keys.",
            resourceTypes: new Set(["AWS::DynamoDB::Table"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.DYNAMODB.PR.3",
            name: "Require an Amazon DynamoDB table to have deletion protection enabled",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon DynamoDB"]),
            frameworks: new Set([]),
            frameworksIds: new Map,
            controlObjectives: new Set(["Improve availability"]),
            releaseDate: "2023-11-24",
            description: "This control checks whether an Amazon DynamoDB table has deletion protection set to enabled.",
            resourceTypes: new Set(["AWS::DynamoDB::Table"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.DynamoDB.1",
            name: "DynamoDB tables should automatically scale capacity with demand",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon DynamoDB"]),
            frameworks: new Set(["NIST 800-53 Rev 5"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CP-10", "CP-2(2)", "CP-6(2)", "SC-36", "SC-5(2)", "SI-13(5)"]]]),
            controlObjectives: new Set(["Improve availability"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether a DynamoDB table can scale its read or write capacity as needed. This control passes if the table uses an on-demand capacity mode or if the table uses provisioned mode with automatic scaling configured.",
            resourceTypes: new Set(["AWS::DynamoDB::Table"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.DynamoDB.2",
            name: "DynamoDB tables should have point-in-time recovery enabled",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon DynamoDB"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CP-10", "CP-6(2)", "CP-9", "SC-5(2)", "SI-12", "SI-13(5)"]], ["PCI DSS version 3.2.1", ["3.1"]]]),
            controlObjectives: new Set(["Improve resiliency"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether point-in-time recovery (PITR) is enabled for a DynamoDB table.",
            resourceTypes: new Set(["AWS::DynamoDB::Table"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.DynamoDB.3",
            name: "DynamoDB Accelerator (DAX) clusters should be encrypted at rest",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon DynamoDB"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CA-9(1)", "CM-3(6)", "SC-13", "SC-28", "SC-28(1)", "SC-7(10)", "SI-7(6)"]], ["PCI DSS version 3.2.1", ["3.4"]]]),
            controlObjectives: new Set(["Encrypt data at rest"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether a DAX cluster is encrypted at rest.",
            resourceTypes: new Set(["AWS::DynamoDB::Cluster"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "AWS-GR_EBS_OPTIMIZED_INSTANCE",
            name: "Disallow launch of EC2 instance types that are not EBS optimized",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon EC2"]),
            frameworks: new Set(["NIST 800-53 Rev 5"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CP-10", "CP-9", "SC-5(2)"]]]),
            controlObjectives: new Set(["Improve availability"]),
            releaseDate: "2019-07-30",
            description: "Launch Amazon EC2 instances only with an Amazon EBS volume that is performance optimized. EBS-optimized volumes minimize contention between Amazon EBS I/O and other traffic from your instance.",
            resourceTypes: new Set(["AWS::EC2::Volume"]),
            controlOwner: "AWS Control Tower",
            guidance: "Strongly-Recommended",
            severity: "HIGH"
        }, {
            identifier: "AWS-GR_EBS_SNAPSHOT_PUBLIC_RESTORABLE_CHECK",
            name: "Detect whether Amazon EBS snapshots are restorable by all AWS accounts",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon EC2"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-21", "AC-3", "AC-3(7)", "AC-4", "AC-4(21)", "AC-6", "SC-7", "SC-7(11)", "SC-7(16)", "SC-7(20)", "SC-7(21)", "SC-7(3)", "SC-7(4)", "SC-7(9)"]], ["PCI DSS version 3.2.1", ["1.2.1", "1.3", "1.3.1", "1.3.2", "1.3.4", "1.3.6", "2.2.2"]]]),
            controlObjectives: new Set(["Limit network access", "Enforce least privilege"]),
            releaseDate: "2021-12-01",
            description: "Detects whether all AWS accounts have access to restore Amazon EBS snapshots. The rule is NON_COMPLIANT if any snapshots have the RestorableByUserIds field set to the value All. In that case, the Amazon EBS snapshots are public.",
            resourceTypes: new Set(["AWS::EC2::Volume"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "AWS-GR_EC2_INSTANCE_NO_PUBLIC_IP",
            name: "Detect whether any Amazon EC2 instance has an associated public IPv4 address",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon EC2"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-21", "AC-3", "AC-3(7)", "AC-4", "AC-4(21)", "AC-6", "SC-7", "SC-7(11)", "SC-7(16)", "SC-7(20)", "SC-7(21)", "SC-7(3)", "SC-7(4)", "SC-7(9)"]], ["PCI DSS version 3.2.1", ["1.2.1", "1.3", "1.3.1", "1.3.2", "1.3.4", "1.3.6", "2.2.2"]]]),
            controlObjectives: new Set(["Limit network access"]),
            releaseDate: "2021-11-30",
            description: "Detects whether an Amazon Elastic Compute Cloud (Amazon EC2) instance has an associated public IPv4 address. The rule is NON_COMPLIANT if the public IP field is present in the Amazon EC2 instance configuration item. This guardrail applies only to IPv4 addresses.",
            resourceTypes: new Set(["AWS::EC2::Instance"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "AWS-GR_EC2_VOLUME_INUSE_CHECK",
            name: "Disallow EBS volumes that are unattached to an EC2 instance",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon EC2"]),
            frameworks: new Set(["NIST 800-53 Rev 5"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CA-9(1)", "CM-2", "CM-2(2)"]]]),
            controlObjectives: new Set(["Optimize costs"]),
            releaseDate: "2019-07-30",
            description: "Do not allow an Amazon EBS volume, a durable, block-level storage device that you can attach to a single EC2 instance, to persist independently from the running life of an EC2 instance.",
            resourceTypes: new Set(["AWS::EC2::Volume"]),
            controlOwner: "AWS Control Tower",
            guidance: "Strongly-Recommended",
            severity: "HIGH"
        }, {
            identifier: "AWS-GR_ENCRYPTED_VOLUMES",
            name: "Enable encryption for EBS volumes attached to EC2 instances",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon EC2"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CA-9(1)", "CM-3(6)", "SC-13", "SC-28", "SC-28(1)", "SC-7(10)", "SI-7(6)"]], ["PCI DSS version 3.2.1", ["2.2", "3.4", "8.2.1"]]]),
            controlObjectives: new Set(["Encrypt data at rest"]),
            releaseDate: "2018-11-15",
            description: "Secure EBS volumes attached to EC2 instances through encryption.",
            resourceTypes: new Set(["AWS::EC2::Volume"]),
            controlOwner: "AWS Control Tower",
            guidance: "Strongly-Recommended",
            severity: "HIGH"
        }, {
            identifier: "AWS-GR_NO_UNRESTRICTED_ROUTE_TO_IGW",
            name: "Detect whether public routes exist in the route table for an Internet Gateway (IGW)",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon EC2"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-4", "AC-4(21)", "CM-7", "SC-7", "SC-7(11)", "SC-7(16)", "SC-7(21)", "SC-7(4)"]], ["PCI DSS version 3.2.1", ["1.2.1", "1.3", "1.3.2", "1.3.4", "2.2.2"]]]),
            controlObjectives: new Set(["Limit network access"]),
            releaseDate: "2021-11-30",
            description: "Detects whether public routes exist in the route table associated with an Internet Gateway (IGW). The rule is NON_COMPLIANT if a route has a destination CIDR block of '0.0.0.0/0' or '::/0' or if a destination CIDR block does not match the rule parameter.",
            resourceTypes: new Set(["AWS::EC2::RouteTable"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "AWS-GR_RESTRICTED_COMMON_PORTS",
            name: "Disallow Internet connection via RDP",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon EC2"]),
            frameworks: new Set(["CIS AWS Benchmark 1.4", "NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["CIS AWS Benchmark 1.4", ["5.2"]], ["NIST 800-53 Rev 5", ["AC-4", "AC-4(21)", "CA-9(1)", "CM-2", "CM-2(2)", "CM-7", "SC-7", "SC-7(11)", "SC-7(16)", "SC-7(21)", "SC-7(4)", "SC-7(5)"]], ["PCI DSS version 3.2.1", ["1.2.1", "1.3", "1.3.1", "1.3.2", "1.3.4", "1.3.6", "2.2", "2.2.2"]]]),
            controlObjectives: new Set(["Limit network access"]),
            releaseDate: "2018-11-15",
            description: "Reduces a server's exposure to risk by removing unfettered connectivity to remote console services such as RDP.",
            resourceTypes: new Set(["AWS::EC2::SecurityGroup"]),
            controlOwner: "AWS Control Tower",
            guidance: "Strongly-Recommended",
            severity: "HIGH"
        }, {
            identifier: "AWS-GR_RESTRICTED_SSH",
            name: "Disallow Internet connection via SSH",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon EC2"]),
            frameworks: new Set(["CIS AWS Benchmark 1.4", "NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["CIS AWS Benchmark 1.4", ["5.2"]], ["NIST 800-53 Rev 5", ["AC-4", "AC-4(21)", "CM-7", "SC-7", "SC-7(11)", "SC-7(16)", "SC-7(21)", "SC-7(4)", "SC-7(5)"]], ["PCI DSS version 3.2.1", ["1.2.1", "1.3", "1.3.1", "1.3.2", "1.3.4", "1.3.6", "2.2", "2.2.2"]]]),
            controlObjectives: new Set(["Limit network access"]),
            releaseDate: "2018-11-15",
            description: "Reduces a server's exposure to risk by removing unfettered connectivity to remote console services such as SSH.",
            resourceTypes: new Set(["AWS::EC2::SecurityGroup"]),
            controlOwner: "AWS Control Tower",
            guidance: "Strongly-Recommended",
            severity: "HIGH"
        }, {
            identifier: "AWS-GR_SUBNET_AUTO_ASSIGN_PUBLIC_IP_DISABLED",
            name: "Detect whether any Amazon VPC subnets are assigned a public IP address",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon EC2"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-21", "AC-3", "AC-3(7)", "AC-4", "AC-4(21)", "AC-6", "SC-7", "SC-7(11)", "SC-7(16)", "SC-7(20)", "SC-7(21)", "SC-7(3)", "SC-7(4)", "SC-7(9)"]], ["PCI DSS version 3.2.1", ["1.2.1", "1.3", "1.3.1", "1.3.2", "1.3.4", "1.3.6", "2.2.2"]]]),
            controlObjectives: new Set(["Limit network access"]),
            releaseDate: "2021-11-30",
            description: "Detects whether Amazon Virtual Private Cloud (Amazon VPC) subnets are assigned a public IP address. The rule is COMPLIANT if Amazon VPC does not have subnets that are assigned a public IP address. The rule is NON_COMPLIANT if Amazon VPC has subnets that are assigned a public IP address.",
            resourceTypes: new Set(["AWS::EC2::Subnet"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.EC2.PR.1",
            name: "Require an Amazon EC2 launch template to have IMDSv2 configured",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon EC2"]),
            frameworks: new Set([]),
            frameworksIds: new Map,
            controlObjectives: new Set(["Enforce least privilege", "Protect configurations"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether your Amazon EC2 launch templates are configured with Instance Metadata Service Version 2 (IMDSv2).",
            resourceTypes: new Set(["AWS::EC2::LaunchTemplate"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "HIGH"
        }, {
            identifier: "CT.EC2.PR.10",
            name: "Require Amazon EC2 launch templates to have Amazon CloudWatch detailed monitoring activated",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon EC2"]),
            frameworks: new Set([]),
            frameworksIds: new Map,
            controlObjectives: new Set(["Establish logging and monitoring"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether the Amazon EC2 launch template has detailed monitoring enabled.",
            resourceTypes: new Set(["AWS::EC2::LaunchTemplate"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "LOW"
        }, {
            identifier: "CT.EC2.PR.11",
            name: "Require that an Amazon EC2 subnet does not automatically assign public IP addresses",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon EC2"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-21", "AC-3", "AC-3(7)", "AC-4", "AC-4(21)", "AC-6", "SC-7", "SC-7(11)", "SC-7(16)", "SC-7(20)", "SC-7(21)", "SC-7(3)", "SC-7(4)", "SC-7(9)"]], ["PCI DSS version 3.2.1", ["1.2.1", "1.3", "1.3.1", "1.3.2", "1.3.4", "1.3.6", "2.2.2"]]]),
            controlObjectives: new Set(["Limit network access"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether your Amazon VPC subnets automatically assign public IP addresses.",
            resourceTypes: new Set(["AWS::EC2::Subnet"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.EC2.PR.12",
            name: "Require an Amazon EC2 instance to specify at most one network interface by means of the NetworkInterfaces property in the AWS::EC2::Instance resource",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon EC2"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-4(21)"]], ["PCI DSS version 3.2.1", ["2.2"]]]),
            controlObjectives: new Set(["Limit network access"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether an AWS::EC2::Instance resource specifies multiple ENIs (Elastic Network Interfaces) in the NetworkInterfaces property.",
            resourceTypes: new Set(["AWS::EC2::Instance"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "LOW"
        }, {
            identifier: "CT.EC2.PR.13",
            name: "Require an Amazon EC2 instance to have detailed monitoring enabled",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon EC2"]),
            frameworks: new Set(["NIST 800-53 Rev 5"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CA-7", "SI-2"]]]),
            controlObjectives: new Set(["Establish logging and monitoring"]),
            releaseDate: "2023-07-24",
            description: "This control checks whether Amazon EC2 instances have detailed monitoring enabled.",
            resourceTypes: new Set(["AWS::EC2::Instance"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.EC2.PR.14",
            name: "Require an Amazon EBS volume configured through an Amazon EC2 launch template to encrypt data",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon EC2"]),
            frameworks: new Set([]),
            frameworksIds: new Map,
            controlObjectives: new Set(["Encrypt data at rest"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether an Amazon EC2 launch template with EBS volume block device mappings is configured to enable EBS volume encryption.",
            resourceTypes: new Set(["AWS::EC2::LaunchTemplate"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.EC2.PR.2",
            name: "Require that Amazon EC2 launch templates restrict the token hop limit to a maximum of one",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon EC2"]),
            frameworks: new Set([]),
            frameworksIds: new Map,
            controlObjectives: new Set(["Enforce least privilege", "Protect configurations"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether an Amazon EC2 launch template has a metadata token hop limit set to '1'.",
            resourceTypes: new Set(["AWS::EC2::LaunchTemplate"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "HIGH"
        }, {
            identifier: "CT.EC2.PR.3",
            name: "Require an Amazon EC2 security group to allow incoming traffic on authorized ports only",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon EC2"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-4", "AC-4(21)", "SC-7", "SC-7(11)", "SC-7(16)", "SC-7(21)", "SC-7(4)", "SC-7(5)"]], ["PCI DSS version 3.2.1", ["1.2.1", "1.3", "1.3.1", "1.3.2", "1.3.4", "1.3.6", "2.2.2"]]]),
            controlObjectives: new Set(["Limit network access", "Enforce least privilege"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether security groups that allow unrestricted incoming traffic ('0.0.0.0/0' or '::/0'), only allow inbound TCP or UDP connections to ports '80' or '443'.",
            resourceTypes: new Set(["AWS::EC2::SecurityGroup", "AWS::EC2::SecurityGroupIngress"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "HIGH"
        }, {
            identifier: "CT.EC2.PR.4",
            name: "Require that an Amazon EC2 security group does not allow incoming traffic for high-risk ports",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon EC2"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-4", "AC-4(21)", "CA-9(1)", "CM-2", "CM-2(2)", "CM-7", "SC-7", "SC-7(11)", "SC-7(16)", "SC-7(21)", "SC-7(4)", "SC-7(5)"]], ["PCI DSS version 3.2.1", ["1.2.1", "1.3", "1.3.1", "1.3.2", "1.3.4", "1.3.6", "2.2", "2.2.2"]]]),
            controlObjectives: new Set(["Limit network access"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether Amazon EC2 security groups allow unrestricted incoming TCP and/or UDP traffic to ports '3389', '20', '23', '110', '143', '3306', '8080', '1433', '9200', '9300', '25', '445', '135', '21', '1434', '4333', '5432', '5500', '5601', '22', '3000', '5000', '8088', '8888'.",
            resourceTypes: new Set(["AWS::EC2::SecurityGroup", "AWS::EC2::SecurityGroupIngress"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "CRITICAL"
        }, {
            identifier: "CT.EC2.PR.5",
            name: "Require any Amazon EC2 network ACL to prevent ingress from 0.0.0.0/0 to port 22 or port 3389",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon EC2"]),
            frameworks: new Set(["CIS AWS Benchmark 1.4", "NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["CIS AWS Benchmark 1.4", ["5.1"]], ["NIST 800-53 Rev 5", ["AC-4(21)", "CA-9(1)", "CM-2", "CM-2(2)", "CM-7", "SC-7", "SC-7(21)", "SC-7(5)"]], ["PCI DSS version 3.2.1", ["1.2.1", "1.3", "1.3.1", "1.3.2", "1.3.4", "2.2", "2.2.2"]]]),
            controlObjectives: new Set(["Limit network access"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether the Amazon EC2 network ACL inbound entry allows unrestricted incoming traffic ('0.0.0.0/0' or '::/0') for SSH or RDP.",
            resourceTypes: new Set(["AWS::EC2::NetworkAclEntry"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.EC2.PR.6",
            name: "Require that Amazon EC2 Transit Gateways refuse automatic Amazon VPC attachment requests",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon EC2"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-4(21)", "CA-9(1)", "CM-2"]], ["PCI DSS version 3.2.1", ["1.2.1", "1.3", "1.3.2", "1.3.4"]]]),
            controlObjectives: new Set(["Limit network access"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether Amazon EC2 Transit Gateways are configured to automatically accept Amazon VPC attachment requests.",
            resourceTypes: new Set(["AWS::EC2::TransitGateway"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "HIGH"
        }, {
            identifier: "CT.EC2.PR.7",
            name: "Require an Amazon EBS volume resource to be encrypted at rest when defined by means of the AWS::EC2::Instance BlockDeviceMappings property or AWS::EC2::Volume resource type",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon EC2"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CA-9(1)", "CM-3(6)", "SC-13", "SC-28", "SC-28(1)", "SC-7(10)", "SI-7(6)"]], ["PCI DSS version 3.2.1", ["2.2", "3.4", "8.2.1"]]]),
            controlObjectives: new Set(["Encrypt data at rest"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether your standalone Amazon EC2 EBS volume and Amazon EBS volume created through an EC2 instance Block Device Mapping are encrypted at rest. Specifically, it checks that the Encrypted property is set to true in either the EBS volume resource definition or an EC2 instance resource definition's BlockDeviceMappings property.",
            resourceTypes: new Set(["AWS::EC2::Instance", "AWS::EC2::Volume"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.EC2.PR.8",
            name: "Require an Amazon EC2 instance to set AssociatePublicIpAddress to false on a new network interface created by means of the NetworkInterfaces property in the AWS::EC2::Instance resource",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon EC2"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-21", "AC-3", "AC-3(7)", "AC-4", "AC-4(21)", "AC-6", "SC-7", "SC-7(11)", "SC-7(16)", "SC-7(20)", "SC-7(21)", "SC-7(3)", "SC-7(4)", "SC-7(9)"]], ["PCI DSS version 3.2.1", ["1.2.1", "1.3", "1.3.1", "1.3.2", "1.3.4", "1.3.6", "2.2.2"]]]),
            controlObjectives: new Set(["Limit network access"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether your Amazon EC2 instance is configured NOT to associate a public IP address by default, and it requires configuring the AssociatePublicIpAddress parameter to false on a new network interface created by means of the NetworkInterfaces property.",
            resourceTypes: new Set(["AWS::EC2::Instance"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "HIGH"
        }, {
            identifier: "CT.EC2.PR.9",
            name: "Require any Amazon EC2 launch template not to auto-assign public IP addresses to network interfaces",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon EC2"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-21", "AC-3", "AC-3(7)", "AC-4", "AC-4(21)", "AC-6", "SC-7", "SC-7(11)", "SC-7(16)", "SC-7(20)", "SC-7(21)", "SC-7(3)", "SC-7(4)", "SC-7(9)"]], ["PCI DSS version 3.2.1", ["1.2.1", "1.3", "1.3.1", "1.3.2", "1.3.4", "1.3.6", "2.2.2"]]]),
            controlObjectives: new Set(["Limit network access"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether your Amazon EC2 launch templates are configured to assign public IP addresses to network interfaces.",
            resourceTypes: new Set(["AWS::EC2::LaunchTemplate"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "HIGH"
        }, {
            identifier: "INTERNAL.CT.EC2.PR.GXCGK",
            name: "Require AWS Client VPN endpoints to have logging activated",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon EC2"]),
            frameworks: new Set([]),
            frameworksIds: new Map,
            controlObjectives: new Set(["Establish logging and monitoring"]),
            releaseDate: "2023-03-31",
            description: "This control checks whether AWS Client VPN endpoints have client connection logging enabled.",
            resourceTypes: new Set(["AWS::EC2::ClientVpnEndpoint"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.EC2.1",
            name: "EBS snapshots should not be publicly restorable",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon EC2"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-21", "AC-3", "AC-3(7)", "AC-4", "AC-4(21)", "AC-6", "SC-7", "SC-7(11)", "SC-7(16)", "SC-7(20)", "SC-7(21)", "SC-7(3)", "SC-7(4)", "SC-7(9)"]], ["PCI DSS version 3.2.1", ["1.2.1", "1.3", "1.3.1", "1.3.2", "1.3.4", "1.3.6", "2.2.2"]]]),
            controlObjectives: new Set(["Enforce least privilege", "Limit network access"]),
            releaseDate: "2022-11-28",
            description: "This AWS control checks whether Amazon Elastic Block Store snapshots are not publicly restorable.",
            resourceTypes: new Set(["AWS::::Account"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "CRITICAL"
        }, {
            identifier: "SH.EC2.10",
            name: "Amazon EC2 should be configured to use VPC endpoints that are created for the Amazon EC2 service",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon EC2"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-21", "AC-3", "AC-3(7)", "AC-4", "AC-4(21)", "AC-6", "SC-7", "SC-7(11)", "SC-7(16)", "SC-7(20)", "SC-7(21)", "SC-7(3)", "SC-7(4)"]], ["PCI DSS version 3.2.1", ["1.2.1", "1.3", "1.3.1", "1.3.2", "1.3.4", "1.3.6", "4.1"]]]),
            controlObjectives: new Set(["Limit network access"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether a service endpoint for Amazon EC2 is created for each VPC. The control fails if a VPC does not have a VPC endpoint created for the Amazon EC2 service.",
            resourceTypes: new Set(["AWS::EC2::VPC"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.EC2.15",
            name: "EC2 subnets should not automatically assign public IP addresses",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon EC2"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-21", "AC-3", "AC-3(7)", "AC-4", "AC-4(21)", "AC-6", "SC-7", "SC-7(11)", "SC-7(16)", "SC-7(20)", "SC-7(21)", "SC-7(3)", "SC-7(4)", "SC-7(9)"]], ["PCI DSS version 3.2.1", ["1.2.1", "1.3", "1.3.1", "1.3.2", "1.3.4", "1.3.6", "2.2.2"]]]),
            controlObjectives: new Set(["Limit network access"]),
            releaseDate: "2022-11-28",
            description: "This control checks if the assignment of public IPs in Amazon Virtual Private Cloud (VPC) subnets have the MapPublicIpOnLaunch set to FALSE. The control will pass if the flag is set to FALSE.",
            resourceTypes: new Set(["AWS::EC2::Subnet"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.EC2.16",
            name: "Unused Network Access Control Lists should be removed",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon EC2"]),
            frameworks: new Set(["PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["PCI DSS version 3.2.1", ["2.4"]]]),
            controlObjectives: new Set(["Protect configurations"]),
            releaseDate: "2022-11-28",
            description: "This control checks to see if there are any NACLs (Network Access Control List) that are unused. The control will check the item configuration of the resource AWS::EC2::NetworkAcl and determine the relationships of the NACL.",
            resourceTypes: new Set(["AWS::EC2::NetworkAcl"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "LOW"
        }, {
            identifier: "SH.EC2.17",
            name: "EC2 instances should not use multiple ENIs",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon EC2"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-4(21)"]], ["PCI DSS version 3.2.1", ["2.2"]]]),
            controlObjectives: new Set(["Limit network access"]),
            releaseDate: "2022-11-28",
            description: "This control checks to see if Amazon EC2 instance uses multiple ENI/EFA. This control will pass if single network adapters is used.",
            resourceTypes: new Set(["AWS::EC2::Instance"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "LOW"
        }, {
            identifier: "SH.EC2.18",
            name: "Security groups should only allow unrestricted incoming traffic for authorized ports",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon EC2"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-4", "AC-4(21)", "SC-7", "SC-7(11)", "SC-7(16)", "SC-7(21)", "SC-7(4)", "SC-7(5)"]], ["PCI DSS version 3.2.1", ["1.2.1", "1.3", "1.3.1", "1.3.2", "1.3.4", "1.3.6", "2.2.2"]]]),
            controlObjectives: new Set(["Limit network access", "Enforce least privilege"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether the security groups allow unrestricted incoming traffic. The control fails if ports allow unrestricted traffic on ports other than 80 and 443, which are default values for parameter authorizedTcpPorts.",
            resourceTypes: new Set(["AWS::EC2::SecurityGroup"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "HIGH"
        }, {
            identifier: "SH.EC2.19",
            name: "Security groups should not allow unrestricted access to ports with high risk",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon EC2"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-4", "AC-4(21)", "CA-9(1)", "CM-2", "CM-2(2)", "CM-7", "SC-7", "SC-7(11)", "SC-7(16)", "SC-7(21)", "SC-7(4)", "SC-7(5)"]], ["PCI DSS version 3.2.1", ["1.2.1", "1.3", "1.3.1", "1.3.2", "1.3.4", "1.3.6", "2.2", "2.2.2"]]]),
            controlObjectives: new Set(["Limit network access"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether unrestricted incoming traffic for the security groups is accessible to the specified ports [3389, 20, 23, 110, 143, 3306, 8080, 1433, 9200, 9300, 25, 445, 135, 21, 1434, 4333, 5432, 5500, 5601, 22, 3000, 5000, 8088, 8888] that have the highest risk. This control fails if any of the rules in a security group allow ingress traffic from 0.0.0.0/0 or ::/0 for those ports.",
            resourceTypes: new Set(["AWS::EC2::SecurityGroup"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "CRITICAL"
        }, {
            identifier: "SH.EC2.2",
            name: "The VPC default security group should not allow inbound and outbound traffic",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon EC2"]),
            frameworks: new Set(["CIS AWS Benchmark 1.4", "NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["CIS AWS Benchmark 1.4", ["5.3"]], ["NIST 800-53 Rev 5", ["AC-4", "AC-4(21)", "SC-7", "SC-7(11)", "SC-7(16)", "SC-7(21)", "SC-7(4)", "SC-7(5)"]], ["PCI DSS version 3.2.1", ["1.2.1", "1.3", "1.3.1", "1.3.2", "1.3.4", "1.3.6", "2.1", "2.2", "2.2.2"]]]),
            controlObjectives: new Set(["Limit network access", "Enforce least privilege"]),
            releaseDate: "2022-11-28",
            description: "This AWS control checks that the default security group of a VPC does not allow inbound or outbound traffic.",
            resourceTypes: new Set(["AWS::EC2::SecurityGroup"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "HIGH"
        }, {
            identifier: "SH.EC2.21",
            name: "Network ACLs should not allow ingress from 0.0.0.0/0 to port 22 or port 3389",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon EC2"]),
            frameworks: new Set(["CIS AWS Benchmark 1.4", "NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["CIS AWS Benchmark 1.4", ["5.1"]], ["NIST 800-53 Rev 5", ["AC-4(21)", "CA-9(1)", "CM-2", "CM-2(2)", "CM-7", "SC-7", "SC-7(21)", "SC-7(5)"]], ["PCI DSS version 3.2.1", ["1.2.1", "1.3", "1.3.1", "1.3.2", "1.3.4", "2.2", "2.2.2"]]]),
            controlObjectives: new Set(["Limit network access"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether a network access control list (NACL) allows unrestricted access to the default ports for SSH/RDP ingress traffic. The rule fails if a NACL inbound entry allows a source CIDR block of '0.0.0.0/0' or '::/0' for ports 22 or 3389",
            resourceTypes: new Set(["AWS::EC2::NetworkAcl"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.EC2.22",
            name: "Unused EC2 security groups should be removed",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon EC2"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CM-8(1)"]], ["PCI DSS version 3.2.1", ["2.2", "2.4"]]]),
            controlObjectives: new Set(["Protect configurations", "Limit network access"]),
            releaseDate: "2022-11-28",
            description: "This AWS control checks that security groups are attached to Amazon EC2 instances or to an elastic network interface. The control will fail the security group is not associated with an Amazon EC2 instance or an elastic network interface.",
            resourceTypes: new Set(["AWS::EC2::SecurityGroup"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.EC2.23",
            name: "EC2 Transit Gateways should not automatically accept VPC attachment requests",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon EC2"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-4(21)", "CA-9(1)", "CM-2"]], ["PCI DSS version 3.2.1", ["1.2.1", "1.3", "1.3.2", "1.3.4"]]]),
            controlObjectives: new Set(["Limit network access"]),
            releaseDate: "2022-11-28",
            description: "This control checks if EC2 Transit Gateways are automatically accepting shared VPC attachments requests. This control will fail for a Transit Gateway that automatically accept shared VPC attachment requests.",
            resourceTypes: new Set(["AWS::EC2::TransitGateway"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "HIGH"
        }, {
            identifier: "SH.EC2.24",
            name: "EC2 paravirtual instance types should not be used",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon EC2"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CM-2", "CM-2(2)"]], ["PCI DSS version 3.2.1", ["2.2"]]]),
            controlObjectives: new Set(["Protect configurations", "Optimize costs"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether the virtualization type of an EC2 instance is paravirtual. The control fails for an EC2 instance if \u2018virtualizationType\u2019 is set to \u2018paravirtual\u2019.",
            resourceTypes: new Set(["AWS::EC2::Instance"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.EC2.25",
            name: "EC2 launch templates should not assign public IPs to network interfaces",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon EC2"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-21", "AC-3", "AC-3(7)", "AC-4", "AC-4(21)", "AC-6", "SC-7", "SC-7(11)", "SC-7(16)", "SC-7(20)", "SC-7(21)", "SC-7(3)", "SC-7(4)", "SC-7(9)"]], ["PCI DSS version 3.2.1", ["1.2.1", "1.3", "1.3.1", "1.3.2", "1.3.4", "1.3.6", "2.2.2"]]]),
            controlObjectives: new Set(["Limit network access"]),
            releaseDate: "2023-06-12",
            description: "This control checks if Amazon EC2 launch templates are configured to assign public IP addresses to network interfaces upon launch. The control fails if an EC2 launch template is configured to assign a public IP address to network interfaces or if there is at least one network interface that has a public IP address.",
            resourceTypes: new Set(["AWS::EC2::LaunchTemplate"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "HIGH"
        }, {
            identifier: "SH.EC2.3",
            name: "Attached EBS volumes should be encrypted at-rest",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon EC2"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CA-9(1)", "CM-3(6)", "SC-13", "SC-28", "SC-28(1)", "SC-7(10)", "SI-7(6)"]], ["PCI DSS version 3.2.1", ["2.2", "3.4", "8.2.1"]]]),
            controlObjectives: new Set(["Encrypt data at rest"]),
            releaseDate: "2022-11-28",
            description: "This AWS control checks whether the EBS volumes that are in an attached state are encrypted.",
            resourceTypes: new Set(["AWS::EC2::Volume"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.EC2.4",
            name: "Stopped EC2 instances should be removed after a specified time period",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon EC2"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CA-9(1)", "CM-2", "CM-2(2)"]], ["PCI DSS version 3.2.1", ["2.4"]]]),
            controlObjectives: new Set(["Optimize costs"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether any EC2 instances have been stopped for more than the allowed number of days. An EC2 instance fails this check if it is stopped for longer than the maximum allowed time period, which by default is 30 days.",
            resourceTypes: new Set(["AWS::EC2::Instance"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.EC2.6",
            name: "VPC flow logging should be enabled in all VPCs",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon EC2"]),
            frameworks: new Set(["CIS AWS Benchmark 1.4", "NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["CIS AWS Benchmark 1.4", ["3.9"]], ["NIST 800-53 Rev 5", ["AC-4(26)", "AU-12", "AU-2", "AU-3", "AU-6(3)", "AU-6(4)", "CA-7", "SI-7(8)"]], ["PCI DSS version 3.2.1", ["10.1", "10.3.1", "10.3.2", "10.3.3", "10.3.4", "10.3.5", "10.3.6", "2.2"]]]),
            controlObjectives: new Set(["Establish logging and monitoring"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether Amazon Virtual Private Cloud flow logs are found and enabled for Amazon VPCs. The traffic type is set to 'Reject'.",
            resourceTypes: new Set(["AWS::EC2::VPC"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.EC2.7",
            name: "EBS default encryption should be enabled",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon EC2"]),
            frameworks: new Set(["CIS AWS Benchmark 1.4", "NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["CIS AWS Benchmark 1.4", ["2.2.1"]], ["NIST 800-53 Rev 5", ["CA-9(1)", "CM-3(6)", "SC-13", "SC-28", "SC-28(1)", "SC-7(10)", "SI-7(6)"]], ["PCI DSS version 3.2.1", ["2.2", "3.4", "8.2.1"]]]),
            controlObjectives: new Set(["Encrypt data at rest"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether Amazon Elastic Block Store (EBS) encryption is enabled by default. The control fails if EBS default encryption is not enabled.",
            resourceTypes: new Set(["AWS::::Account"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.EC2.8",
            name: "EC2 instances should use Instance Metadata Service Version 2 (IMDSv2)",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon EC2"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-3", "AC-3(15)", "AC-3(7)", "AC-6"]], ["PCI DSS version 3.2.1", ["7.1.1", "7.2.1", "7.2.2"]]]),
            controlObjectives: new Set(["Protect configurations"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether your Amazon Elastic Compute Cloud (Amazon EC2) instance metadata version is configured with Instance Metadata Service Version 2 (IMDSv2). The control passes if HttpTokens is set to required for IMDSv2. The control fails if HttpTokens is set to optional.",
            resourceTypes: new Set(["AWS::EC2::Instance"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "HIGH"
        }, {
            identifier: "SH.EC2.9",
            name: "EC2 instances should not have a public IPv4 address",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon EC2"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-21", "AC-3", "AC-3(7)", "AC-4", "AC-4(21)", "AC-6", "SC-7", "SC-7(11)", "SC-7(16)", "SC-7(20)", "SC-7(21)", "SC-7(3)", "SC-7(4)", "SC-7(9)"]], ["PCI DSS version 3.2.1", ["1.2.1", "1.3", "1.3.1", "1.3.2", "1.3.4", "1.3.6", "2.2.2"]]]),
            controlObjectives: new Set(["Limit network access"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether EC2 instances have a public IP address. The control fails if the publicIp field is present in the EC2 instance configuration item. This control applies to IPv4 addresses only.",
            resourceTypes: new Set(["AWS::EC2::Instance"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "HIGH"
        }, {
            identifier: "AWS-GR_DISALLOW_VPC_INTERNET_ACCESS",
            name: "Disallow internet access for an Amazon VPC instance managed by a customer",
            behavior: "PREVENTIVE",
            implementationTypes: new Set(["Service control policy (SCP)"]),
            services: new Set(["Amazon EC2"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-4", "AC-4(21)", "AC-6", "SC-7", "SC-7(11)", "SC-7(16)", "SC-7(20)", "SC-7(21)", "SC-7(3)", "SC-7(4)", "SC-7(9)"]], ["PCI DSS version 3.2.1", ["1.2.1", "1.3", "1.3.1", "1.3.2", "1.3.4", "1.3.6"]]]),
            controlObjectives: new Set(["Limit network access"]),
            releaseDate: "2021-11-30",
            description: "Disallow internet access for an Amazon Virtual Private Cloud (VPC) instance managed by a customer, rather than by an AWS service.",
            resourceTypes: new Set(["AWS::EC2::InternetGateway", "AWS::EC2::EgressOnlyInternetGateway", "AWS::EC2::VPC", "AWS::EC2::Subnet", "AWS::EC2::CarrierGateway"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "AWS-GR_DISALLOW_VPN_CONNECTIONS",
            name: "Disallow Amazon Virtual Private Network (VPN) connections",
            behavior: "PREVENTIVE",
            implementationTypes: new Set(["Service control policy (SCP)"]),
            services: new Set(["Amazon EC2"]),
            frameworks: new Set([]),
            frameworksIds: new Map,
            controlObjectives: new Set(["Limit network access"]),
            releaseDate: "2021-11-30",
            description: "Disallows Virtual Private Network (VPN) connections (Site-to-Site VPN and Client VPN) to an Amazon Virtual Private Cloud (VPC).",
            resourceTypes: new Set(["AWS::EC2::VPNGateway", "AWS::EC2::CustomerGateway", "AWS::EC2::VPNConnection", "AWS::EC2::ClientVpnEndpoint", "AWS::EC2::ClientVpnTargetNetworkAssociation", "AWS::EC2::ClientVpnAuthorizationRule"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "AWS-GR_AUTOSCALING_LAUNCH_CONFIG_PUBLIC_IP_DISABLED",
            name: "Detect whether public IP addresses for Amazon EC2 Auto Scaling are enabled through launch configurations",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon EC2 Auto Scaling"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-21", "AC-3", "AC-3(7)", "AC-4", "AC-4(21)", "AC-6", "SC-7", "SC-7(11)", "SC-7(16)", "SC-7(20)", "SC-7(21)", "SC-7(3)", "SC-7(4)", "SC-7(9)"]], ["PCI DSS version 3.2.1", ["1.2.1", "1.3", "1.3.1", "1.3.2", "1.3.4", "1.3.6", "2.2", "2.2.2"]]]),
            controlObjectives: new Set(["Limit network access"]),
            releaseDate: "2021-11-30",
            description: "Detects whether Amazon EC2 Auto Scaling groups have public IP addresses enabled through launch configurations. This rule is NON_COMPLIANT if the launch configuration for an Auto Scaling group has the value of the field AssociatePublicIpAddress set as True.",
            resourceTypes: new Set(["AWS::AutoScaling::LaunchConfiguration"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.AUTOSCALING.PR.1",
            name: "Require an Amazon EC2 Auto Scaling group to have multiple Availability Zones",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon EC2 Auto Scaling"]),
            frameworks: new Set(["NIST 800-53 Rev 5"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CP-10", "CP-2(2)", "CP-6(2)", "SC-36", "SC-5(2)", "SI-13(5)"]]]),
            controlObjectives: new Set(["Improve availability"]),
            releaseDate: "2023-05-19",
            description: "This control checks whether your Auto Scaling group spans multiple Availability Zones.",
            resourceTypes: new Set(["AWS::AutoScaling::AutoScalingGroup"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.AUTOSCALING.PR.2",
            name: "Require a launch configuration for Amazon EC2 Auto Scaling groups to have Amazon EC2 instances requiring Instance Metadata Service Version 2 (IMDSv2)",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon EC2 Auto Scaling"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-3", "AC-3(15)", "AC-3(7)", "AC-6", "CA-9(1)", "CM-2"]], ["PCI DSS version 3.2.1", ["7.1.1", "7.2.1", "7.2.2"]]]),
            controlObjectives: new Set(["Protect configurations"]),
            releaseDate: "2023-05-19",
            description: "This control checks whether an Amazon EC2 Auto Scaling launch configuration is configured to require the use of IMDSv2.",
            resourceTypes: new Set(["AWS::AutoScaling::LaunchConfiguration"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "HIGH"
        }, {
            identifier: "CT.AUTOSCALING.PR.3",
            name: "Require an Amazon EC2 Auto Scaling launch configuration to have a single-hop metadata response limit",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon EC2 Auto Scaling"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CA-9(1)", "CM-2", "CM-2(2)"]], ["PCI DSS version 3.2.1", ["7.1.1"]]]),
            controlObjectives: new Set(["Protect configurations"]),
            releaseDate: "2023-05-19",
            description: "This control checks whether an Amazon EC2 Auto Scaling launch configuration has a metadata token hop limit set to '1'.",
            resourceTypes: new Set(["AWS::AutoScaling::LaunchConfiguration"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "HIGH"
        }, {
            identifier: "CT.AUTOSCALING.PR.4",
            name: "Require an Amazon EC2 Auto Scaling group associated with an AWS Elastic Load Balancer (ELB) to have ELB health checks activated",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon EC2 Auto Scaling"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CA-7", "CP-2(2)", "SI-2"]], ["PCI DSS version 3.2.1", ["2.2"]]]),
            controlObjectives: new Set(["Improve availability"]),
            releaseDate: "2023-05-19",
            description: "This control checks whether your Amazon EC2 Auto Scaling groups that are associated with a load balancer are using Elastic Load Balancing health checks.",
            resourceTypes: new Set(["AWS::AutoScaling::AutoScalingGroup"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "LOW"
        }, {
            identifier: "CT.AUTOSCALING.PR.5",
            name: "Require that an Amazon EC2 Auto Scaling group launch configuration does not have Amazon EC2 instances with public IP addresses",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon EC2 Auto Scaling"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-21", "AC-3", "AC-3(7)", "AC-4", "AC-4(21)", "AC-6", "SC-7", "SC-7(11)", "SC-7(16)", "SC-7(20)", "SC-7(21)", "SC-7(3)", "SC-7(4)", "SC-7(9)"]], ["PCI DSS version 3.2.1", ["1.2.1", "1.3", "1.3.1", "1.3.2", "1.3.4", "1.3.6", "2.2", "2.2.2"]]]),
            controlObjectives: new Set(["Limit network access"]),
            releaseDate: "2023-05-19",
            description: "This control checks whether Amazon EC2 Auto Scaling groups have public IP addresses configured through Launch Configurations.",
            resourceTypes: new Set(["AWS::AutoScaling::LaunchConfiguration"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "HIGH"
        }, {
            identifier: "CT.AUTOSCALING.PR.6",
            name: "Require any Amazon EC2 Auto Scaling groups to use multiple instance types",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon EC2 Auto Scaling"]),
            frameworks: new Set(["NIST 800-53 Rev 5"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CP-10", "CP-2(2)", "CP-6(2)", "SC-36", "SC-5(2)", "SI-13(5)"]]]),
            controlObjectives: new Set(["Improve availability"]),
            releaseDate: "2023-05-19",
            description: "This control checks whether an Amazon EC2 Auto Scaling group uses multiple instance types through a mixed instance policy and explicit instance type overrides.",
            resourceTypes: new Set(["AWS::AutoScaling::AutoScalingGroup"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.AUTOSCALING.PR.8",
            name: "Require any Amazon EC2 Auto Scaling groups to have EC2 launch templates configured",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon EC2 Auto Scaling"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CA-9(1)", "CM-2", "CM-2(2)"]], ["PCI DSS version 3.2.1", ["2.2"]]]),
            controlObjectives: new Set(["Manage vulnerabilities"]),
            releaseDate: "2023-05-19",
            description: "This control checks whether an Amazon EC2 Auto Scaling group is configured to use an EC2 launch template.",
            resourceTypes: new Set(["AWS::AutoScaling::AutoScalingGroup"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.AutoScaling.1",
            name: "Auto scaling groups associated with a Classic Load Balancer should use load balancer health checks",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon EC2 Auto Scaling"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CA-7", "CP-2(2)", "SI-2"]], ["PCI DSS version 3.2.1", ["2.2"]]]),
            controlObjectives: new Set(["Improve availability"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether your Auto Scaling groups that are associated with a Classic Load Balancer are using Elastic Load Balancing health checks.",
            resourceTypes: new Set(["AWS::AutoScaling::AutoScalingGroup"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "LOW"
        }, {
            identifier: "SH.AutoScaling.2",
            name: "Amazon EC2 Auto Scaling group should cover multiple Availability Zones",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon EC2 Auto Scaling"]),
            frameworks: new Set(["NIST 800-53 Rev 5"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CP-10", "CP-2(2)", "CP-6(2)", "SC-36", "SC-5(2)", "SI-13(5)"]]]),
            controlObjectives: new Set(["Improve availability"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether an Auto Scaling group spans multiple Availability Zones. The control fails if an Auto Scaling group does not span multiple availability zones.",
            resourceTypes: new Set(["AWS::AutoScaling::AutoScalingGroup"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.AutoScaling.3",
            name: "Auto Scaling group launch configurations should configure EC2 instances to require Instance Metadata Service Version 2 (IMDSv2)",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon EC2 Auto Scaling"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-3", "AC-3(15)", "AC-3(7)", "AC-6", "CA-9(1)", "CM-2"]], ["PCI DSS version 3.2.1", ["7.1.1", "7.2.1", "7.2.2"]]]),
            controlObjectives: new Set(["Protect configurations"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether only IMDSv2 is enabled. This control fails if the metadata version is not included in the launch configuration or if both IMDSv1 and IMDSv2 are enabled.",
            resourceTypes: new Set(["AWS::AutoScaling::LaunchConfiguration"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "HIGH"
        }, {
            identifier: "SH.AutoScaling.4",
            name: "Auto Scaling group launch configuration should not have a metadata response hop limit greater than 1",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon EC2 Auto Scaling"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CA-9(1)", "CM-2", "CM-2(2)"]], ["PCI DSS version 3.2.1", ["7.1.1"]]]),
            controlObjectives: new Set(["Protect configurations"]),
            releaseDate: "2022-11-28",
            description: "This control checks the number of network hops that the metadata token can travel. This control fails if the metadata response hop limit is greater than 1.",
            resourceTypes: new Set(["AWS::AutoScaling::LaunchConfiguration"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "HIGH"
        }, {
            identifier: "SH.Autoscaling.5",
            name: "Amazon EC2 instances launched using Auto Scaling group launch configurations should not have Public IP addresses",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon EC2 Auto Scaling"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-21", "AC-3", "AC-3(7)", "AC-4", "AC-4(21)", "AC-6", "SC-7", "SC-7(11)", "SC-7(16)", "SC-7(20)", "SC-7(21)", "SC-7(3)", "SC-7(4)", "SC-7(9)"]], ["PCI DSS version 3.2.1", ["1.2.1", "1.3", "1.3.1", "1.3.2", "1.3.4", "1.3.6", "2.2", "2.2.2"]]]),
            controlObjectives: new Set(["Limit network access"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether Amazon EC2 Auto Scaling groups have public IP addresses enabled using launch configurations.",
            resourceTypes: new Set(["AWS::AutoScaling::LaunchConfiguration"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "HIGH"
        }, {
            identifier: "SH.AutoScaling.6",
            name: "Auto Scaling groups should use multiple instance types in multiple Availability Zones",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon EC2 Auto Scaling"]),
            frameworks: new Set(["NIST 800-53 Rev 5"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CP-10", "CP-2(2)", "CP-6(2)", "SC-36", "SC-5(2)", "SI-13(5)"]]]),
            controlObjectives: new Set(["Improve availability"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether an Amazon EC2 Auto Scaling group uses multiple instance types. This control fails if the Amazon EC2 Auto Scaling group has only one instance type defined.",
            resourceTypes: new Set(["AWS::AutoScaling::AutoScalingGroup"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.AutoScaling.9",
            name: "EC2 Auto Scaling groups should use EC2 launch templates",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon EC2 Auto Scaling"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CA-9(1)", "CM-2", "CM-2(2)"]], ["PCI DSS version 3.2.1", ["2.2"]]]),
            controlObjectives: new Set(["Manage vulnerabilities"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether an Amazon EC2 Auto Scaling group is created from an EC2 launch template. This control fails if an Amazon EC2 Auto Scaling group is not created with a launch template or if a launch template is not specified in a mixed instances policy.",
            resourceTypes: new Set(["AWS::AutoScaling::AutoScalingGroup"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.ECR.PR.1",
            name: "Require Amazon ECR repositories to have a lifecycle policy configured",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon ECR"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CA-9(1)", "CM-2", "CM-2(2)"]], ["PCI DSS version 3.2.1", ["3.1"]]]),
            controlObjectives: new Set(["Manage vulnerabilities", "Protect configurations"]),
            releaseDate: "2022-11-28",
            description: "Checks if a private Amazon ECR repository has at least one lifecycle policy configured.",
            resourceTypes: new Set(["AWS::ECR::Repository"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.ECR.PR.2",
            name: "Require Amazon ECR private repositories to have image scanning enabled",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon ECR"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["RA-5"]], ["PCI DSS version 3.2.1", ["11.2.3", "6.3.2"]]]),
            controlObjectives: new Set(["Manage vulnerabilities"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether a private Amazon ECR repository has image scanning enabled.",
            resourceTypes: new Set(["AWS::ECR::Repository"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "HIGH"
        }, {
            identifier: "CT.ECR.PR.3",
            name: "Require Amazon ECR private repositories to have tag immutability enabled",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon ECR"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CA-9(1)", "CM-2", "CM-8(1)"]], ["PCI DSS version 3.2.1", ["2.2", "2.4"]]]),
            controlObjectives: new Set(["Protect configurations"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether a private Amazon ECR repository has tag immutability enabled.",
            resourceTypes: new Set(["AWS::ECR::Repository"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.ECR.1",
            name: "ECR private repositories should have image scanning configured",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon ECR"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["RA-5"]], ["PCI DSS version 3.2.1", ["11.2.3", "6.3.2"]]]),
            controlObjectives: new Set(["Manage vulnerabilities"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether a private ECR repository has image scanning configured. This control fails if a private ECR repository doesn\u2019t have image scanning configured.",
            resourceTypes: new Set(["AWS::ECR::Repository"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "HIGH"
        }, {
            identifier: "SH.ECR.2",
            name: "ECR private repositories should have tag immutability configured",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon ECR"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CA-9(1)", "CM-2", "CM-8(1)"]], ["PCI DSS version 3.2.1", ["2.2", "2.4"]]]),
            controlObjectives: new Set(["Protect configurations"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether a private ECR repository has tag immutability configured. This control fails if a private ECR repository has tag immutability disabled. This rule passes if tag immutability is configured and has the value IMMUTABLE",
            resourceTypes: new Set(["AWS::ECR::Repository"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.ECR.3",
            name: "ECR repositories should have at least one lifecycle policy configured",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon ECR"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CA-9(1)", "CM-2", "CM-2(2)"]], ["PCI DSS version 3.2.1", ["3.1"]]]),
            controlObjectives: new Set(["Manage vulnerabilities", "Protect configurations"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether an ECR repository has at least one lifecycle policy configured. This control fails if an ECR repository does not have any lifecycle policies configured.",
            resourceTypes: new Set(["AWS::ECR::Repository"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.ECS.PR.1",
            name: "Require AWS ECS Fargate Services to run on the latest Fargate platform version",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon ECS"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["SI-2", "SI-2(2)", "SI-2(4)", "SI-2(5)"]], ["PCI DSS version 3.2.1", ["6.2"]]]),
            controlObjectives: new Set(["Manage vulnerabilities"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether Amazon ECS Fargate services are configured to deploy using the 'LATEST' platform version rather than an explicit version number.",
            resourceTypes: new Set(["AWS::ECS::Service"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.ECS.PR.10",
            name: "Require that Amazon ECS task definitions do not share the host's process namespace",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon ECS"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CA-9(1)", "CM-2"]], ["PCI DSS version 3.2.1", ["1.3.7"]]]),
            controlObjectives: new Set(["Protect configurations", "Enforce least privilege"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether Amazon ECS task definitions are configured to share a host's process namespace with its containers.",
            resourceTypes: new Set(["AWS::ECS::TaskDefinition"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "HIGH"
        }, {
            identifier: "CT.ECS.PR.11",
            name: "Require Amazon ECS containers to run as non-privileged",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon ECS"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-2(1)", "AC-3", "AC-3(15)", "AC-3(7)", "AC-5", "AC-6"]], ["PCI DSS version 3.2.1", ["7.1.1", "7.2.1", "7.2.2"]]]),
            controlObjectives: new Set(["Enforce least privilege"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether container definitions in Amazon ECS Task Definitions are configured with elevated privileges.",
            resourceTypes: new Set(["AWS::ECS::TaskDefinition"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "HIGH"
        }, {
            identifier: "CT.ECS.PR.12",
            name: "Secrets should not be passed as container environment variables",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon ECS"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CA-9(1)", "CM-2"]], ["PCI DSS version 3.2.1", ["8.2.1"]]]),
            controlObjectives: new Set(["Use strong authentication"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether Amazon ECS task definition container definitions include environment variables named 'AWS_ACCESS_KEY_ID', 'AWS_SECRET_ACCESS_KEY', or 'ECS_ENGINE_AUTH_DATA'.",
            resourceTypes: new Set(["AWS::ECS::TaskDefinition"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "HIGH"
        }, {
            identifier: "CT.ECS.PR.2",
            name: "Require any Amazon ECS cluster to have Container Insights activated",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon ECS"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AU-6(3)", "AU-6(4)", "CA-7", "SI-2"]], ["PCI DSS version 3.2.1", ["10.1", "10.2.1", "10.2.2", "10.2.3", "10.2.4", "10.2.5", "10.2.7", "10.3.1", "10.3.2", "10.3.3", "10.3.4", "10.3.5", "10.3.6"]]]),
            controlObjectives: new Set(["Establish logging and monitoring"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether your Amazon ECS clusters have Container Insights enabled.",
            resourceTypes: new Set(["AWS::ECS::Cluster"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.ECS.PR.3",
            name: "Require any Amazon ECS task definition to specify a user that is not root",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon ECS"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-2(1)", "AC-3", "AC-3(15)", "AC-3(7)", "AC-5", "AC-6"]], ["PCI DSS version 3.2.1", ["7.1.1"]]]),
            controlObjectives: new Set(["Enforce least privilege", "Manage vulnerabilities"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether Amazon ECS task definitions execute as a non-root user within Amazon ECS containers.",
            resourceTypes: new Set(["AWS::ECS::TaskDefinition"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "HIGH"
        }, {
            identifier: "CT.ECS.PR.4",
            name: "Require Amazon ECS tasks to use 'awsvpc' networking mode",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon ECS"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["SC-7"]], ["PCI DSS version 3.2.1", ["1.2.1", "1.3", "1.3.1", "1.3.2", "1.3.4", "1.3.6"]]]),
            controlObjectives: new Set(["Limit network access"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether the networking mode for Amazon ECS task definitions is set to 'awsvpc'.",
            resourceTypes: new Set(["AWS::ECS::TaskDefinition"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "HIGH"
        }, {
            identifier: "CT.ECS.PR.5",
            name: "Require active Amazon ECS task definitions to have a logging configuration",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon ECS"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-4(26)", "AU-10", "AU-12", "AU-2", "AU-3", "AU-6(3)", "AU-6(4)", "CA-7", "SC-7(9)", "SI-7(8)"]], ["PCI DSS version 3.2.1", ["10.1", "10.2.1", "10.2.2", "10.2.3", "10.2.4", "10.2.5", "10.2.6", "10.2.7", "10.3.1", "10.3.2", "10.3.3", "10.3.4", "10.3.5", "10.3.6"]]]),
            controlObjectives: new Set(["Establish logging and monitoring"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether Amazon ECS task definitions have a logging configuration specified.",
            resourceTypes: new Set(["AWS::ECS::TaskDefinition"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "HIGH"
        }, {
            identifier: "CT.ECS.PR.6",
            name: "Require Amazon ECS containers to allow read-only access to the root filesystem",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon ECS"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-2(1)", "AC-3", "AC-3(15)", "AC-3(7)", "AC-5", "AC-6"]], ["PCI DSS version 3.2.1", ["7.1.1", "7.2.1", "7.2.2"]]]),
            controlObjectives: new Set(["Enforce least privilege"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether Amazon ECS task definitions have been configured to require read-only access to container root filesystems.",
            resourceTypes: new Set(["AWS::ECS::TaskDefinition"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "HIGH"
        }, {
            identifier: "CT.ECS.PR.7",
            name: "Require Amazon ECS task definitions to have hard memory usage limits",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon ECS"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CA-9(1)", "CM-2"]], ["PCI DSS version 3.2.1", ["2.2"]]]),
            controlObjectives: new Set(["Improve availability"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether Amazon ECS task definitions have a set memory limit for container definitions.",
            resourceTypes: new Set(["AWS::ECS::TaskDefinition"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "HIGH"
        }, {
            identifier: "CT.ECS.PR.8",
            name: "Require Amazon ECS task definitions to have secure networking modes and user definitions",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon ECS"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-2(1)", "AC-3", "AC-3(15)", "AC-3(7)", "AC-5", "AC-6"]], ["PCI DSS version 3.2.1", ["7.1.1", "7.1.2", "7.2.1", "7.2.2"]]]),
            controlObjectives: new Set(["Manage vulnerabilities"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether Amazon ECS task definitions using host networking mode have either a privileged container definition or specify a non root user definition.",
            resourceTypes: new Set(["AWS::ECS::TaskDefinition"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "HIGH"
        }, {
            identifier: "CT.ECS.PR.9",
            name: "Require Amazon ECS services not to assign public IP addresses automatically",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon ECS"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-21", "AC-3", "AC-3(7)", "AC-4", "AC-4(21)", "AC-6", "SC-7", "SC-7(11)", "SC-7(16)", "SC-7(20)", "SC-7(21)", "SC-7(3)", "SC-7(4)", "SC-7(9)"]], ["PCI DSS version 3.2.1", ["1.2.1", "1.3", "1.3.1", "1.3.2", "1.3.4", "1.3.6", "2.2.2"]]]),
            controlObjectives: new Set(["Limit network access", "Enforce least privilege"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether your Amazon ECS services are configured to assign public IP addresses automatically.",
            resourceTypes: new Set(["AWS::ECS::Service"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "HIGH"
        }, {
            identifier: "SH.ECS.1",
            name: "Amazon ECS task definitions should have secure networking modes and user definitions.",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon ECS"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-2(1)", "AC-3", "AC-3(15)", "AC-3(7)", "AC-5", "AC-6"]], ["PCI DSS version 3.2.1", ["7.1.1", "7.1.2", "7.2.1", "7.2.2"]]]),
            controlObjectives: new Set(["Manage vulnerabilities"]),
            releaseDate: "2022-11-28",
            description: 'This control checks if an Amazon ECS Task Definition with host networking mode has "privileged" or "user" container definitions. The control fails with host network mode and container definitions are privileged=false or empty and user=root or empty.',
            resourceTypes: new Set(["AWS::ECS::TaskDefinition"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "HIGH"
        }, {
            identifier: "SH.ECS.10",
            name: "ECS Fargate services should run on the latest Fargate platform version",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon ECS"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["SI-2", "SI-2(2)", "SI-2(4)", "SI-2(5)"]], ["PCI DSS version 3.2.1", ["6.2"]]]),
            controlObjectives: new Set(["Manage vulnerabilities"]),
            releaseDate: "2022-11-28",
            description: "This control checks if ECS Fargate services is running the latest Fargate platform version. This control fails if the platform version is not latest.",
            resourceTypes: new Set(["AWS::ECS::Service"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.ECS.12",
            name: "ECS clusters should use Container Insights",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon ECS"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AU-6(3)", "AU-6(4)", "CA-7", "SI-2"]], ["PCI DSS version 3.2.1", ["10.1", "10.2.1", "10.2.2", "10.2.3", "10.2.4", "10.2.5", "10.2.7", "10.3.1", "10.3.2", "10.3.3", "10.3.4", "10.3.5", "10.3.6"]]]),
            controlObjectives: new Set(["Establish logging and monitoring"]),
            releaseDate: "2022-11-28",
            description: "This control checks if ECS clusters use Container Insights. This control fails if Container Insights are not set up for a cluster.",
            resourceTypes: new Set(["AWS::ECS::Cluster"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.ECS.2",
            name: "ECS services should not have public IP addresses assigned to them automatically",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon ECS"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-21", "AC-3", "AC-3(7)", "AC-4", "AC-4(21)", "AC-6", "SC-7", "SC-7(11)", "SC-7(16)", "SC-7(20)", "SC-7(21)", "SC-7(3)", "SC-7(4)", "SC-7(9)"]], ["PCI DSS version 3.2.1", ["1.2.1", "1.3", "1.3.1", "1.3.2", "1.3.4", "1.3.6", "2.2.2"]]]),
            controlObjectives: new Set(["Limit network access", "Enforce least privilege"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether ECS services are configured to automatically assign public IP addresses. This control fails if AssignPublicIP is ENABLED.",
            resourceTypes: new Set(["AWS::ECS::Service"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "HIGH"
        }, {
            identifier: "SH.ECS.3",
            name: "ECS task definitions should not share the host's process namespace",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon ECS"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CA-9(1)", "CM-2"]], ["PCI DSS version 3.2.1", ["1.3.7"]]]),
            controlObjectives: new Set(["Protect configurations", "Enforce least privilege"]),
            releaseDate: "2022-11-28",
            description: "This control checks if Amazon ECS task definitions are configured to share a host's process namespace with its containers. This control fails if the task definition shares the host's process namespace with the containers running on it",
            resourceTypes: new Set(["AWS::ECS::TaskDefinition"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "HIGH"
        }, {
            identifier: "SH.ECS.4",
            name: "ECS containers should run as non-privileged",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon ECS"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-2(1)", "AC-3", "AC-3(15)", "AC-3(7)", "AC-5", "AC-6"]], ["PCI DSS version 3.2.1", ["7.1.1", "7.2.1", "7.2.2"]]]),
            controlObjectives: new Set(["Enforce least privilege"]),
            releaseDate: "2022-11-28",
            description: "This control checks if the privileged parameter in the container definition of Amazon ECS task definitions is set to 'true'. This control fails if this parameter is equal to 'true'.",
            resourceTypes: new Set(["AWS::ECS::TaskDefinition"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "HIGH"
        }, {
            identifier: "SH.ECS.5",
            name: "ECS containers should be limited to read-only access to root filesystems",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon ECS"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-2(1)", "AC-3", "AC-3(15)", "AC-3(7)", "AC-5", "AC-6"]], ["PCI DSS version 3.2.1", ["7.1.1", "7.2.1", "7.2.2"]]]),
            controlObjectives: new Set(["Enforce least privilege", "Protect configurations"]),
            releaseDate: "2022-11-28",
            description: "This control checks if ECS containers are limited to read-only access to mounted root filesystems. This control fails if the ReadonlyRootFilesystem parameter in the container definition of ECS task definitions is set to \u2018false\u2019.",
            resourceTypes: new Set(["AWS::ECS::TaskDefinition"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "HIGH"
        }, {
            identifier: "SH.ECS.8",
            name: "Secrets should not be passed as container environment variables",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon ECS"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CA-9(1)", "CM-2"]], ["PCI DSS version 3.2.1", ["8.2.1"]]]),
            controlObjectives: new Set(["Use strong authentication"]),
            releaseDate: "2022-11-28",
            description: "This control checks if the key value of any variables in the \u2018environment\u2019 parameter of container definitions includes - AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY,  or ECS_ENGINE_AUTH_DATA.",
            resourceTypes: new Set(["AWS::ECS::TaskDefinition"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "HIGH"
        }, {
            identifier: "CT.ELASTICFILESYSYSTEM.PR.1",
            name: "Require an Amazon EFS file system to encrypt file data at rest using AWS KMS",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon EFS"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CA-9(1)", "CM-3(6)", "SC-13", "SC-28", "SC-28(1)", "SC-7(10)", "SI-7(6)"]], ["PCI DSS version 3.2.1", ["3.4", "8.2.1"]]]),
            controlObjectives: new Set(["Encrypt data at rest"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether an Amazon EFS file system is configured to encrypt file data using AWS KMS.",
            resourceTypes: new Set(["AWS::EFS::FileSystem"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.ELASTICFILESYSYSTEM.PR.2",
            name: "Require an Amazon EFS volume to have an automated backup plan",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon EFS"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CP-10", "CP-6", "CP-6(1)", "CP-6(2)", "CP-9", "SC-5(2)", "SI-12", "SI-13(5)"]], ["PCI DSS version 3.2.1", ["3.1"]]]),
            controlObjectives: new Set(["Improve resiliency"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether your Amazon EFS file system has been configured with automatic backups through AWS Backup.",
            resourceTypes: new Set(["AWS::EFS::FileSystem"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.ELASTICFILESYSYSTEM.PR.3",
            name: "Require Amazon EFS access points to have a root directory",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon EFS"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-6(10)"]], ["PCI DSS version 3.2.1", ["7.1.1", "7.2.1", "7.2.2"]]]),
            controlObjectives: new Set(["Enforce least privilege"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether your Amazon EFS access points are configured to enforce a root directory.",
            resourceTypes: new Set(["AWS::EFS::AccessPoint"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.ELASTICFILESYSYSTEM.PR.4",
            name: "Require Amazon EFS access points to enforce a user identity",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon EFS"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-6(2)"]], ["PCI DSS version 3.2.1", ["7.1.1", "7.2.1", "7.2.2"]]]),
            controlObjectives: new Set(["Enforce least privilege"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether your Amazon EFS access points are configured to enforce a user identity.",
            resourceTypes: new Set(["AWS::EFS::AccessPoint"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.EFS.1",
            name: "Elastic File System should be configured to encrypt file data at-rest using AWS KMS",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon EFS"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CA-9(1)", "CM-3(6)", "SC-13", "SC-28", "SC-28(1)", "SC-7(10)", "SI-7(6)"]], ["PCI DSS version 3.2.1", ["3.4", "8.2.1"]]]),
            controlObjectives: new Set(["Encrypt data at rest"]),
            releaseDate: "2022-11-28",
            description: "This AWS control checks whether Amazon Elastic File System (Amazon EFS) is configured to encrypt the file data using AWS Key Management Service (AWS KMS). The check will fail if the encrypted key is set to false on DescribeFileSystems or if the KmsKeyId key on DescribeFileSystems does not match the KmsKeyId parameter.",
            resourceTypes: new Set(["AWS::EFS::FileSystem"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.EFS.2",
            name: "Amazon EFS volumes should be in backup plans",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon EFS"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CP-10", "CP-6", "CP-6(1)", "CP-6(2)", "CP-9", "SC-5(2)", "SI-12", "SI-13(5)"]], ["PCI DSS version 3.2.1", ["3.1"]]]),
            controlObjectives: new Set(["Improve resiliency"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether Amazon Elastic File System (Amazon EFS) file systems are added to the backup plans in AWS Backup. The control fails if EFS file systems are not included in the backup plans.",
            resourceTypes: new Set(["AWS::EFS::FileSystem"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.EFS.3",
            name: "EFS access points should enforce a root directory",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon EFS"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-6(10)"]], ["PCI DSS version 3.2.1", ["7.1.1", "7.2.1", "7.2.2"]]]),
            controlObjectives: new Set(["Enforce least privilege"]),
            releaseDate: "2022-11-28",
            description: "This control checks if Amazon Elastic File System (Amazon EFS) access points are configured to enforce a root directory. This control fails if the value of 'Path' is set to '/' (default root directory of the file system).",
            resourceTypes: new Set(["AWS::EFS::AccessPoint"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.EFS.4",
            name: "EFS access points should enforce a user identity",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon EFS"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-6(2)"]], ["PCI DSS version 3.2.1", ["7.1.1", "7.2.1", "7.2.2"]]]),
            controlObjectives: new Set(["Enforce least privilege"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether Amazon Elastic File System (Amazon EFS) access points are configured to enforce a user identity. This control fails if \u2018PosixUser\u2019 is not defined under \u2018configuration\u2019 or if parameters are provided and there is no match in the corresponding parameter.",
            resourceTypes: new Set(["AWS::EFS::AccessPoint"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "AWS-GR_EKS_ENDPOINT_NO_PUBLIC_ACCESS",
            name: "Detect whether an Amazon EKS endpoint is blocked from public access",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon EKS"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-21", "AC-3", "AC-3(7)", "AC-4", "AC-4(21)", "AC-6", "SC-7", "SC-7(11)", "SC-7(16)", "SC-7(20)", "SC-7(21)", "SC-7(3)", "SC-7(4)", "SC-7(9)"]], ["PCI DSS version 3.2.1", ["1.2.1", "1.3", "1.3.1", "1.3.2", "1.3.4", "1.3.6"]]]),
            controlObjectives: new Set(["Limit network access"]),
            releaseDate: "2021-12-01",
            description: "Detects whether an Amazon Elastic Kubernetes Service (Amazon EKS) endpoint is publicly accessible. The rule is NON_COMPLIANT if the endpoint is publicly accessible.\xa0",
            resourceTypes: new Set(["AWS::EKS::Cluster"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.EKS.PR.1",
            name: "Require an Amazon EKS cluster to be configured with public access disabled to the cluster Kubernetes API server endpoint.",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon EKS"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-21", "AC-3", "AC-3(7)", "AC-4", "AC-4(21)", "AC-6", "SC-7", "SC-7(11)", "SC-7(16)", "SC-7(20)", "SC-7(21)", "SC-7(3)", "SC-7(4)", "SC-7(9)"]], ["PCI DSS version 3.2.1", ["1.2.1", "1.3", "1.3.1", "1.3.2", "1.3.4", "1.3.6"]]]),
            controlObjectives: new Set(["Limit network access"]),
            releaseDate: "2023-07-24",
            description: "This control checks whether EKS cluster endpoints have public access disabled to the cluster Kubernetes API server endpoint.",
            resourceTypes: new Set(["AWS::EKS::Cluster"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.EKS.PR.2",
            name: "Require an Amazon EKS cluster to be configured with secret encryption using AWS Key Management Service (KMS) keys",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon EKS"]),
            frameworks: new Set([]),
            frameworksIds: new Map,
            controlObjectives: new Set(["Encrypt data at rest"]),
            releaseDate: "2023-06-30",
            description: "This control checks whether Amazon Elastic Kubernetes Service (Amazon EKS) clusters are configured to use Kubernetes secrets encrypted with AWS Key Management Service (KMS) keys.",
            resourceTypes: new Set(["AWS::EKS::Cluster"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.EKS.1",
            name: "EKS cluster endpoints should not be publicly accessible",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon EKS"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-21", "AC-3", "AC-3(7)", "AC-4", "AC-4(21)", "AC-6", "SC-7", "SC-7(11)", "SC-7(16)", "SC-7(20)", "SC-7(21)", "SC-7(3)", "SC-7(4)", "SC-7(9)"]], ["PCI DSS version 3.2.1", ["1.2.1", "1.3", "1.3.1", "1.3.2", "1.3.4", "1.3.6"]]]),
            controlObjectives: new Set(["Limit network access"]),
            releaseDate: "<UPDATE>",
            description: "This control checks whether an Amazon EKS cluster endpoint is publicly accessible. The control fails if an EKS cluster has an endpoint that is publicly accessible.",
            resourceTypes: new Set(["AWS::EKS::Cluster"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "HIGH"
        }, {
            identifier: "SH.EKS.2",
            name: "EKS clusters should run on a supported Kubernetes version",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon EKS"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CA-9(1)", "CM-2", "SI-2", "SI-2(2)", "SI-2(4)", "SI-2(5)"]], ["PCI DSS version 3.2.1", ["6.2"]]]),
            controlObjectives: new Set(["Manage vulnerabilities"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether an EKS cluster is running on a supported Kubernetes version. The control fails if the EKS cluster is running on an unsupported version.",
            resourceTypes: new Set(["AWS::EKS::Cluster"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "HIGH"
        }, {
            identifier: "CT.ELASTICACHE.PR.1",
            name: "Require an Amazon ElastiCache Redis cluster to have automatic backups activated",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon ElastiCache"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CP-10", "CP-6", "CP-6(1)", "CP-6(2)", "CP-9", "SC-5(2)", "SI-12", "SI-13(5)"]], ["PCI DSS version 3.2.1", ["3.1"]]]),
            controlObjectives: new Set(["Improve resiliency"]),
            releaseDate: "2023-07-24",
            description: "This control checks whether Amazon ElastiCache Redis clusters have automatic backups enabled.",
            resourceTypes: new Set(["AWS::ElastiCache::CacheCluster"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.ELASTICACHE.PR.2",
            name: "Require Amazon ElastiCache for Redis clusters to have automatic minor version upgrades activated",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon ElastiCache"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["SI-2", "SI-2(2)", "SI-2(4)", "SI-2(5)"]], ["PCI DSS version 3.2.1", ["6.2"]]]),
            controlObjectives: new Set(["Manage vulnerabilities"]),
            releaseDate: "2023-07-24",
            description: "This control checks whether Amazon ElastiCache for Redis clusters have automatic minor version upgrades enabled.",
            resourceTypes: new Set(["AWS::ElastiCache::CacheCluster"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "HIGH"
        }, {
            identifier: "CT.ELASTICACHE.PR.3",
            name: "Require an Amazon ElastiCache Redis replication group to have automatic failover activated",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon ElastiCache"]),
            frameworks: new Set(["NIST 800-53 Rev 5"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CP-10", "SC-36", "SC-5(2)", "SI-13(5)"]]]),
            controlObjectives: new Set(["Improve resiliency"]),
            releaseDate: "2023-07-24",
            description: "This control checks whether Amazon ElastiCache Redis replication groups have automatic failover enabled.",
            resourceTypes: new Set(["AWS::ElastiCache::ReplicationGroup"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.ELASTICACHE.PR.4",
            name: "Require an Amazon ElastiCache replication group to have encryption at rest activated",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon ElastiCache"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CA-9(1)", "CM-3(6)", "SC-13", "SC-28", "SC-28(1)", "SC-7(10)", "SI-7(6)"]], ["PCI DSS version 3.2.1", ["3.4", "8.2.1"]]]),
            controlObjectives: new Set(["Encrypt data at rest"]),
            releaseDate: "2023-07-24",
            description: "This control checks whether Amazon ElastiCache replication groups have encryption at rest enabled.",
            resourceTypes: new Set(["AWS::ElastiCache::ReplicationGroup"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.ELASTICACHE.PR.5",
            name: "Require an Amazon ElastiCache Redis replication group to have encryption-in-transit activated",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon ElastiCache"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-17(2)", "AC-4", "IA-5(1)", "SC-12(3)", "SC-13", "SC-23", "SC-23(3)", "SC-7(4)", "SC-8", "SC-8(1)", "SC-8(2)", "SI-7(6)"]], ["PCI DSS version 3.2.1", ["2.3", "4.1"]]]),
            controlObjectives: new Set(["Encrypt data in transit"]),
            releaseDate: "2023-07-24",
            description: "This control checks whether Amazon ElastiCache replication groups have encryption-in-transit enabled.",
            resourceTypes: new Set(["AWS::ElastiCache::ReplicationGroup"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.ELASTICACHE.PR.6",
            name: "Require an Amazon ElastiCache cache cluster to use a custom subnet group",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon ElastiCache"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-4", "AC-4(21)", "SC-7", "SC-7(11)", "SC-7(16)", "SC-7(21)", "SC-7(4)", "SC-7(5)"]], ["PCI DSS version 3.2.1", ["1.2.1", "1.3", "1.3.1", "1.3.2", "1.3.4", "1.3.6", "2.1", "2.2", "2.2.2"]]]),
            controlObjectives: new Set(["Limit network access"]),
            releaseDate: "2023-07-24",
            description: "This control checks whether Amazon ElastiCache cache clusters are configured with a custom subnet group.",
            resourceTypes: new Set(["AWS::ElastiCache::CacheCluster"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "HIGH"
        }, {
            identifier: "CT.ELASTICACHE.PR.7",
            name: "Require an Amazon ElastiCache replication group of earlier Redis versions to have Redis AUTH authentication activated",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon ElastiCache"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-2(1)", "AC-3", "AC-3(15)", "AC-3(7)", "AC-6"]], ["PCI DSS version 3.2.1", ["7.1.1", "7.2.1", "7.2.2"]]]),
            controlObjectives: new Set(["Enforce least privilege"]),
            releaseDate: "2023-07-24",
            description: "This control checks whether Amazon ElastiCache replication groups with an engine version earlier than 6.0 have Redis AUTH enabled.",
            resourceTypes: new Set(["AWS::ElastiCache::ReplicationGroup"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.ElastiCache.1",
            name: "ElastiCache Redis clusters should have automatic backup enabled",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon ElastiCache"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CP-10", "CP-6", "CP-6(1)", "CP-6(2)", "CP-9", "SC-5(2)", "SI-12", "SI-13(5)"]], ["PCI DSS version 3.2.1", ["3.1"]]]),
            controlObjectives: new Set(["Prepare for disaster recovery"]),
            releaseDate: "<UPDATE>",
            description: "This control evaluates if the Amazon ElastiCache for Redis clusters have automatic backup enabled. The control fails if the SnapshotRetentionLimit for the Redis cluster is less than 1.",
            resourceTypes: new Set(["AWS::ElastiCache::CacheCluster"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "HIGH"
        }, {
            identifier: "SH.ElastiCache.2",
            name: "ElastiCache for Redis cache clusters should have auto minor version upgrades enabled",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon ElastiCache"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["SI-2", "SI-2(2)", "SI-2(4)", "SI-2(5)"]], ["PCI DSS version 3.2.1", ["6.2"]]]),
            controlObjectives: new Set(["Manage vulnerabilities"]),
            releaseDate: "<UPDATE>",
            description: "This control evaluates whether auto minor version upgrades are enabled for ElastiCache for Redis cache clusters. This control fails if the ElastiCache for Redis cache cluster does not have auto minor version upgrades enabled.",
            resourceTypes: new Set(["AWS::ElastiCache::CacheCluster"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "HIGH"
        }, {
            identifier: "SH.ElastiCache.3",
            name: "ElastiCache replication groups should have automatic failover enabled",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon ElastiCache"]),
            frameworks: new Set(["NIST 800-53 Rev 5"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CP-10", "SC-36", "SC-5(2)", "SI-13(5)"]]]),
            controlObjectives: new Set(["Prepare for disaster recovery"]),
            releaseDate: "<UPDATE>",
            description: "This control checks if replication groups for Amazon ElastiCache for Redis have automatic failover enabled. This control fails if automatic failover is not enabled for a Redis replication group.",
            resourceTypes: new Set(["AWS::ElastiCache::ReplicationGroup"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.ElastiCache.4",
            name: "ElastiCache replication groups should have encryption-at-rest enabled",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon ElastiCache"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CA-9(1)", "CM-3(6)", "SC-13", "SC-28", "SC-28(1)", "SC-7(10)", "SI-7(6)"]], ["PCI DSS version 3.2.1", ["3.4", "8.2.1"]]]),
            controlObjectives: new Set(["Encrypt data at rest"]),
            releaseDate: "<UPDATE>",
            description: "This control checks whether ElastiCache replication groups have encryption-at-rest enabled. This control fails if encryption-at-rest is not enabled for a ElastiCache replication group.",
            resourceTypes: new Set(["AWS::ElastiCache::ReplicationGroup"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.ElastiCache.5",
            name: "ElastiCache replication groups should have encryption-in-transit enabled",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon ElastiCache"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-17(2)", "AC-4", "IA-5(1)", "SC-12(3)", "SC-13", "SC-23", "SC-23(3)", "SC-7(4)", "SC-8", "SC-8(1)", "SC-8(2)", "SI-7(6)"]], ["PCI DSS version 3.2.1", ["2.3", "4.1"]]]),
            controlObjectives: new Set(["Encrypt data in transit"]),
            releaseDate: "<UPDATE>",
            description: "This control checks whether ElastiCache replication groups have encryption-in-transit enabled. This control fails if encryption-in-transit is not enabled for a ElastiCache replication group.",
            resourceTypes: new Set(["AWS::ElastiCache::ReplicationGroup"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.ElastiCache.6",
            name: "ElastiCache replication groups of earlier Redis versions should have Redis AUTH enabled",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon ElastiCache"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-2(1)", "AC-3", "AC-3(15)", "AC-3(7)", "AC-6"]], ["PCI DSS version 3.2.1", ["7.1.1", "7.2.1", "7.2.2"]]]),
            controlObjectives: new Set(["Use strong authentication"]),
            releaseDate: "<UPDATE>",
            description: "This control checks if ElastiCache replication groups have Redis AUTH enabled. The control fails for an ElastiCache replication group if the Redis version of its nodes is below 6 and 'AuthToken' is not in use.",
            resourceTypes: new Set(["AWS::ElastiCache::ReplicationGroup"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.ElastiCache.7",
            name: "ElastiCache clusters should not use the default subnet group",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon ElastiCache"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-4", "AC-4(21)", "SC-7", "SC-7(11)", "SC-7(16)", "SC-7(21)", "SC-7(4)", "SC-7(5)"]], ["PCI DSS version 3.2.1", ["1.2.1", "1.3", "1.3.1", "1.3.2", "1.3.4", "1.3.6", "2.1", "2.2", "2.2.2"]]]),
            controlObjectives: new Set(["Limit network access"]),
            releaseDate: "<UPDATE>",
            description: "This control checks if ElastiCache clusters are configured with a custom subnet group. The control fails for an ElastiCache cluster if 'CacheSubnetGroupName' has the value 'default'.",
            resourceTypes: new Set(["AWS::ElastiCache::CacheCluster"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "HIGH"
        }, {
            identifier: "AWS-GR_EMR_MASTER_NO_PUBLIC_IP",
            name: "Detect whether any Amazon EMR cluster master nodes have public IP addresses",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon EMR"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-21", "AC-3", "AC-3(7)", "AC-4", "AC-4(21)", "AC-6", "SC-7", "SC-7(11)", "SC-7(16)", "SC-7(20)", "SC-7(21)", "SC-7(3)", "SC-7(4)", "SC-7(9)"]], ["PCI DSS version 3.2.1", ["1.2.1", "1.3", "1.3.1", "1.3.2", "1.3.4", "2.2.2"]]]),
            controlObjectives: new Set(["Limit network access"]),
            releaseDate: "2021-11-30",
            description: "Detects whether any Amazon Elastic MapReduce (EMR) cluster master nodes have public IP addresses. The rule is NON_COMPLIANT if a master node has a public IP. This guardrail checks clusters that are in RUNNING or WAITING state.",
            resourceTypes: new Set(["AWS::EMR::Cluster"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.EMR.PR.1",
            name: "Require an Amazon Elastic MapReduce (EMR) security configuration be configured to encrypt data at rest in Amazon S3",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon EMR"]),
            frameworks: new Set([]),
            frameworksIds: new Map,
            controlObjectives: new Set(["Encrypt data at rest"]),
            releaseDate: "2023-08-31",
            description: "This control checks whether an Amazon EMR security configuration is configured to encrypt EMR File System (EMRFS) objects at rest in Amazon S3.",
            resourceTypes: new Set(["AWS::EMR::SecurityConfiguration"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.EMR.PR.2",
            name: "Require an Amazon Elastic MapReduce (EMR) security configuration be configured to encrypt data at rest in Amazon S3 with an AWS KMS key",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon EMR"]),
            frameworks: new Set([]),
            frameworksIds: new Map,
            controlObjectives: new Set(["Encrypt data at rest"]),
            releaseDate: "2023-08-31",
            description: "This control checks whether an Amazon EMR security configuration is configured to encrypt EMR File System (EMRFS) objects at rest in Amazon S3 with an AWS KMS key.",
            resourceTypes: new Set(["AWS::EMR::SecurityConfiguration"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.EMR.PR.3",
            name: "Require an Amazon Elastic MapReduce (EMR) security configuration be configured with EBS volume local disk encryption using an AWS KMS key",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon EMR"]),
            frameworks: new Set([]),
            frameworksIds: new Map,
            controlObjectives: new Set(["Encrypt data at rest"]),
            releaseDate: "2023-08-31",
            description: "This control checks whether Amazon EMR security configurations are configured with local disk encryption enabled using EBS volume encryption and an AWS KMS key.",
            resourceTypes: new Set(["AWS::EMR::SecurityConfiguration"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.EMR.PR.4",
            name: "Require an Amazon Elastic MapReduce (EMR) security configuration be configured to encrypt data in transit",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon EMR"]),
            frameworks: new Set([]),
            frameworksIds: new Map,
            controlObjectives: new Set(["Encrypt data in transit"]),
            releaseDate: "2023-08-31",
            description: "This control checks whether an Amazon EMR security configuration is configured to require encryption in transit.",
            resourceTypes: new Set(["AWS::EMR::SecurityConfiguration"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.EMR.1",
            name: "Amazon Elastic MapReduce cluster master nodes should not have public IP addresses",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon EMR"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-21", "AC-3", "AC-3(7)", "AC-4", "AC-4(21)", "AC-6", "SC-7", "SC-7(11)", "SC-7(16)", "SC-7(20)", "SC-7(21)", "SC-7(3)", "SC-7(4)", "SC-7(9)"]], ["PCI DSS version 3.2.1", ["1.2.1", "1.3", "1.3.1", "1.3.2", "1.3.4", "2.2.2"]]]),
            controlObjectives: new Set(["Limit network access"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether master nodes on EMR clusters have public IP addresses.",
            resourceTypes: new Set(["AWS::EMR::Cluster"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "HIGH"
        }, {
            identifier: "AWS-GR_CLOUDWATCH_EVENTS_CHANGE_PROHIBITED",
            name: "Disallow changes to CloudWatch set up by Control Tower",
            behavior: "PREVENTIVE",
            implementationTypes: new Set(["Service control policy (SCP)"]),
            services: new Set(["Amazon EventBridge"]),
            frameworks: new Set(["CIS AWS Benchmark 1.4", "NIST 800-53 Rev 5"]),
            frameworksIds: new Map([["CIS AWS Benchmark 1.4", ["3.2"]], ["NIST 800-53 Rev 5", ["CM-2", "CM-2(2)", "CM-3", "CM-3(8)", "SA-8(19)"]]]),
            controlObjectives: new Set(["Protect configurations"]),
            releaseDate: "2019-04-24",
            description: "Protect the integrity of Amazon CloudWatch configuration set up by Control Tower to monitor your environment.",
            resourceTypes: new Set(["AWS::Events::Rule"]),
            controlOwner: "AWS Control Tower",
            guidance: "Mandatory",
            severity: "CRITICAL"
        }, {
            identifier: "CT.GUARDDUTY.PR.1",
            name: "Require an Amazon GuardDuty Detector to have Amazon S3 protection",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon GuardDuty"]),
            frameworks: new Set(["NIST 800-53 Rev 5"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-2(12)", "AU-6(1)", "AU-6(5)", "CA-7", "RA-3(4)", "SC-7(10)", "SI-4", "SI-4(13)", "SI-4(2)", "SI-4(4)"]]]),
            controlObjectives: new Set(["Protect configurations", "Prepare for incident response"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether Amazon S3 protection is enabled on an Amazon GuardDuty Detector.",
            resourceTypes: new Set(["AWS::GuardDuty::Detector"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "HIGH"
        }, {
            identifier: "SH.GuardDuty.1",
            name: "GuardDuty should be enabled",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon GuardDuty"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-2(12)", "AU-6(1)", "AU-6(5)", "CA-7", "CM-8(3)", "RA-3(4)", "SA-11(1)", "SA-11(6)", "SA-15(2)", "SA-15(8)", "SA-8(19)", "SA-8(21)", "SA-8(25)", "SC-5", "SC-5(1)", "SC-5(3)", "SI-20", "SI-3(8)", "SI-4", "SI-4(1)", "SI-4(13)", "SI-4(2)", "SI-4(22)", "SI-4(25)", "SI-4(4)", "SI-4(5)"]], ["PCI DSS version 3.2.1", ["11.4"]]]),
            controlObjectives: new Set(["Prepare for incident response"]),
            releaseDate: "2022-11-28",
            description: "This AWS control checks whether Amazon GuardDuty is enabled in your AWS account and region.",
            resourceTypes: new Set(["AWS::::Account"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "HIGH"
        }, {
            identifier: "CT.KINESIS.PR.1",
            name: "Require any Amazon Kinesis data stream to have encryption at rest",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon Kinesis"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CA-9(1)", "CM-3(6)", "SC-13", "SC-28", "SC-28(1)", "SC-7(10)", "SI-7(6)"]], ["PCI DSS version 3.2.1", ["3.4"]]]),
            controlObjectives: new Set(["Encrypt data at rest"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether Amazon Kinesis data streams are encrypted at rest with server-side encryption.",
            resourceTypes: new Set(["AWS::Kinesis::Stream"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.Kinesis.1",
            name: "Kinesis streams should be encrypted at rest",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon Kinesis"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CA-9(1)", "CM-3(6)", "SC-13", "SC-28", "SC-28(1)", "SC-7(10)", "SI-7(6)"]], ["PCI DSS version 3.2.1", ["3.4"]]]),
            controlObjectives: new Set(["Encrypt data at rest"]),
            releaseDate: "2022-11-28",
            description: "This control checks if Kinesis streams are encrypted at rest with server-side encryption. This control fails if a Kinesis stream is not encrypted at rest with server-side encryption.",
            resourceTypes: new Set(["AWS::Kinesis::Stream"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "INTERNAL.CT.MQ.PR.RBLJQ",
            name: "Require an Amazon MQ broker to not be publicly accessible",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon MQ"]),
            frameworks: new Set([]),
            frameworksIds: new Map,
            controlObjectives: new Set(["Limit network access"]),
            releaseDate: "2023-03-31",
            description: "This control checks whether Amazon MQ brokers are configured to not allow connections from applications outside of the VPC that hosts the broker's subnets, by way of the 'PubliclyAccessible' property.",
            resourceTypes: new Set(["AWS::AmazonMQ::Broker"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "CRITICAL"
        }, {
            identifier: "CT.NEPTUNE.PR.1",
            name: "Require an Neptune DB clusters to have AWS Identity and Access Management (IAM) database authentication enabled",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon Neptune"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-2(1)", "AC-3", "AC-3(15)", "AC-3(7)", "AC-6"]], ["PCI DSS version 3.2.1", ["7.1.1", "7.2.1", "7.2.2", "8.7"]]]),
            controlObjectives: new Set(["Enforce least privilege", "Use strong authentication"]),
            releaseDate: "2023-07-24",
            description: "This control checks whether Amazon Neptune clusters have AWS Identity and Access Management (IAM) database authentication enabled.",
            resourceTypes: new Set(["AWS::Neptune::DBCluster"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "HIGH"
        }, {
            identifier: "CT.NEPTUNE.PR.2",
            name: "Require Neptune DB clusters to have deletion protection enabled",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon Neptune"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CM-3", "SC-5(2)"]], ["PCI DSS version 3.2.1", ["2.2"]]]),
            controlObjectives: new Set(["Improve availability", "Protect configurations"]),
            releaseDate: "2023-07-24",
            description: "This control checks whether Neptune clusters have deletion protection enabled.",
            resourceTypes: new Set(["AWS::Neptune::DBCluster"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.NEPTUNE.PR.3",
            name: "Require Amazon Neptune DB clusters to have storage encryption enabled",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon Neptune"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CA-9(1)", "CM-3(6)", "SC-13", "SC-28", "SC-28(1)", "SC-7(10)", "SI-7(6)"]], ["PCI DSS version 3.2.1", ["3.4", "8.2.1"]]]),
            controlObjectives: new Set(["Encrypt data at rest"]),
            releaseDate: "2023-07-24",
            description: "This control checks whether Amazon Neptune clusters have storage encryption enabled.",
            resourceTypes: new Set(["AWS::Neptune::DBCluster"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.NEPTUNE.PR.4",
            name: "Require an Amazon Neptune DB cluster to have Amazon CloudWatch Log Export enabled for audit logs",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon Neptune"]),
            frameworks: new Set([]),
            frameworksIds: new Map,
            controlObjectives: new Set(["Establish logging and monitoring"]),
            releaseDate: "2023-07-31",
            description: "This control checks whether an Amazon Neptune cluster has been configured to send audit logs to Amazon CloudWatch Logs.",
            resourceTypes: new Set(["AWS::Neptune::DBCluster"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.NEPTUNE.PR.5",
            name: "Require an Amazon Neptune DB cluster to have a backup retention period greater than or equal to seven days",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon Neptune"]),
            frameworks: new Set([]),
            frameworksIds: new Map,
            controlObjectives: new Set(["Improve resiliency"]),
            releaseDate: "2023-08-31",
            description: "This control checks whether Amazon Neptune DB clusters have automatic backups configured with a retention period set to 7 or more days (>=7). The default retention period is one day.",
            resourceTypes: new Set(["AWS::Neptune::DBCluster"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.Neptune.1",
            name: "Neptune DB clusters should be encrypted at rest",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon Neptune"]),
            frameworks: new Set([]),
            frameworksIds: new Map,
            controlObjectives: new Set(["Encrypt data at rest"]),
            releaseDate: "<UPDATE>",
            description: "This control checks whether a Neptune DB cluster is encrypted at rest. The control fails if a Neptune DB cluster isn't encrypted at rest.",
            resourceTypes: new Set(["AWS::RDS::DBCluster"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.Neptune.2",
            name: "Neptune DB clusters should publish audit logs to CloudWatch Logs",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon Neptune"]),
            frameworks: new Set([]),
            frameworksIds: new Map,
            controlObjectives: new Set(["Establish logging and monitoring"]),
            releaseDate: "<UPDATE>",
            description: "This control checks whether a Neptune DB cluster publishes audit logs to Amazon CloudWatch Logs. The control fails if a Neptune DB cluster doesn't publish audit logs to CloudWatch Logs. `EnableCloudWatchLogsExport` should be set to Audit.",
            resourceTypes: new Set(["AWS::RDS::DBCluster"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.Neptune.3",
            name: "Neptune DB cluster snapshots should not be public",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon Neptune"]),
            frameworks: new Set([]),
            frameworksIds: new Map,
            controlObjectives: new Set(["Enforce least privilege"]),
            releaseDate: "<UPDATE>",
            description: "This control checks whether a Neptune manual DB cluster snapshot is public. The control fails if a Neptune manual DB cluster snapshot is public.",
            resourceTypes: new Set(["AWS::RDS::DBClusterSnapshot"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "CRITICAL"
        }, {
            identifier: "SH.Neptune.4",
            name: "Neptune DB clusters should have deletion protection enabled",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon Neptune"]),
            frameworks: new Set([]),
            frameworksIds: new Map,
            controlObjectives: new Set(["Improve availability", "Protect configurations"]),
            releaseDate: "<UPDATE>",
            description: "This control checks if a Neptune DB cluster has deletion protection enabled. The control fails if a Neptune DB cluster doesn't have deletion protection enabled.",
            resourceTypes: new Set(["AWS::RDS::DBCluster"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "LOW"
        }, {
            identifier: "SH.Neptune.5",
            name: "Neptune DB clusters should have automated backups enabled",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon Neptune"]),
            frameworks: new Set([]),
            frameworksIds: new Map,
            controlObjectives: new Set(["Improve resiliency"]),
            releaseDate: "<UPDATE>",
            description: "This control checks whether a Neptune DB cluster has automated backups enabled, and a backup retention period greater than or equal to 7 days. The control fails if backups aren't enabled for the Neptune DB cluster, or if the retention period is less than 7 days.",
            resourceTypes: new Set(["AWS::RDS::DBCluster"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.Neptune.6",
            name: "Neptune DB cluster snapshots should be encrypted at rest",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon Neptune"]),
            frameworks: new Set([]),
            frameworksIds: new Map,
            controlObjectives: new Set(["Encrypt data at rest"]),
            releaseDate: "<UPDATE>",
            description: "This control checks whether a Neptune DB cluster snapshot is encrypted at rest. The control fails if a Neptune DB cluster isn't encrypted at rest.",
            resourceTypes: new Set(["AWS::RDS::DBClusterSnapshot"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.Neptune.7",
            name: "Neptune DB clusters should have IAM database authentication enabled",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon Neptune"]),
            frameworks: new Set([]),
            frameworksIds: new Map,
            controlObjectives: new Set(["Use strong authentication"]),
            releaseDate: "<UPDATE>",
            description: "This control checks if a Neptune DB cluster has IAM database authentication enabled. The control fails if IAM database authentication isn't enabled for a Neptune DB cluster.",
            resourceTypes: new Set(["AWS::RDS::DBCluster"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.Neptune.8",
            name: "Neptune DB clusters should be configured to copy tags to snapshots",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon Neptune"]),
            frameworks: new Set([]),
            frameworksIds: new Map,
            controlObjectives: new Set(["Protect configurations"]),
            releaseDate: "<UPDATE>",
            description: "This control checks if a Neptune DB cluster is configured to copy tags to snapshots when the snapshots are created. The control fails if a Neptune DB cluster isn't configured to copy tags to snapshots.",
            resourceTypes: new Set(["AWS::RDS::DBCluster"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "LOW"
        }, {
            identifier: "AWS-GR_ELASTICSEARCH_IN_VPC_ONLY",
            name: "Detect whether an Amazon OpenSearch Service domain is in Amazon VPC",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon OpenSearch Service"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-21", "AC-3", "AC-3(7)", "AC-4", "AC-4(21)", "AC-6", "SC-7", "SC-7(11)", "SC-7(16)", "SC-7(20)", "SC-7(21)", "SC-7(3)", "SC-7(4)", "SC-7(9)"]], ["PCI DSS version 3.2.1", ["1.2.1", "1.3", "1.3.1", "1.3.2", "1.3.4", "1.3.6"]]]),
            controlObjectives: new Set(["Limit network access"]),
            releaseDate: "2021-11-30",
            description: "Detects whether Amazon OpenSearch Service domains are in Amazon Virtual Private Cloud (Amazon VPC). The rule is NON_COMPLIANT if the OpenSearch Service domain endpoint is public.",
            resourceTypes: new Set(["AWS::Elasticsearch::Domain"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.OPENSEARCH.PR.1",
            name: "Require an Amazon Elasticsearch Service domain to encrypt data at rest",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon OpenSearch Service"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CA-9(1)", "CM-3(6)", "SC-13", "SC-28", "SC-28(1)", "SC-7(10)", "SI-7(6)"]], ["PCI DSS version 3.2.1", ["3.4", "8.2.1"]]]),
            controlObjectives: new Set(["Encrypt data at rest"]),
            releaseDate: "2023-05-19",
            description: "This control checks whether Amazon Elasticsearch Service domains have encryption at rest enabled.",
            resourceTypes: new Set(["AWS::Elasticsearch::Domain"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.OPENSEARCH.PR.10",
            name: "Require an Amazon OpenSearch Service domain to be created in a user specified Amazon VPC",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon OpenSearch Service"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-21", "AC-3", "AC-3(7)", "AC-4", "AC-4(21)", "AC-6", "SC-7", "SC-7(11)", "SC-7(16)", "SC-7(20)", "SC-7(21)", "SC-7(3)", "SC-7(4)", "SC-7(9)"]], ["PCI DSS version 3.2.1", ["1.2.1", "1.3", "1.3.1", "1.3.2", "1.3.4", "1.3.6"]]]),
            controlObjectives: new Set(["Limit network access"]),
            releaseDate: "2023-05-19",
            description: "This control checks whether Amazon OpenSearch Service domains are configured with VPC option settings that specify a target Amazon VPC.",
            resourceTypes: new Set(["AWS::OpenSearchService::Domain"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "CRITICAL"
        }, {
            identifier: "CT.OPENSEARCH.PR.11",
            name: "Require an Amazon OpenSearch Service domain to encrypt data sent between nodes",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon OpenSearch Service"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-4", "SC-13", "SC-23", "SC-23(3)", "SC-7(4)", "SC-8", "SC-8(1)", "SC-8(2)"]], ["PCI DSS version 3.2.1", ["4.1"]]]),
            controlObjectives: new Set(["Encrypt data in transit"]),
            releaseDate: "2023-05-19",
            description: "This control checks whether Amazon OpenSearch Service domains have node-to-node encryption enabled.",
            resourceTypes: new Set(["AWS::OpenSearchService::Domain"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.OPENSEARCH.PR.12",
            name: "Require an Amazon OpenSearch Service domain to send error logs to Amazon CloudWatch Logs",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon OpenSearch Service"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-2(4)", "AC-4(26)", "AC-6(9)", "AU-10", "AU-12", "AU-2", "AU-3", "AU-6(3)", "AU-6(4)", "CA-7", "SC-7(9)", "SI-3(8)", "SI-4(20)", "SI-7(8)"]], ["PCI DSS version 3.2.1", ["10.1", "10.2.1", "10.2.2", "10.2.3", "10.2.4", "10.2.5", "10.2.7", "10.3.1", "10.3.2", "10.3.3", "10.3.4", "10.3.5", "10.3.6"]]]),
            controlObjectives: new Set(["Establish logging and monitoring"]),
            releaseDate: "2023-05-19",
            description: "This control checks whether Amazon OpenSearch Service domains are configured to send error logs to Amazon CloudWatch Logs.",
            resourceTypes: new Set(["AWS::OpenSearchService::Domain"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.OPENSEARCH.PR.13",
            name: "Require an Amazon OpenSearch Service domain to send audit logs to Amazon CloudWatch Logs",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon OpenSearch Service"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-2(4)", "AC-4(26)", "AC-6(9)", "AU-10", "AU-12", "AU-2", "AU-3", "AU-6(3)", "AU-6(4)", "CA-7", "SC-7(9)", "SI-3(8)", "SI-4(20)", "SI-7(8)"]], ["PCI DSS version 3.2.1", ["10.1", "10.2.1", "10.2.2", "10.2.3", "10.2.4", "10.2.5", "10.2.7", "10.3.1", "10.3.2", "10.3.3", "10.3.4", "10.3.5", "10.3.6"]]]),
            controlObjectives: new Set(["Establish logging and monitoring"]),
            releaseDate: "2023-05-19",
            description: "This control checks whether Amazon OpenSearch Service domains are configured to send audit logs to Amazon CloudWatch Logs.",
            resourceTypes: new Set(["AWS::OpenSearchService::Domain"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.OPENSEARCH.PR.14",
            name: "Require an Amazon OpenSearch Service domain to have zone awareness and at least three data nodes",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon OpenSearch Service"]),
            frameworks: new Set(["NIST 800-53 Rev 5"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CP-10", "CP-6(2)", "SC-36", "SC-5(2)", "SI-13(5)"]]]),
            controlObjectives: new Set(["Improve availability"]),
            releaseDate: "2023-05-19",
            description: "This control checks whether Amazon OpenSearch Service domains are configured with at least three data nodes and zone awareness enabled.",
            resourceTypes: new Set(["AWS::OpenSearchService::Domain"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.OPENSEARCH.PR.15",
            name: "Require an Amazon OpenSearch Service domain to use fine grained access control",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon OpenSearch Service"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-2(1)", "AC-3", "AC-3(15)", "AC-3(7)", "AC-5", "AC-6"]], ["PCI DSS version 3.2.1", ["7.1.1", "7.2.1", "7.2.2"]]]),
            controlObjectives: new Set(["Enforce least privilege"]),
            releaseDate: "2023-05-19",
            description: "This control checks whether Amazon OpenSearch Service domains have fine-grained access control enabled.",
            resourceTypes: new Set(["AWS::OpenSearchService::Domain"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "HIGH"
        }, {
            identifier: "CT.OPENSEARCH.PR.16",
            name: "Require an Amazon OpenSearch Service domain to use TLSv1.2",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon OpenSearch Service"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-17(2)", "AC-4", "IA-5(1)", "SC-12(3)", "SC-13", "SC-23", "SC-23(3)", "SC-7(4)", "SC-8", "SC-8(1)", "SC-8(2)", "SI-7(6)"]], ["PCI DSS version 3.2.1", ["2.3", "4.1"]]]),
            controlObjectives: new Set(["Encrypt data in transit"]),
            releaseDate: "2023-05-19",
            description: "This control checks whether Amazon OpenSearch Service domains are configured to require HTTPS with a minimum TLS version of TLSv1.2.",
            resourceTypes: new Set(["AWS::OpenSearchService::Domain"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.OPENSEARCH.PR.2",
            name: "Require an Amazon Elasticsearch Service domain to be created in a user specified Amazon VPC",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon OpenSearch Service"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-21", "AC-3", "AC-3(7)", "AC-4", "AC-4(21)", "AC-6", "SC-7", "SC-7(11)", "SC-7(16)", "SC-7(20)", "SC-7(21)", "SC-7(3)", "SC-7(4)", "SC-7(9)"]], ["PCI DSS version 3.2.1", ["1.2.1", "1.3", "1.3.1", "1.3.2", "1.3.4", "1.3.6"]]]),
            controlObjectives: new Set(["Limit network access"]),
            releaseDate: "2023-05-19",
            description: "This control checks whether Amazon Elasticsearch Service domains are configured with VPC option settings that specify a target Amazon VPC.",
            resourceTypes: new Set(["AWS::Elasticsearch::Domain"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "CRITICAL"
        }, {
            identifier: "CT.OPENSEARCH.PR.3",
            name: "Require an Amazon Elasticsearch Service domain to encrypt data sent between nodes",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon OpenSearch Service"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-4", "SC-13", "SC-23", "SC-23(3)", "SC-7(4)", "SC-8", "SC-8(1)", "SC-8(2)"]], ["PCI DSS version 3.2.1", ["4.1"]]]),
            controlObjectives: new Set(["Encrypt data in transit"]),
            releaseDate: "2023-05-19",
            description: "This control checks whether Amazon Elasticsearch Service domains have node-to-node encryption enabled.",
            resourceTypes: new Set(["AWS::Elasticsearch::Domain"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.OPENSEARCH.PR.4",
            name: "Require an Amazon Elasticsearch Service domain to send error logs to Amazon CloudWatch Logs",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon OpenSearch Service"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-2(4)", "AC-4(26)", "AC-6(9)", "AU-10", "AU-12", "AU-2", "AU-3", "AU-6(3)", "AU-6(4)", "CA-7", "SC-7(9)", "SI-3(8)", "SI-4(20)", "SI-7(8)"]], ["PCI DSS version 3.2.1", ["10.1", "10.2.1", "10.2.2", "10.2.3", "10.2.4", "10.2.5", "10.2.7", "10.3.1", "10.3.2", "10.3.3", "10.3.4", "10.3.5", "10.3.6"]]]),
            controlObjectives: new Set(["Establish logging and monitoring"]),
            releaseDate: "2023-05-19",
            description: "This control checks whether Amazon Elasticsearch Service domains are configured to send error logs to Amazon CloudWatch Logs.",
            resourceTypes: new Set(["AWS::Elasticsearch::Domain"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.OPENSEARCH.PR.5",
            name: "Require an Amazon Elasticsearch Service domain to send audit logs to Amazon CloudWatch Logs",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon OpenSearch Service"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-2(4)", "AC-4(26)", "AC-6(9)", "AU-10", "AU-12", "AU-2", "AU-3", "AU-6(3)", "AU-6(4)", "CA-7", "SC-7(9)", "SI-3(8)", "SI-4(20)", "SI-7(8)"]], ["PCI DSS version 3.2.1", ["10.1", "10.2.1", "10.2.2", "10.2.3", "10.2.4", "10.2.5", "10.2.7", "10.3.1", "10.3.2", "10.3.3", "10.3.4", "10.3.5", "10.3.6"]]]),
            controlObjectives: new Set(["Establish logging and monitoring"]),
            releaseDate: "2023-05-19",
            description: "This control checks whether Amazon Elasticsearch Service domains are configured to send audit logs to Amazon CloudWatch Logs.",
            resourceTypes: new Set(["AWS::Elasticsearch::Domain"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.OPENSEARCH.PR.6",
            name: "Require an Amazon Elasticsearch domain to have zone awareness and at least three data nodes",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon OpenSearch Service"]),
            frameworks: new Set(["NIST 800-53 Rev 5"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CP-10", "CP-6(2)", "SC-36", "SC-5(2)", "SI-13(5)"]]]),
            controlObjectives: new Set(["Improve availability"]),
            releaseDate: "2023-05-19",
            description: "This control checks whether Amazon ElasticSearch domains are configured with at least three data nodes and zone awareness enabled.",
            resourceTypes: new Set(["AWS::Elasticsearch::Domain"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.OPENSEARCH.PR.7",
            name: "Require an Amazon Elasticsearch domain to have at least three dedicated primary nodes",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon OpenSearch Service"]),
            frameworks: new Set(["NIST 800-53 Rev 5"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CP-10", "CP-6(2)", "SC-36", "SC-5(2)", "SI-13(5)"]]]),
            controlObjectives: new Set(["Improve availability"]),
            releaseDate: "2023-05-19",
            description: "This control checks whether Amazon Elasticsearch domains are configured with at least three dedicated primary nodes.",
            resourceTypes: new Set(["AWS::Elasticsearch::Domain"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.OPENSEARCH.PR.8",
            name: "Require an Amazon Elasticsearch Service domain to use TLSv1.2",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon OpenSearch Service"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-17(2)", "AC-4", "IA-5(1)", "SC-12(3)", "SC-13", "SC-23", "SC-23(3)", "SC-7(4)", "SC-8", "SC-8(1)", "SC-8(2)", "SI-7(6)"]], ["PCI DSS version 3.2.1", ["2.3", "4.1"]]]),
            controlObjectives: new Set(["Encrypt data in transit"]),
            releaseDate: "2023-05-19",
            description: "This control checks whether Amazon Elasticsearch Service domains are configured to require HTTPS with a minimum TLS version of TLSv1.2.",
            resourceTypes: new Set(["AWS::Elasticsearch::Domain"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.OPENSEARCH.PR.9",
            name: "Require an Amazon OpenSearch Service domain to encrypt data at rest",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon OpenSearch Service"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CA-9(1)", "CM-3(6)", "SC-13", "SC-28", "SC-28(1)", "SI-7(6)"]], ["PCI DSS version 3.2.1", ["3.4", "8.2.1"]]]),
            controlObjectives: new Set(["Encrypt data at rest"]),
            releaseDate: "2023-05-19",
            description: "This control checks whether Amazon OpenSearch Service domains have encryption at rest enabled.",
            resourceTypes: new Set(["AWS::OpenSearchService::Domain"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.ES.1",
            name: "Elasticsearch domains should have encryption at-rest enabled",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon OpenSearch Service"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CA-9(1)", "CM-3(6)", "SC-13", "SC-28", "SC-28(1)", "SC-7(10)", "SI-7(6)"]], ["PCI DSS version 3.2.1", ["3.4", "8.2.1"]]]),
            controlObjectives: new Set(["Encrypt data at rest"]),
            releaseDate: "2022-11-28",
            description: "This AWS control checks whether Elasticsearch domains have encryption at rest configuration enabled. This check fails if the EncryptionAtRestOptions field is not enabled.",
            resourceTypes: new Set(["AWS::Elasticsearch::Domain"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.ES.2",
            name: "Elasticsearch domains should be in a VPC",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon OpenSearch Service"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-21", "AC-3", "AC-3(7)", "AC-4", "AC-4(21)", "AC-6", "SC-7", "SC-7(11)", "SC-7(16)", "SC-7(20)", "SC-7(21)", "SC-7(3)", "SC-7(4)", "SC-7(9)"]], ["PCI DSS version 3.2.1", ["1.2.1", "1.3", "1.3.1", "1.3.2", "1.3.4", "1.3.6"]]]),
            controlObjectives: new Set(["Limit network access"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether Elasticsearch domains are in a VPC. It does not evaluate the VPC subnet routing configuration to determine public reachability. This AWS control also does not check whether the Amazon OpenSearch Service resource-based policy permits public access by other accounts or external entities. You should ensure that Elasticsearch domains are not attached to public subnets. See Resource-based policies (https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-ac.html#es-ac-types-resource) in the Amazon OpenSearch Service (successor to Amazon Elasticsearch Service) Developer Guide. You should also ensure that your VPC is configured according to the recommended best practices. See Security best practices for your VPC (https://docs.aws.amazon.com/vpc/latest/userguide/vpc-security-best-practices.html) in the Amazon VPC User Guide.",
            resourceTypes: new Set(["AWS::Elasticsearch::Domain"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "CRITICAL"
        }, {
            identifier: "SH.ES.3",
            name: "Elasticsearch domains should encrypt data sent between nodes",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon OpenSearch Service"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-4", "SC-13", "SC-23", "SC-23(3)", "SC-7(4)", "SC-8", "SC-8(1)", "SC-8(2)"]], ["PCI DSS version 3.2.1", ["4.1"]]]),
            controlObjectives: new Set(["Encrypt data in transit"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether Elasticsearch domains have node-to-node encryption enabled.",
            resourceTypes: new Set(["AWS::Elasticsearch::Domain"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.ES.4",
            name: "Elasticsearch domain error logging to CloudWatch Logs should be enabled",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon OpenSearch Service"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-2(4)", "AC-4(26)", "AC-6(9)", "AU-10", "AU-12", "AU-2", "AU-3", "AU-6(3)", "AU-6(4)", "CA-7", "SC-7(9)", "SI-3(8)", "SI-4(20)", "SI-7(8)"]], ["PCI DSS version 3.2.1", ["10.1", "10.2.1", "10.2.2", "10.2.3", "10.2.4", "10.2.5", "10.2.7", "10.3.1", "10.3.2", "10.3.3", "10.3.4", "10.3.5", "10.3.6"]]]),
            controlObjectives: new Set(["Establish logging and monitoring"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether Elasticsearch domains are configured to send error logs to CloudWatch Logs.",
            resourceTypes: new Set(["AWS::Elasticsearch::Domain"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.ES.5",
            name: "Elasticsearch domains should have audit logging enabled",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon OpenSearch Service"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-2(4)", "AC-4(26)", "AC-6(9)", "AU-10", "AU-12", "AU-2", "AU-3", "AU-6(3)", "AU-6(4)", "CA-7", "SC-7(9)", "SI-3(8)", "SI-4(20)", "SI-7(8)"]], ["PCI DSS version 3.2.1", ["10.1", "10.2.1", "10.2.2", "10.2.3", "10.2.4", "10.2.5", "10.2.7", "10.3.1", "10.3.2", "10.3.3", "10.3.4", "10.3.5", "10.3.6"]]]),
            controlObjectives: new Set(["Establish logging and monitoring"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether Elasticsearch domains have audit logging enabled. This control fails if an Elasticsearch domain does not have audit logging enabled.",
            resourceTypes: new Set(["AWS::Elasticsearch::Domain"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.ES.6",
            name: "Elasticsearch domains should have at least three data nodes",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon OpenSearch Service"]),
            frameworks: new Set(["NIST 800-53 Rev 5"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CP-10", "CP-6(2)", "SC-36", "SC-5(2)", "SI-13(5)"]]]),
            controlObjectives: new Set(["Improve availability"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether Elasticsearch domains are configured with at least three data nodes and zoneAwarenessEnabled is true.",
            resourceTypes: new Set(["AWS::Elasticsearch::Domain"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.ES.7",
            name: "Elasticsearch domains should be configured with at least three dedicated master nodes",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon OpenSearch Service"]),
            frameworks: new Set(["NIST 800-53 Rev 5"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CP-10", "CP-6(2)", "SC-36", "SC-5(2)", "SI-13(5)"]]]),
            controlObjectives: new Set(["Improve availability"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether Elasticsearch domains are configured with at least three dedicated master nodes. This control fails if dedicatedMasterEnabled is not true.",
            resourceTypes: new Set(["AWS::Elasticsearch::Domain"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.ES.8",
            name: "Connections to Elasticsearch domains should be encrypted using TLS 1.2",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon OpenSearch Service"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-17(2)", "AC-4", "IA-5(1)", "SC-12(3)", "SC-13", "SC-23", "SC-23(3)", "SC-7(4)", "SC-8", "SC-8(1)", "SC-8(2)", "SI-7(6)"]], ["PCI DSS version 3.2.1", ["2.3", "4.1"]]]),
            controlObjectives: new Set(["Encrypt data in transit"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether connections to Elasticsearch domains are required to use TLS 1.2.  The check fails if the Elasticsearch domain TLSSecurityPolicy is not Policy-Min-TLS-1-2-2019-07.",
            resourceTypes: new Set(["AWS::Elasticsearch::Domain"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.Opensearch.1",
            name: "OpenSearch domains should have encryption at rest enabled",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon OpenSearch Service"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CA-9(1)", "CM-3(6)", "SC-13", "SC-28", "SC-28(1)", "SI-7(6)"]], ["PCI DSS version 3.2.1", ["3.4", "8.2.1"]]]),
            controlObjectives: new Set(["Encrypt data at rest"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether Amazon OpenSearch domains have encryption-at-rest configuration enabled. The check fails if encryption at rest is not enabled.",
            resourceTypes: new Set(["AWS::OpenSearch::Domain"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.Opensearch.2",
            name: "OpenSearch domains should be in a VPC",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon OpenSearch Service"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-21", "AC-3", "AC-3(7)", "AC-4", "AC-4(21)", "AC-6", "SC-7", "SC-7(11)", "SC-7(16)", "SC-7(20)", "SC-7(21)", "SC-7(3)", "SC-7(4)", "SC-7(9)"]], ["PCI DSS version 3.2.1", ["1.2.1", "1.3", "1.3.1", "1.3.2", "1.3.4", "1.3.6"]]]),
            controlObjectives: new Set(["Limit network access"]),
            releaseDate: "2022-11-28",
            description: "This control checks Amazon OpenSearch Service domains are in an Amazon Virtual Private Cloud (VPC).",
            resourceTypes: new Set(["AWS::OpenSearch::Domain"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "CRITICAL"
        }, {
            identifier: "SH.Opensearch.3",
            name: "OpenSearch domains should encrypt data sent between nodes",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon OpenSearch Service"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-4", "SC-13", "SC-23", "SC-23(3)", "SC-7(4)", "SC-8", "SC-8(1)", "SC-8(2)"]], ["PCI DSS version 3.2.1", ["4.1"]]]),
            controlObjectives: new Set(["Encrypt data in transit"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether Amazon OpenSearch domains have node-to-node encryption enabled. This control fails if node-to-node encryption is disabled on the domain.",
            resourceTypes: new Set(["AWS::OpenSearch::Domain"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.Opensearch.4",
            name: "OpenSearch domain error logging to CloudWatch Logs should be enabled",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon OpenSearch Service"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-2(4)", "AC-4(26)", "AC-6(9)", "AU-10", "AU-12", "AU-2", "AU-3", "AU-6(3)", "AU-6(4)", "CA-7", "SC-7(9)", "SI-3(8)", "SI-4(20)", "SI-7(8)"]], ["PCI DSS version 3.2.1", ["10.1", "10.2.1", "10.2.2", "10.2.3", "10.2.4", "10.2.5", "10.2.7", "10.3.1", "10.3.2", "10.3.3", "10.3.4", "10.3.5", "10.3.6"]]]),
            controlObjectives: new Set(["Establish logging and monitoring"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether Amazon OpenSearch domains are configured to send error logs to CloudWatch Logs. This control fails if error logging to CloudWatch is not enabled for a domain.",
            resourceTypes: new Set(["AWS::OpenSearch::Domain"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.Opensearch.5",
            name: "OpenSearch domains should have audit logging enabled",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon OpenSearch Service"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-2(4)", "AC-4(26)", "AC-6(9)", "AU-10", "AU-12", "AU-2", "AU-3", "AU-6(3)", "AU-6(4)", "CA-7", "SC-7(9)", "SI-3(8)", "SI-4(20)", "SI-7(8)"]], ["PCI DSS version 3.2.1", ["10.1", "10.2.1", "10.2.2", "10.2.3", "10.2.4", "10.2.5", "10.2.7", "10.3.1", "10.3.2", "10.3.3", "10.3.4", "10.3.5", "10.3.6"]]]),
            controlObjectives: new Set(["Establish logging and monitoring"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether Amazon OpenSearch Service domains have audit logging enabled.",
            resourceTypes: new Set(["AWS::OpenSearch::Domain"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.Opensearch.6",
            name: "OpenSearch domains should have at least three data nodes",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon OpenSearch Service"]),
            frameworks: new Set(["NIST 800-53 Rev 5"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CP-10", "CP-6(2)", "SC-36", "SC-5(2)", "SI-13(5)"]]]),
            controlObjectives: new Set(["Improve availability"]),
            releaseDate: "2022-11-28",
            description: 'This control checks whether Amazon OpenSearch Service domains are configured with at least three data nodes and "zoneAwarenessEnabled" is true.',
            resourceTypes: new Set(["AWS::OpenSearch::Domain"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.Opensearch.7",
            name: "OpenSearch domains should have fine-grained access control enabled",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon OpenSearch Service"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-2(1)", "AC-3", "AC-3(15)", "AC-3(7)", "AC-5", "AC-6"]], ["PCI DSS version 3.2.1", ["7.1.1", "7.2.1", "7.2.2"]]]),
            controlObjectives: new Set(["Enforce least privilege"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether Amazon OpenSearch domains have fine-grained access control enabled. This control fails if the fine-grained access control is not enabled.",
            resourceTypes: new Set(["AWS::OpenSearch::Domain"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "HIGH"
        }, {
            identifier: "SH.Opensearch.8",
            name: "Connections to OpenSearch domains should be encrypted using TLS 1.2",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon OpenSearch Service"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-17(2)", "AC-4", "IA-5(1)", "SC-12(3)", "SC-13", "SC-23", "SC-23(3)", "SC-7(4)", "SC-8", "SC-8(1)", "SC-8(2)", "SI-7(6)"]], ["PCI DSS version 3.2.1", ["2.3", "4.1"]]]),
            controlObjectives: new Set(["Encrypt data in transit"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether connections to OpenSearch domains are required to use TLS 1.2. The check fails if the OpenSearch domain TLSSecurityPolicy is not Policy-Min-TLS-1-2-2019-07.",
            resourceTypes: new Set(["AWS::OpenSearch::Domain"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "AWS-GR_RDS_INSTANCE_PUBLIC_ACCESS_CHECK",
            name: "Disallow public access to RDS database instances",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon RDS"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-21", "AC-3", "AC-3(7)", "AC-4", "AC-4(21)", "AC-6", "SC-7", "SC-7(11)", "SC-7(16)", "SC-7(20)", "SC-7(21)", "SC-7(3)", "SC-7(4)", "SC-7(9)"]], ["PCI DSS version 3.2.1", ["1.2.1", "1.3", "1.3.1", "1.3.2", "1.3.4", "1.3.6", "2.2.2"]]]),
            controlObjectives: new Set(["Limit network access"]),
            releaseDate: "2019-07-30",
            description: "Secure your Amazon RDS database instances by disallowing public access.",
            resourceTypes: new Set(["AWS::RDS::DBInstance"]),
            controlOwner: "AWS Control Tower",
            guidance: "Strongly-Recommended",
            severity: "HIGH"
        }, {
            identifier: "AWS-GR_RDS_SNAPSHOTS_PUBLIC_PROHIBITED",
            name: "Disallow public access to RDS database snapshots",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon RDS"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-21", "AC-3", "AC-3(7)", "AC-4", "AC-4(21)", "AC-6", "SC-7", "SC-7(11)", "SC-7(16)", "SC-7(20)", "SC-7(21)", "SC-7(3)", "SC-7(4)", "SC-7(9)"]], ["PCI DSS version 3.2.1", ["1.2.1", "1.3", "1.3.1", "1.3.2", "1.3.4", "1.3.6", "2.2.2"]]]),
            controlObjectives: new Set(["Limit network access"]),
            releaseDate: "2019-07-30",
            description: "Secure your Amazon RDS database snapshots by disallowing public access.",
            resourceTypes: new Set(["AWS::RDS::DBSnapshot"]),
            controlOwner: "AWS Control Tower",
            guidance: "Strongly-Recommended",
            severity: "HIGH"
        }, {
            identifier: "AWS-GR_RDS_STORAGE_ENCRYPTED",
            name: "Disallow RDS database instances without storage encryption",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon RDS"]),
            frameworks: new Set(["CIS AWS Benchmark 1.4", "NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["CIS AWS Benchmark 1.4", ["2.3.1"]], ["NIST 800-53 Rev 5", ["CA-9(1)", "CM-3(6)", "SC-13", "SC-28", "SC-28(1)", "SC-7(10)", "SI-7(6)"]], ["PCI DSS version 3.2.1", ["3.4", "8.2.1"]]]),
            controlObjectives: new Set(["Encrypt data at rest"]),
            releaseDate: "2019-07-30",
            description: "Secure your Amazon RDS database instances at rest by encrypting the underlying storage for database instances and their automated backups, Read Replicas, and snapshots.",
            resourceTypes: new Set(["AWS::RDS::DBInstance"]),
            controlOwner: "AWS Control Tower",
            guidance: "Strongly-Recommended",
            severity: "HIGH"
        }, {
            identifier: "CT.RDS.PR.1",
            name: "Require that an Amazon RDS database instance is configured with multiple Availability Zones",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon RDS"]),
            frameworks: new Set(["NIST 800-53 Rev 5"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CP-10", "CP-6(2)", "SC-36", "SC-5(2)", "SI-13(5)"]]]),
            controlObjectives: new Set(["Improve availability"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether high availability is enabled for your Amazon RDS DB instances.",
            resourceTypes: new Set(["AWS::RDS::DBInstance"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.RDS.PR.10",
            name: "Require an Amazon RDS database instance to copy tags to snapshots",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon RDS"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CA-9(1)", "CM-2", "CM-2(2)"]], ["PCI DSS version 3.2.1", ["2.2", "2.4"]]]),
            controlObjectives: new Set(["Protect configurations"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether Amazon RDS DB instances are configured to copy all tags to snapshots created.",
            resourceTypes: new Set(["AWS::RDS::DBInstance"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "LOW"
        }, {
            identifier: "CT.RDS.PR.11",
            name: "Require an Amazon RDS DB instance to have a VPC configuration",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon RDS"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-4", "AC-4(21)", "SC-7", "SC-7(11)", "SC-7(16)", "SC-7(20)", "SC-7(21)", "SC-7(4)", "SC-7(9)"]], ["PCI DSS version 3.2.1", ["1.2.1", "1.3", "1.3.1", "1.3.2", "1.3.4", "1.3.6", "2.2.2"]]]),
            controlObjectives: new Set(["Limit network access"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether an Amazon RDS instance is deployed in a VPC (EC2-VPC).",
            resourceTypes: new Set(["AWS::RDS::DBInstance"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "HIGH"
        }, {
            identifier: "CT.RDS.PR.12",
            name: "Require an Amazon RDS event subscription to have critical cluster events configured",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon RDS"]),
            frameworks: new Set(["NIST 800-53 Rev 5"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CA-7", "SI-2"]]]),
            controlObjectives: new Set(["Prepare for incident response"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether your Amazon RDS event subscriptions for RDS clusters are configured to notify on event categories of 'maintenance' and 'failure.'",
            resourceTypes: new Set(["AWS::RDS::EventSubscription"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "LOW"
        }, {
            identifier: "CT.RDS.PR.13",
            name: "RDS DB instances should have deletion protection enabled",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon RDS"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CM-3", "SC-5(2)", "SI-13(5)"]], ["PCI DSS version 3.2.1", ["2.2"]]]),
            controlObjectives: new Set(["Improve availability"]),
            releaseDate: "2022-11-28",
            description: "This rules checks whether an Amazon Relational Database Service (Amazon RDS) instance has deletion protection enabled.",
            resourceTypes: new Set(["AWS::RDS::DBInstance"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "LOW"
        }, {
            identifier: "CT.RDS.PR.14",
            name: "Require an Amazon RDS database instance to have logging configured",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon RDS"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-2(4)", "AC-4(26)", "AC-6(9)", "AU-10", "AU-12", "AU-2", "AU-3", "AU-6(3)", "AU-6(4)", "CA-7", "SC-7(10)", "SC-7(9)", "SI-3(8)", "SI-4(20)", "SI-7(8)"]], ["PCI DSS version 3.2.1", ["10.1", "10.2.1", "10.2.2", "10.2.3", "10.2.4", "10.2.5", "10.2.6", "10.2.7", "10.3.1", "10.3.2", "10.3.3", "10.3.4", "10.3.5", "10.3.6"]]]),
            controlObjectives: new Set(["Establish logging and monitoring"]),
            releaseDate: "2022-11-28",
            description: "This rules checks whether Amazon RDS instances have all available log types enabled for export to Amazon CloudWatch Logs.",
            resourceTypes: new Set(["AWS::RDS::DBInstance"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.RDS.PR.15",
            name: "Amazon RDS DB security groups should not exist as they are used with Amazon EC2-Classic platform",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon RDS"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-4", "AC-4(21)", "CM-8(1)", "SC-7", "SC-7(11)", "SC-7(16)", "SC-7(21)", "SC-7(4)", "SC-7(5)"]], ["PCI DSS version 3.2.1", ["1.2.1", "1.3", "1.3.1", "1.3.2", "1.3.4", "1.3.6", "2.1", "2.2", "2.2.2"]]]),
            controlObjectives: new Set(["Limit network access"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether there are any Amazon RDS DB security groups being created, or associated to an RDS DB Instance.",
            resourceTypes: new Set(["AWS::RDS::DBInstance", "AWS::RDS::DBSecurityGroup"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.RDS.PR.16",
            name: "Require Amazon RDS DB clusters to have encryption at rest configured",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon RDS"]),
            frameworks: new Set(["CIS AWS Benchmark 1.4", "NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["CIS AWS Benchmark 1.4", ["2.3.1"]], ["NIST 800-53 Rev 5", ["CA-9(1)", "CM-3(6)", "SC-13", "SC-28", "SC-28(1)", "SC-7(10)", "SI-7(6)"]], ["PCI DSS version 3.2.1", ["3.4", "8.2.1"]]]),
            controlObjectives: new Set(["Encrypt data at rest"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether the storage encryption is enabled on Amazon RDS DB clusters which are not being restored from an existing cluster.",
            resourceTypes: new Set(["AWS::RDS::DBCluster"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "HIGH"
        }, {
            identifier: "CT.RDS.PR.17",
            name: "Require an Amazon RDS event notification subscription to have critical database instance events configured",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon RDS"]),
            frameworks: new Set(["NIST 800-53 Rev 5"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CA-7", "SI-2"]]]),
            controlObjectives: new Set(["Prepare for incident response"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether your Amazon RDS event subscriptions for RDS instances are configured to notify on event categories of 'maintenance', 'failure', and 'configuration change.'",
            resourceTypes: new Set(["AWS::RDS::EventSubscription"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "LOW"
        }, {
            identifier: "CT.RDS.PR.18",
            name: "Require an Amazon RDS event notification subscription to have critical database parameter group events configured",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon RDS"]),
            frameworks: new Set(["NIST 800-53 Rev 5"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CA-7", "SI-2"]]]),
            controlObjectives: new Set(["Prepare for incident response"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether your Amazon RDS event subscriptions for RDS parameter groups are configured to notify on event categories of 'configuration change.'",
            resourceTypes: new Set(["AWS::RDS::EventSubscription"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "LOW"
        }, {
            identifier: "CT.RDS.PR.19",
            name: "Require an Amazon RDS event notifications subscription to have critical database security group events configured",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon RDS"]),
            frameworks: new Set(["NIST 800-53 Rev 5"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CA-7", "SI-2"]]]),
            controlObjectives: new Set(["Prepare for incident response"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether your Amazon RDS event subscriptions for RDS security groups are configured to notify on event categories of 'failure' and 'configuration change.'",
            resourceTypes: new Set(["AWS::RDS::EventSubscription"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "LOW"
        }, {
            identifier: "CT.RDS.PR.2",
            name: "Require an Amazon RDS database instance or cluster to have enhanced monitoring configured",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon RDS"]),
            frameworks: new Set(["NIST 800-53 Rev 5"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CA-7", "SI-2"]]]),
            controlObjectives: new Set(["Establish logging and monitoring"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether enhanced monitoring is enabled for Amazon RDS instances.",
            resourceTypes: new Set(["AWS::RDS::DBInstance"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "LOW"
        }, {
            identifier: "CT.RDS.PR.20",
            name: "Require an Amazon RDS database instance not to use a database engine default port",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon RDS"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-4", "AC-4(21)", "SC-7", "SC-7(11)", "SC-7(16)", "SC-7(21)", "SC-7(4)", "SC-7(5)"]], ["PCI DSS version 3.2.1", ["1.2.1", "1.3.1", "1.3.2", "1.3.4", "2.2"]]]),
            controlObjectives: new Set(["Limit network access"]),
            releaseDate: "2022-11-28",
            description: "Checks if Amazon Relational Database Service (RDS) database instances are configured for default database port for their specific engine types.",
            resourceTypes: new Set(["AWS::RDS::DBInstance"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "LOW"
        }, {
            identifier: "CT.RDS.PR.21",
            name: "Require an Amazon RDS DB cluster to have a unique administrator username",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon RDS"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CA-9(1)", "CM-2"]], ["PCI DSS version 3.2.1", ["2.1"]]]),
            controlObjectives: new Set(["Protect configurations"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether an Amazon RDS DB cluster has changed the administrator username from its default value.",
            resourceTypes: new Set(["AWS::RDS::DBCluster"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.RDS.PR.22",
            name: "Require an Amazon RDS database instance to have a unique administrator username",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon RDS"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CA-9(1)", "CM-2"]], ["PCI DSS version 3.2.1", ["2.1"]]]),
            controlObjectives: new Set(["Protect configurations"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether an Amazon RDS database has changed the admin username from its default value.",
            resourceTypes: new Set(["AWS::RDS::DBInstance"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.RDS.PR.23",
            name: "Require an Amazon RDS database instance to not be publicly accessible as determined by the publicly accessible configuration",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon RDS"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-21", "AC-3", "AC-3(7)", "AC-4", "AC-4(21)", "AC-6", "SC-7", "SC-7(11)", "SC-7(16)", "SC-7(20)", "SC-7(21)", "SC-7(3)", "SC-7(4)", "SC-7(9)"]], ["PCI DSS version 3.2.1", ["1.2.1", "1.3", "1.3.1", "1.3.2", "1.3.4", "1.3.6", "2.2.2"]]]),
            controlObjectives: new Set(["Limit network access"]),
            releaseDate: "2022-11-28",
            description: "This rule checks whether Amazon RDS database instances are publicly accessible, determined by the publicly accessible configuration.",
            resourceTypes: new Set(["AWS::RDS::DBInstance"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "CRITICAL"
        }, {
            identifier: "CT.RDS.PR.24",
            name: "Require an Amazon RDS database instance to have encryption at rest configured",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon RDS"]),
            frameworks: new Set(["CIS AWS Benchmark 1.4", "NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["CIS AWS Benchmark 1.4", ["2.3.1"]], ["NIST 800-53 Rev 5", ["CA-9(1)", "CM-3(6)", "SC-13", "SC-28", "SC-28(1)", "SC-7(10)", "SI-7(6)"]], ["PCI DSS version 3.2.1", ["3.4", "8.2.1"]]]),
            controlObjectives: new Set(["Encrypt data at rest"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether storage encryption is enabled for your Amazon RDS database (DB) instance.",
            resourceTypes: new Set(["AWS::RDS::DBInstance"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.RDS.PR.25",
            name: "Require an Amazon RDS database cluster to have logging configured",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon RDS"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-2(4)", "AC-4(26)", "AC-6(9)", "AU-10", "AU-12", "AU-2", "AU-3", "AU-6(3)", "AU-6(4)", "CA-7", "SC-7(10)", "SC-7(9)", "SI-3(8)", "SI-4(20)", "SI-7(8)"]], ["PCI DSS version 3.2.1", ["10.1", "10.2.1", "10.2.2", "10.2.3", "10.2.4", "10.2.5", "10.2.6", "10.2.7", "10.3.1", "10.3.2", "10.3.3", "10.3.4", "10.3.5", "10.3.6"]]]),
            controlObjectives: new Set(["Establish logging and monitoring"]),
            releaseDate: "2023-05-19",
            description: "This control checks whether Amazon RDS database clusters have all available log types enabled for export to Amazon CloudWatch Logs.",
            resourceTypes: new Set(["AWS::RDS::DBCluster"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.RDS.PR.3",
            name: "Require an Amazon RDS cluster to have deletion protection configured",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon RDS"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CM-3", "SC-5(2)"]], ["PCI DSS version 3.2.1", ["2.2"]]]),
            controlObjectives: new Set(["Improve availability"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether your Amazon Relational Database Service (Amazon RDS) cluster has deletion protection activated.",
            resourceTypes: new Set(["AWS::RDS::DBCluster"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "LOW"
        }, {
            identifier: "CT.RDS.PR.4",
            name: "Require an Amazon RDS DB cluster to have AWS IAM database authentication configured",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon RDS"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-2(1)", "AC-3", "AC-3(15)", "AC-3(7)", "AC-6"]], ["PCI DSS version 3.2.1", ["7.1.1", "7.2.1", "7.2.2", "8.7"]]]),
            controlObjectives: new Set(["Use strong authentication"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether an Amazon RDS DB cluster has AWS IAM database authentication enabled.",
            resourceTypes: new Set(["AWS::RDS::DBCluster"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.RDS.PR.5",
            name: "Require an Amazon RDS database instance to have minor version upgrades configured",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon RDS"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["SI-2", "SI-2(2)", "SI-2(4)", "SI-2(5)"]], ["PCI DSS version 3.2.1", ["6.2"]]]),
            controlObjectives: new Set(["Manage vulnerabilities"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether automatic minor version upgrades are enabled for an Amazon RDS database instance.",
            resourceTypes: new Set(["AWS::RDS::DBInstance"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "HIGH"
        }, {
            identifier: "CT.RDS.PR.6",
            name: "Require an Amazon RDS DB cluster to have backtracking configured",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon RDS"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CP-10", "CP-6", "CP-6(1)", "CP-6(2)", "CP-9", "SI-13(5)"]], ["PCI DSS version 3.2.1", ["3.1"]]]),
            controlObjectives: new Set(["Improve resiliency"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether an Amazon RDS DB cluster has backtracking enabled.",
            resourceTypes: new Set(["AWS::RDS::DBCluster"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.RDS.PR.7",
            name: "Require Amazon RDS database instances to have AWS IAM authentication configured",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon RDS"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-2(1)", "AC-3", "AC-3(15)", "AC-3(7)", "AC-6"]], ["PCI DSS version 3.2.1", ["7.1.1", "7.2.1", "7.2.2", "8.7"]]]),
            controlObjectives: new Set(["Use strong authentication"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether an Amazon RDS DB instance has AWS IAM database authentication enabled.",
            resourceTypes: new Set(["AWS::RDS::DBInstance"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.RDS.PR.8",
            name: "Require an Amazon RDS database instance to have automatic backups configured",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon RDS"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CP-10", "CP-6", "CP-6(1)", "CP-6(2)", "CP-9", "SC-5(2)", "SI-12", "SI-13(5)"]], ["PCI DSS version 3.2.1", ["10.7", "3.1"]]]),
            controlObjectives: new Set(["Improve resiliency"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether Amazon RDS instances have automated backups enabled and the backup retention period is greater than or equal to 7 days.",
            resourceTypes: new Set(["AWS::RDS::DBInstance"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.RDS.PR.9",
            name: "Require an Amazon RDS DB cluster to have copy tags to snapshots configured",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon RDS"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CA-9(1)", "CM-2", "CM-2(2)"]], ["PCI DSS version 3.2.1", ["2.2", "2.4"]]]),
            controlObjectives: new Set(["Protect configurations"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether an Amazon RDS DB cluster is configured to copy all tags to snapshots created.",
            resourceTypes: new Set(["AWS::RDS::DBCluster"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "LOW"
        }, {
            identifier: "SH.RDS.1",
            name: "RDS snapshot should be private",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon RDS"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-21", "AC-3", "AC-3(7)", "AC-4", "AC-4(21)", "AC-6", "SC-7", "SC-7(11)", "SC-7(16)", "SC-7(20)", "SC-7(21)", "SC-7(3)", "SC-7(4)", "SC-7(9)"]], ["PCI DSS version 3.2.1", ["1.2.1", "1.3", "1.3.1", "1.3.2", "1.3.4", "1.3.6", "2.2.2"]]]),
            controlObjectives: new Set(["Enforce least privilege", "Protect data integrity"]),
            releaseDate: "2022-11-28",
            description: "This AWS control checks if Amazon Relational Database Service (Amazon RDS) snapshots are public.",
            resourceTypes: new Set(["AWS::RDS::DBSnapshot", "AWS::RDS::DBClusterSnapshot"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "CRITICAL"
        }, {
            identifier: "SH.RDS.10",
            name: "IAM authentication should be configured for RDS instances",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon RDS"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-2(1)", "AC-3", "AC-3(15)", "AC-3(7)", "AC-6"]], ["PCI DSS version 3.2.1", ["7.1.1", "7.2.1", "7.2.2", "8.7"]]]),
            controlObjectives: new Set(["Use strong authentication"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether an RDS DB instance has IAM database authentication enabled.",
            resourceTypes: new Set(["AWS::RDS::DBInstance"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.RDS.11",
            name: "RDS instances should have automatic backups enabled",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon RDS"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CP-10", "CP-6", "CP-6(1)", "CP-6(2)", "CP-9", "SC-5(2)", "SI-12", "SI-13(5)"]], ["PCI DSS version 3.2.1", ["10.7", "3.1"]]]),
            controlObjectives: new Set(["Improve resiliency"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether RDS DB instances have automated backups enabled. It also checks whether the backup retention period is greater than or equal to 7. The control passes if all of the following are true: backups are enabled; the backup retention period is greater than or equal to the retentionPeriod; and the retention period is greater than or equal to 7.",
            resourceTypes: new Set(["AWS::RDS::DBInstance"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.RDS.12",
            name: "IAM authentication should be configured for RDS clusters",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon RDS"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-2(1)", "AC-3", "AC-3(15)", "AC-3(7)", "AC-6"]], ["PCI DSS version 3.2.1", ["7.1.1", "7.2.1", "7.2.2", "8.7"]]]),
            controlObjectives: new Set(["Use strong authentication"]),
            releaseDate: "2022-11-28",
            description: "This control checks if an RDS DB cluster has IAM database authentication enabled.",
            resourceTypes: new Set(["AWS::RDS::DBCluster"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.RDS.13",
            name: "RDS automatic minor version upgrades should be enabled",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon RDS"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["SI-2", "SI-2(2)", "SI-2(4)", "SI-2(5)"]], ["PCI DSS version 3.2.1", ["6.2"]]]),
            controlObjectives: new Set(["Manage vulnerabilities"]),
            releaseDate: "2022-11-28",
            description: "This control checks if automatic minor version upgrades are enabled for the Amazon RDS database instance.",
            resourceTypes: new Set(["AWS::RDS::DBInstance"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "HIGH"
        }, {
            identifier: "SH.RDS.14",
            name: "Amazon Aurora clusters should have backtracking enabled",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon RDS"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CP-10", "CP-6", "CP-6(1)", "CP-6(2)", "CP-9", "SI-13(5)"]], ["PCI DSS version 3.2.1", ["3.1"]]]),
            controlObjectives: new Set(["Improve resiliency"]),
            releaseDate: "2022-11-28",
            description: "This control checks if Amazon Aurora clusters have backtracking enabled.",
            resourceTypes: new Set(["AWS::RDS::DBCluster"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.RDS.15",
            name: "RDS DB clusters should be configured for multiple Availability Zones",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon RDS"]),
            frameworks: new Set(["NIST 800-53 Rev 5"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CP-10", "CP-6(2)", "SC-36", "SC-5(2)", "SI-13(5)"]]]),
            controlObjectives: new Set(["Improve availability"]),
            releaseDate: "2022-11-28",
            description: "This control checks if Amazon RDS DB clusters are configured with multiple Availability Zones.",
            resourceTypes: new Set(["AWS::RDS::DBCluster"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.RDS.16",
            name: "RDS DB clusters should be configured to copy tags to snapshots",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon RDS"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CA-9(1)", "CM-2", "CM-2(2)"]], ["PCI DSS version 3.2.1", ["2.2", "2.4"]]]),
            controlObjectives: new Set(["Protect configurations"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether RDS DB clusters are configured to copy all tags to snapshots when the snapshots are created.",
            resourceTypes: new Set(["AWS::RDS::DBCluster"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "LOW"
        }, {
            identifier: "SH.RDS.17",
            name: "RDS DB instances should be configured to copy tags to snapshots",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon RDS"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CA-9(1)", "CM-2", "CM-2(2)"]], ["PCI DSS version 3.2.1", ["2.2", "2.4"]]]),
            controlObjectives: new Set(["Protect configurations"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether RDS DB instances are configured to copy all tags to snapshots when the snapshots are created.",
            resourceTypes: new Set(["AWS::RDS::DBInstance"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "LOW"
        }, {
            identifier: "SH.RDS.18",
            name: "RDS instances should be deployed in a VPC",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon RDS"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-4", "AC-4(21)", "SC-7", "SC-7(11)", "SC-7(16)", "SC-7(20)", "SC-7(21)", "SC-7(4)", "SC-7(9)"]], ["PCI DSS version 3.2.1", ["1.2.1", "1.3", "1.3.1", "1.3.2", "1.3.4", "1.3.6", "2.2.2"]]]),
            controlObjectives: new Set(["Limit network access"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether an RDS instance is deployed in a VPC (EC2-VPC).",
            resourceTypes: new Set(["AWS::RDS::DBInstance"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "HIGH"
        }, {
            identifier: "SH.RDS.19",
            name: "An RDS event notifications subscription should be configured for critical cluster events",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon RDS"]),
            frameworks: new Set(["NIST 800-53 Rev 5"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CA-7", "SI-2"]]]),
            controlObjectives: new Set(["Prepare for incident response"]),
            releaseDate: "2022-11-28",
            description: 'This control checks whether an Amazon RDS Event subscription for RDS clusters is configured to notify on event categories of both "maintenance" and "failure".',
            resourceTypes: new Set(["AWS::RDS::EventSubscription"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "LOW"
        }, {
            identifier: "SH.RDS.2",
            name: "RDS DB Instances should prohibit public access, as determined by the PubliclyAccessible configuration",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon RDS"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-21", "AC-3", "AC-3(7)", "AC-4", "AC-4(21)", "AC-6", "SC-7", "SC-7(11)", "SC-7(16)", "SC-7(20)", "SC-7(21)", "SC-7(3)", "SC-7(4)", "SC-7(9)"]], ["PCI DSS version 3.2.1", ["1.2.1", "1.3", "1.3.1", "1.3.2", "1.3.4", "1.3.6", "2.2.2"]]]),
            controlObjectives: new Set(["Limit network access"]),
            releaseDate: "2022-11-28",
            description: "This AWS control checks whether RDS instances are publicly accessible by evaluating the publiclyAccessible field in the instance configuration item.",
            resourceTypes: new Set(["AWS::RDS::DBInstance"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "CRITICAL"
        }, {
            identifier: "SH.RDS.20",
            name: "An RDS event notifications subscription should be configured for critical database instance events",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon RDS"]),
            frameworks: new Set(["NIST 800-53 Rev 5"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CA-7", "SI-2"]]]),
            controlObjectives: new Set(["Prepare for incident response"]),
            releaseDate: "2022-11-28",
            description: 'This control checks whether an Amazon RDS Event subscription for RDS instances is configured to notify on event categories of both "maintenance", "configuration change", and "failure".',
            resourceTypes: new Set(["AWS::RDS::EventSubscription"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "LOW"
        }, {
            identifier: "SH.RDS.21",
            name: "An RDS event notifications subscription should be configured for critical database parameter group events",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon RDS"]),
            frameworks: new Set(["NIST 800-53 Rev 5"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CA-7", "SI-2"]]]),
            controlObjectives: new Set(["Prepare for incident response"]),
            releaseDate: "2022-11-28",
            description: 'This control checks whether an Amazon RDS Event subscription for RDS parameter groups is configured to notify on event category of "configuration change".',
            resourceTypes: new Set(["AWS::RDS::EventSubscription"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "LOW"
        }, {
            identifier: "SH.RDS.22",
            name: "An RDS event notifications subscription should be configured for critical database security group events",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon RDS"]),
            frameworks: new Set(["NIST 800-53 Rev 5"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CA-7", "SI-2"]]]),
            controlObjectives: new Set(["Prepare for incident response"]),
            releaseDate: "2022-11-28",
            description: 'This control checks whether an Amazon RDS Event subscription for RDS security groups is configured to notify on event categories of both "configuration change" and "failure".',
            resourceTypes: new Set(["AWS::RDS::EventSubscription"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "LOW"
        }, {
            identifier: "SH.RDS.23",
            name: "RDS instances should not use a database engine default port",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon RDS"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-4", "AC-4(21)", "SC-7", "SC-7(11)", "SC-7(16)", "SC-7(21)", "SC-7(4)", "SC-7(5)"]], ["PCI DSS version 3.2.1", ["1.2.1", "1.3.1", "1.3.2", "1.3.4", "2.2"]]]),
            controlObjectives: new Set(["Limit network access"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether RDS instances use the default port of that database engine.",
            resourceTypes: new Set(["AWS::RDS::DBInstance"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "LOW"
        }, {
            identifier: "SH.RDS.24",
            name: "RDS Database Clusters should use a custom administrator username",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon RDS"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CA-9(1)", "CM-2"]], ["PCI DSS version 3.2.1", ["2.1"]]]),
            controlObjectives: new Set(["Protect configurations"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether an RDS database cluster has changed the admin username from its default value. This rule will fail if the admin username is set to the default value.",
            resourceTypes: new Set(["AWS::RDS::DBCluster"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.RDS.25",
            name: "RDS database instances should use a custom administrator username",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon RDS"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CA-9(1)", "CM-2"]], ["PCI DSS version 3.2.1", ["2.1"]]]),
            controlObjectives: new Set(["Protect configurations"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether an Amazon Relational Database Service (Amazon RDS) database instance has changed the admin username from its default value. This rule will only run on RDS database instances. The rule will fail if the admin username is set to the default value.",
            resourceTypes: new Set(["AWS::RDS::DBInstance"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.RDS.27",
            name: "RDS DB clusters should be encrypted at rest",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon RDS"]),
            frameworks: new Set([]),
            frameworksIds: new Map,
            controlObjectives: new Set(["Encrypt data at rest"]),
            releaseDate: "<UPDATE>",
            description: "This control checks if an RDS DB cluster is encrypted at rest. The control fails if an RDS DB cluster isn't encrypted at rest.",
            resourceTypes: new Set(["AWS::RDS::DBCluster"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.RDS.3",
            name: "RDS DB instances should have encryption at-rest enabled",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon RDS"]),
            frameworks: new Set(["CIS AWS Benchmark 1.4", "NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["CIS AWS Benchmark 1.4", ["2.3.1"]], ["NIST 800-53 Rev 5", ["CA-9(1)", "CM-3(6)", "SC-13", "SC-28", "SC-28(1)", "SC-7(10)", "SI-7(6)"]], ["PCI DSS version 3.2.1", ["3.4", "8.2.1"]]]),
            controlObjectives: new Set(["Encrypt data at rest"]),
            releaseDate: "2022-11-28",
            description: "This AWS control checks whether storage encryption is enabled for your RDS DB instances.",
            resourceTypes: new Set(["AWS::RDS::DBInstance"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.RDS.4",
            name: "RDS cluster snapshots and database snapshots should be encrypted at rest",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon RDS"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CA-9(1)", "CM-3(6)", "SC-13", "SC-28", "SC-28(1)", "SC-7(10)", "SI-7(6)"]], ["PCI DSS version 3.2.1", ["3.4", "8.2.1"]]]),
            controlObjectives: new Set(["Encrypt data at rest"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether Amazon RDS cluster snapshots and database snapshots are encrypted.",
            resourceTypes: new Set(["AWS::RDS::DBClusterSnapshot", "AWS::RDS::DBSnapshot"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.RDS.5",
            name: "RDS DB instances should be configured with multiple Availability Zones",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon RDS"]),
            frameworks: new Set(["NIST 800-53 Rev 5"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CP-10", "CP-6(2)", "SC-36", "SC-5(2)", "SI-13(5)"]]]),
            controlObjectives: new Set(["Improve availability"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether high availability is enabled for your RDS DB instances.",
            resourceTypes: new Set(["AWS::RDS::DBInstance"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.RDS.6",
            name: "Enhanced monitoring should be configured for RDS DB instances",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon RDS"]),
            frameworks: new Set(["NIST 800-53 Rev 5"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CA-7", "SI-2"]]]),
            controlObjectives: new Set(["Establish logging and monitoring"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether enhanced monitoring is enabled for your RDS DB instances.",
            resourceTypes: new Set(["AWS::RDS::DBInstance"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "LOW"
        }, {
            identifier: "SH.RDS.7",
            name: "RDS clusters should have deletion protection enabled",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon RDS"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CM-3", "SC-5(2)"]], ["PCI DSS version 3.2.1", ["2.2"]]]),
            controlObjectives: new Set(["Improve availability"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether RDS clusters have deletion protection enabled.",
            resourceTypes: new Set(["AWS::RDS::DBCluster"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "LOW"
        }, {
            identifier: "SH.RDS.8",
            name: "RDS DB instances should have deletion protection enabled",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon RDS"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CM-3", "SC-5(2)", "SI-13(5)"]], ["PCI DSS version 3.2.1", ["2.2"]]]),
            controlObjectives: new Set(["Improve availability"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether RDS DB instances have deletion protection enabled.",
            resourceTypes: new Set(["AWS::RDS::DBInstance"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "LOW"
        }, {
            identifier: "SH.RDS.9",
            name: "Database logging should be enabled",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon RDS"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-2(4)", "AC-4(26)", "AC-6(9)", "AU-10", "AU-12", "AU-2", "AU-3", "AU-6(3)", "AU-6(4)", "CA-7", "SC-7(10)", "SC-7(9)", "SI-3(8)", "SI-4(20)", "SI-7(8)"]], ["PCI DSS version 3.2.1", ["10.1", "10.2.1", "10.2.2", "10.2.3", "10.2.4", "10.2.5", "10.2.6", "10.2.7", "10.3.1", "10.3.2", "10.3.3", "10.3.4", "10.3.5", "10.3.6"]]]),
            controlObjectives: new Set(["Establish logging and monitoring"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether the following Amazon RDS logs are enabled and sent to CloudWatch Logs: Oracle: (Alert, Audit, Trace, Listener), PostgreSQL: (Postgresql, Upgrade), MySQL: (Audit, Error, General, SlowQuery), MariaDB: (Audit, Error, General, SlowQuery), SQL Server: (Error, Agent), Aurora: (Audit, Error, General, SlowQuery), Aurora-MySQL: (Audit, Error, General, SlowQuery), Aurora-PostgreSQL: (Postgresql).",
            resourceTypes: new Set(["AWS::RDS::DBInstance"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "AWS-GR_REDSHIFT_CLUSTER_PUBLIC_ACCESS_CHECK",
            name: "Detect whether Amazon Redshift clusters are blocked from public access",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon Redshift"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-21", "AC-3", "AC-3(7)", "AC-4", "AC-4(21)", "AC-6", "SC-7", "SC-7(11)", "SC-7(16)", "SC-7(20)", "SC-7(21)", "SC-7(3)", "SC-7(4)", "SC-7(9)"]], ["PCI DSS version 3.2.1", ["1.2.1", "1.3", "1.3.1", "1.3.2", "1.3.4", "1.3.6", "2.2.2"]]]),
            controlObjectives: new Set(["Limit network access"]),
            releaseDate: "2021-11-30",
            description: "Detects whether Amazon Redshift clusters are blocked from public access. The rule is NON_COMPLIANT if the publiclyAccessible field is true in the cluster configuration item.",
            resourceTypes: new Set(["AWS::Redshift::Cluster"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.REDSHIFT.PR.1",
            name: "Require an Amazon Redshift cluster to prohibit public access",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon Redshift"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-21", "AC-3", "AC-3(7)", "AC-4", "AC-4(21)", "AC-6", "SC-7", "SC-7(11)", "SC-7(16)", "SC-7(20)", "SC-7(21)", "SC-7(3)", "SC-7(4)", "SC-7(9)"]], ["PCI DSS version 3.2.1", ["1.2.1", "1.3", "1.3.1", "1.3.2", "1.3.4", "1.3.6", "2.2.2"]]]),
            controlObjectives: new Set(["Limit network access"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether Amazon Redshift clusters are configured to not be publicly accessible.",
            resourceTypes: new Set(["AWS::Redshift::Cluster"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "CRITICAL"
        }, {
            identifier: "CT.REDSHIFT.PR.2",
            name: "Require an Amazon Redshift cluster to have automatic snapshots configured",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon Redshift"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CP-10", "CP-6", "CP-6(1)", "CP-6(2)", "CP-9", "SC-5(2)", "SC-7(10)", "SI-13(5)"]], ["PCI DSS version 3.2.1", ["3.1"]]]),
            controlObjectives: new Set(["Improve resiliency"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether Amazon Redshift clusters have automated snapshots enabled with an automated snapshot retention period greater than or equal to 7 days.",
            resourceTypes: new Set(["AWS::Redshift::Cluster"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.REDSHIFT.PR.3",
            name: "Require an Amazon Redshift cluster to have audit logging configured",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon Redshift"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-2(4)", "AC-4(26)", "AC-6(9)", "AU-10", "AU-12", "AU-2", "AU-3", "AU-6(3)", "AU-6(4)", "CA-7", "SC-7(9)", "SI-3(8)", "SI-4(20)", "SI-7(8)"]], ["PCI DSS version 3.2.1", ["10.1", "10.2.1", "10.2.2", "10.2.3", "10.2.4", "10.2.5", "10.3.1", "10.3.2", "10.3.3", "10.3.4", "10.3.5", "10.3.6"]]]),
            controlObjectives: new Set(["Establish logging and monitoring"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether an Amazon Redshift cluster has audit logging enabled.",
            resourceTypes: new Set(["AWS::Redshift::Cluster"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.REDSHIFT.PR.4",
            name: "Require an Amazon Redshift cluster to have automatic upgrades to major versions configured",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon Redshift"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CA-9(1)", "CM-2", "CP-9", "SC-5(2)", "SI-2", "SI-2(2)", "SI-2(4)", "SI-2(5)"]], ["PCI DSS version 3.2.1", ["6.2"]]]),
            controlObjectives: new Set(["Manage vulnerabilities"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether automatic major version upgrades are enabled for your Amazon Redshift cluster.",
            resourceTypes: new Set(["AWS::Redshift::Cluster"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.REDSHIFT.PR.5",
            name: "Require an Amazon Redshift cluster to have enhanced VPC routing",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon Redshift"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-4", "AC-4(21)", "SC-7", "SC-7(11)", "SC-7(20)", "SC-7(21)", "SC-7(4)", "SC-7(9)"]], ["PCI DSS version 3.2.1", ["1.2.1", "1.3", "1.3.1", "1.3.2", "1.3.4", "1.3.6"]]]),
            controlObjectives: new Set(["Limit network access"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether an Amazon Redshift cluster has enhanced VPC routing enabled.",
            resourceTypes: new Set(["AWS::Redshift::Cluster"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.REDSHIFT.PR.6",
            name: "Require an Amazon Redshift cluster to have a unique Admin username",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon Redshift"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CA-9(1)", "CM-2"]], ["PCI DSS version 3.2.1", ["2.1"]]]),
            controlObjectives: new Set(["Protect configurations"]),
            releaseDate: "2022-11-28",
            description: "Checks whether an Amazon Redshift cluster has changed the admin username from its default value.",
            resourceTypes: new Set(["AWS::Redshift::Cluster"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.REDSHIFT.PR.7",
            name: "Require an Amazon Redshift cluster to have a unique database name",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon Redshift"]),
            frameworks: new Set([]),
            frameworksIds: new Map,
            controlObjectives: new Set(["Protect configurations"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether an Amazon Redshift cluster has changed its database name from the default value.",
            resourceTypes: new Set(["AWS::Redshift::Cluster"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.REDSHIFT.PR.8",
            name: "Require an Amazon Redshift cluster to be encrypted",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon Redshift"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CA-9(1)", "CM-3(6)", "SC-13", "SC-28", "SC-28(1)", "SI-7(6)"]], ["PCI DSS version 3.2.1", ["3.4", "3.5.3", "8.2.1"]]]),
            controlObjectives: new Set(["Encrypt data at rest"]),
            releaseDate: "2023-07-24",
            description: "This control checks whether Amazon Redshift clusters are encrypted.",
            resourceTypes: new Set(["AWS::Redshift::Cluster"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.REDSHIFT.PR.9",
            name: "Require an Amazon Redshift cluster parameter group to be configured to require encryption of data in transit by means of Secure Sockets Layer (SSL)",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon Redshift"]),
            frameworks: new Set([]),
            frameworksIds: new Map,
            controlObjectives: new Set(["Encrypt data in transit"]),
            releaseDate: "2023-08-31",
            description: "This control checks whether an Amazon Redshift cluster parameter group is configured to require encryption in transit.",
            resourceTypes: new Set(["AWS::Redshift::ClusterParameterGroup"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.Redshift.1",
            name: "Amazon Redshift clusters should prohibit public access",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon Redshift"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-21", "AC-3", "AC-3(7)", "AC-4", "AC-4(21)", "AC-6", "SC-7", "SC-7(11)", "SC-7(16)", "SC-7(20)", "SC-7(21)", "SC-7(3)", "SC-7(4)", "SC-7(9)"]], ["PCI DSS version 3.2.1", ["1.2.1", "1.3", "1.3.1", "1.3.2", "1.3.4", "1.3.6", "2.2.2"]]]),
            controlObjectives: new Set(["Limit network access"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether Amazon Redshift clusters are publicly accessible. It evaluates the publiclyAccessible field in the cluster configuration item.",
            resourceTypes: new Set(["AWS::Redshift::Cluster"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "CRITICAL"
        }, {
            identifier: "SH.Redshift.10",
            name: "Redshift clusters should be encrypted at rest",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon Redshift"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CA-9(1)", "CM-3(6)", "SC-13", "SC-28", "SC-28(1)", "SI-7(6)"]], ["PCI DSS version 3.2.1", ["3.4", "3.5.3", "8.2.1"]]]),
            controlObjectives: new Set(["Encrypt data at rest"]),
            releaseDate: "2023-06-12",
            description: "This control checks if an Amazon Redshift cluster is encrypted at rest. The control fails if a Redshift cluster isn't encrypted at rest.",
            resourceTypes: new Set(["AWS::Redshift::Cluster"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.Redshift.2",
            name: "Connections to Amazon Redshift clusters should be encrypted in transit",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon Redshift"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-4", "SC-13", "SC-23", "SC-23(3)", "SC-7(4)", "SC-8", "SC-8(1)", "SC-8(2)"]], ["PCI DSS version 3.2.1", ["2.3", "4.1"]]]),
            controlObjectives: new Set(["Encrypt data in transit"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether connections to Amazon Redshift clusters are required to use encryption in transit. The check fails if the Amazon Redshift cluster parameter require_SSL is not set to 1.",
            resourceTypes: new Set(["AWS::Redshift::Cluster"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.Redshift.3",
            name: "Amazon Redshift clusters should have automatic snapshots enabled",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon Redshift"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CP-10", "CP-6", "CP-6(1)", "CP-6(2)", "CP-9", "SC-5(2)", "SC-7(10)", "SI-13(5)"]], ["PCI DSS version 3.2.1", ["3.1"]]]),
            controlObjectives: new Set(["Improve resiliency"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether Amazon Redshift clusters have automated snapshots enabled. It also checks whether the snapshot retention period is greater than or equal to 7.",
            resourceTypes: new Set(["AWS::Redshift::Cluster"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.Redshift.4",
            name: "Amazon Redshift clusters should have audit logging enabled",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon Redshift"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-2(4)", "AC-4(26)", "AC-6(9)", "AU-10", "AU-12", "AU-2", "AU-3", "AU-6(3)", "AU-6(4)", "CA-7", "SC-7(9)", "SI-3(8)", "SI-4(20)", "SI-7(8)"]], ["PCI DSS version 3.2.1", ["10.1", "10.2.1", "10.2.2", "10.2.3", "10.2.4", "10.2.5", "10.3.1", "10.3.2", "10.3.3", "10.3.4", "10.3.5", "10.3.6"]]]),
            controlObjectives: new Set(["Establish logging and monitoring"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether an Amazon Redshift cluster has audit logging enabled.",
            resourceTypes: new Set(["AWS::Redshift::Cluster"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.Redshift.6",
            name: "Amazon Redshift should have automatic upgrades to major versions enabled",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon Redshift"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CA-9(1)", "CM-2", "CP-9", "SC-5(2)", "SI-2", "SI-2(2)", "SI-2(4)", "SI-2(5)"]], ["PCI DSS version 3.2.1", ["6.2"]]]),
            controlObjectives: new Set(["Manage vulnerabilities"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether an Amazon Redshift cluster is configured with automatic upgrades to major versions.",
            resourceTypes: new Set(["AWS::Redshift::Cluster"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.Redshift.7",
            name: "Redshift clusters should use enhanced VPC routing",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon Redshift"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-4", "AC-4(21)", "SC-7", "SC-7(11)", "SC-7(20)", "SC-7(21)", "SC-7(4)", "SC-7(9)"]], ["PCI DSS version 3.2.1", ["1.2.1", "1.3", "1.3.1", "1.3.2", "1.3.4", "1.3.6"]]]),
            controlObjectives: new Set(["Limit network access"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether a Redshift cluster has EnhancedVpcRouting enabled.",
            resourceTypes: new Set(["AWS::Redshift::Cluster"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.Redshift.8",
            name: "Amazon Redshift clusters should not use the default Admin username",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon Redshift"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CA-9(1)", "CM-2"]], ["PCI DSS version 3.2.1", ["2.1"]]]),
            controlObjectives: new Set(["Protect configurations"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether a Redshift cluster has changed the Admin username from its default value. This control will fail if the admin username for a Redshift cluster is set to 'awsuser'.",
            resourceTypes: new Set(["AWS::Redshift::Cluster"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.Redshift.9",
            name: "Redshift clusters should not use the default database name",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon Redshift"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CA-9(1)", "CM-2"]], ["PCI DSS version 3.2.1", ["2.1"]]]),
            controlObjectives: new Set(["Protect configurations"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether a Redshift cluster has changed the database name from its default value. This control will fail if the database name for a Redshift cluster is set to \u201cdev\u201d",
            resourceTypes: new Set(["AWS::Redshift::Cluster"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "AWS-GR_AUDIT_BUCKET_PUBLIC_READ_PROHIBITED",
            name: "Disallow public read access to log archive",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon S3"]),
            frameworks: new Set(["CIS AWS Benchmark 1.4", "NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["CIS AWS Benchmark 1.4", ["3.3"]], ["NIST 800-53 Rev 5", ["AC-21", "AC-3", "AC-3(7)", "AC-4", "AC-4(21)", "AC-6", "SC-7", "SC-7(11)", "SC-7(16)", "SC-7(20)", "SC-7(21)", "SC-7(3)", "SC-7(4)", "SC-7(9)"]], ["PCI DSS version 3.2.1", ["1.2.1", "1.3", "1.3.1", "1.3.2", "1.3.4", "1.3.6", "2.2", "2.2.2"]]]),
            controlObjectives: new Set(["Enforce least privilege"]),
            releaseDate: "2018-11-15",
            description: "Control access to your log archive's Amazon S3 bucket by disallowing public read access.",
            resourceTypes: new Set(["AWS::S3::Bucket"]),
            controlOwner: "AWS Control Tower",
            guidance: "Mandatory",
            severity: "CRITICAL"
        }, {
            identifier: "AWS-GR_AUDIT_BUCKET_PUBLIC_WRITE_PROHIBITED",
            name: "Disallow public write access to log archive",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon S3"]),
            frameworks: new Set(["CIS AWS Benchmark 1.4", "NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["CIS AWS Benchmark 1.4", ["3.3"]], ["NIST 800-53 Rev 5", ["AC-21", "AC-3", "AC-3(7)", "AC-4", "AC-4(21)", "AC-6", "SC-7", "SC-7(11)", "SC-7(16)", "SC-7(20)", "SC-7(21)", "SC-7(3)", "SC-7(4)", "SC-7(9)"]], ["PCI DSS version 3.2.1", ["1.2.1", "1.3", "1.3.1", "1.3.2", "1.3.4", "1.3.6", "2.2", "2.2.2"]]]),
            controlObjectives: new Set(["Enforce least privilege"]),
            releaseDate: "2018-11-15",
            description: "Control access to your log archive's Amazon S3 bucket by disallowing public write access.",
            resourceTypes: new Set(["AWS::S3::Bucket"]),
            controlOwner: "AWS Control Tower",
            guidance: "Mandatory",
            severity: "CRITICAL"
        }, {
            identifier: "AWS-GR_S3_ACCOUNT_LEVEL_PUBLIC_ACCESS_BLOCKS_PERIODIC",
            name: "Detect whether Amazon S3 settings to block public access are set as true for the account",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon S3"]),
            frameworks: new Set(["CIS AWS Benchmark 1.4", "NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["CIS AWS Benchmark 1.4", ["2.1.5"]], ["NIST 800-53 Rev 5", ["AC-21", "AC-3", "AC-3(7)", "AC-4", "AC-4(21)", "AC-6", "SC-7", "SC-7(11)", "SC-7(16)", "SC-7(20)", "SC-7(21)", "SC-7(3)", "SC-7(4)", "SC-7(9)"]], ["PCI DSS version 3.2.1", ["1.2.1", "1.3", "1.3.1", "1.3.2", "1.3.4", "1.3.6", "2.2", "2.2.2"]]]),
            controlObjectives: new Set(["Enforce least privilege"]),
            releaseDate: "2021-11-30",
            description: "Periodically detects whether the required Amazon S3 settings to block public access are configured as true for the account, rather than for a bucket or an access point.",
            resourceTypes: new Set(["AWS::S3::AccountPublicAccessBlock"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "AWS-GR_S3_BUCKET_PUBLIC_READ_PROHIBITED",
            name: "Disallow public read access to S3 buckets",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon S3"]),
            frameworks: new Set(["CIS AWS Benchmark 1.4", "NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["CIS AWS Benchmark 1.4", ["3.3"]], ["NIST 800-53 Rev 5", ["AC-21", "AC-3", "AC-3(7)", "AC-4", "AC-4(21)", "AC-6", "SC-7", "SC-7(11)", "SC-7(16)", "SC-7(20)", "SC-7(21)", "SC-7(3)", "SC-7(4)", "SC-7(9)"]], ["PCI DSS version 3.2.1", ["1.2.1", "1.3", "1.3.1", "1.3.2", "1.3.4", "1.3.6", "2.2", "2.2.2"]]]),
            controlObjectives: new Set(["Enforce least privilege"]),
            releaseDate: "2018-11-15",
            description: "Secure access to data stored in Amazon S3 buckets by disallowing public reads.",
            resourceTypes: new Set(["AWS::S3::Bucket"]),
            controlOwner: "AWS Control Tower",
            guidance: "Strongly-Recommended",
            severity: "HIGH"
        }, {
            identifier: "AWS-GR_S3_BUCKET_PUBLIC_WRITE_PROHIBITED",
            name: "Disallow public write access to S3 buckets",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon S3"]),
            frameworks: new Set(["CIS AWS Benchmark 1.4", "NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["CIS AWS Benchmark 1.4", ["3.3"]], ["NIST 800-53 Rev 5", ["AC-21", "AC-3", "AC-3(7)", "AC-4", "AC-4(21)", "AC-6", "SC-7", "SC-7(11)", "SC-7(16)", "SC-7(20)", "SC-7(21)", "SC-7(3)", "SC-7(4)", "SC-7(9)"]], ["PCI DSS version 3.2.1", ["1.2.1", "1.3", "1.3.1", "1.3.2", "1.3.4", "1.3.6", "2.2", "2.2.2"]]]),
            controlObjectives: new Set(["Enforce least privilege"]),
            releaseDate: "2018-11-15",
            description: "Secure access to data stored in Amazon S3 buckets by disallowing public writes.",
            resourceTypes: new Set(["AWS::S3::Bucket"]),
            controlOwner: "AWS Control Tower",
            guidance: "Strongly-Recommended",
            severity: "HIGH"
        }, {
            identifier: "AWS-GR_S3_VERSIONING_ENABLED",
            name: "Disallow S3 buckets that are not versioning enabled",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon S3"]),
            frameworks: new Set(["CIS AWS Benchmark 1.4", "NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["CIS AWS Benchmark 1.4", ["2.1.3"]], ["NIST 800-53 Rev 5", ["AU-9(2)", "CP-10", "CP-6", "CP-6(1)", "CP-6(2)", "CP-9", "SC-5(2)", "SI-12", "SI-13(5)"]], ["PCI DSS version 3.2.1", ["10.5.5"]]]),
            controlObjectives: new Set(["Optimize costs", "Improve availability"]),
            releaseDate: "2019-07-30",
            description: "Protect your S3 buckets by keeping multiple versions of all objects. Versioning allows you to recover objects from accidental deletion or overwrite.",
            resourceTypes: new Set(["AWS::S3::Bucket"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.S3.PR.1",
            name: "Require an Amazon S3 bucket to have block public access settings configured",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon S3"]),
            frameworks: new Set(["CIS AWS Benchmark 1.4", "NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["CIS AWS Benchmark 1.4", ["2.1.5"]], ["NIST 800-53 Rev 5", ["AC-21", "AC-3", "AC-3(7)", "AC-4", "AC-4(21)", "AC-6", "SC-7", "SC-7(11)", "SC-7(16)", "SC-7(20)", "SC-7(21)", "SC-7(3)", "SC-7(4)", "SC-7(9)"]], ["PCI DSS version 3.2.1", ["1.2.1", "1.3", "1.3.1", "1.3.2", "1.3.4", "1.3.6", "2.2.2"]]]),
            controlObjectives: new Set(["Enforce least privilege"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether your Amazon Simple Storage Service (Amazon S3) bucket has a bucket-level Block Public Access (BPA) configuration.",
            resourceTypes: new Set(["AWS::S3::Bucket"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "HIGH"
        }, {
            identifier: "CT.S3.PR.10",
            name: "Require an Amazon S3 bucket to have server-side encryption configured using AWS KMS keys",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon S3"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AU-9", "CA-9(1)", "CM-3(6)", "SC-12(2)", "SC-13", "SC-28", "SC-28(1)", "SC-7(10)", "SI-7(6)"]], ["PCI DSS version 3.2.1", ["10.5", "10.5.2", "3.4", "3.5.3", "8.2.1"]]]),
            controlObjectives: new Set(["Encrypt data at rest"]),
            releaseDate: "2023-07-24",
            description: "This control checks whether default server-side encryption is enabled on S3 Buckets using AWS KMS.",
            resourceTypes: new Set(["AWS::S3::Bucket"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.S3.PR.11",
            name: "Require an Amazon S3 buckes to have versioning enabled",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon S3"]),
            frameworks: new Set(["CIS AWS Benchmark 1.4", "NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["CIS AWS Benchmark 1.4", ["2.1.3"]], ["NIST 800-53 Rev 5", ["AU-9(2)", "CP-10", "CP-6", "CP-6(1)", "CP-6(2)", "CP-9", "SC-5(2)", "SI-12", "SI-13(5)"]], ["PCI DSS version 3.2.1", ["10.5.5"]]]),
            controlObjectives: new Set(["Improve availability"]),
            releaseDate: "2023-07-24",
            description: "This control checks whether Amazon Simple Storage Service (Amazon S3) buckets have versioning enabled.",
            resourceTypes: new Set(["AWS::S3::Bucket"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "LOW"
        }, {
            identifier: "CT.S3.PR.2",
            name: "Require an Amazon S3 bucket to have server access logging configured",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon S3"]),
            frameworks: new Set(["CIS AWS Benchmark 1.4", "NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["CIS AWS Benchmark 1.4", ["3.6"]], ["NIST 800-53 Rev 5", ["AC-2(4)", "AC-4(26)", "AC-6(9)", "AU-10", "AU-12", "AU-2", "AU-3", "AU-6(3)", "AU-6(4)", "CA-7", "SC-7(9)", "SI-3(8)", "SI-4(20)", "SI-7(8)"]], ["PCI DSS version 3.2.1", ["10.1", "10.2.1", "10.2.3", "10.2.4", "10.3.1", "10.3.2", "10.3.3", "10.3.4", "10.3.5", "10.3.6", "2.2"]]]),
            controlObjectives: new Set(["Establish logging and monitoring"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether server access logging is enabled for your Amazon S3 bucket.",
            resourceTypes: new Set(["AWS::S3::Bucket"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.S3.PR.3",
            name: "Require an Amazon S3 buckes to have versioning configured and a lifecycle policy",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon S3"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AU-9(2)", "CP-10", "CP-6(2)", "CP-9", "SC-5(2)", "SI-13(5)"]], ["PCI DSS version 3.2.1", ["10.5.3", "10.5.4", "10.7", "3.1"]]]),
            controlObjectives: new Set(["Optimize costs", "Improve availability"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether your Amazon Simple Storage Service (Amazon S3) version-enabled bucket has a lifecycle policy configured.",
            resourceTypes: new Set(["AWS::S3::Bucket"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "HIGH"
        }, {
            identifier: "CT.S3.PR.4",
            name: "Require an Amazon S3 bucket to have event notifications configured",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon S3"]),
            frameworks: new Set(["NIST 800-53 Rev 5"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CA-7", "SI-3(8)", "SI-4", "SI-4(4)"]]]),
            controlObjectives: new Set(["Establish logging and monitoring"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether Amazon S3 Events Notifications are enabled on your Amazon S3 bucket.",
            resourceTypes: new Set(["AWS::S3::Bucket"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.S3.PR.5",
            name: "Require that an Amazon S3 bucket does not manage user access with an access control list (ACL)",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon S3"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-2(1)", "AC-3", "AC-3(15)", "AC-3(7)", "AC-6"]], ["PCI DSS version 3.2.1", ["7.1.1", "7.2.3"]]]),
            controlObjectives: new Set(["Enforce least privilege"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether your Amazon Simple Storage Service (Amazon S3) bucket allows user permissions through access control lists.",
            resourceTypes: new Set(["AWS::S3::Bucket"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.S3.PR.6",
            name: "Require an Amazon S3 bucket to have lifecycle policies configured",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon S3"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AU-9(2)", "CP-10", "CP-6(2)", "CP-9", "SC-5(2)", "SI-13(5)"]], ["PCI DSS version 3.2.1", ["10.5.3", "10.5.4", "10.7", "3.1"]]]),
            controlObjectives: new Set(["Optimize costs", "Improve availability"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether a lifecycle rule is configured for Amazon S3 buckets.",
            resourceTypes: new Set(["AWS::S3::Bucket"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "LOW"
        }, {
            identifier: "CT.S3.PR.7",
            name: "Require an Amazon S3 bucket to have server-side encryption configured",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon S3"]),
            frameworks: new Set(["CIS AWS Benchmark 1.4", "NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["CIS AWS Benchmark 1.4", ["2.1.1"]], ["NIST 800-53 Rev 5", ["AU-9", "CA-9(1)", "CM-3(6)", "SC-13", "SC-28", "SC-28(1)", "SC-7(10)", "SI-7(6)"]], ["PCI DSS version 3.2.1", ["10.5", "10.5.2", "2.2", "3.4", "8.2.1"]]]),
            controlObjectives: new Set(["Encrypt data at rest"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether default server-side encryption is enabled on your Amazon S3 bucket.",
            resourceTypes: new Set(["AWS::S3::Bucket"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.S3.PR.8",
            name: "Require that Amazon S3 bucket requests use Secure Sockets Layer",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon S3"]),
            frameworks: new Set(["CIS AWS Benchmark 1.4", "NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["CIS AWS Benchmark 1.4", ["2.1.2"]], ["NIST 800-53 Rev 5", ["AC-17(2)", "AC-4", "IA-5(1)", "SC-12(3)", "SC-13", "SC-23", "SC-23(3)", "SC-7(4)", "SC-8", "SC-8(1)", "SC-8(2)", "SI-7(6)"]], ["PCI DSS version 3.2.1", ["2.2", "4.1", "8.2.1"]]]),
            controlObjectives: new Set(["Encrypt data in transit"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether Amazon S3 bucket policies require requests to use Secure Socket Layer (SSL).",
            resourceTypes: new Set(["AWS::S3::BucketPolicy"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.S3.PR.9",
            name: "Require that an Amazon S3 bucket has S3 Object Lock activated",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon S3"]),
            frameworks: new Set(["NIST 800-53 Rev 5"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CP-6(2)"]]]),
            controlObjectives: new Set(["Protect data integrity"]),
            releaseDate: "2023-07-24",
            description: "This control checks whether Amazon Simple Storage Service (Amazon S3) buckets have been configured to use S3 Object Lock.",
            resourceTypes: new Set(["AWS::S3::Bucket"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.S3.1",
            name: "S3 Block Public Access setting should be enabled",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon S3"]),
            frameworks: new Set(["CIS AWS Benchmark 1.4", "NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["CIS AWS Benchmark 1.4", ["2.1.5"]], ["NIST 800-53 Rev 5", ["AC-21", "AC-3", "AC-3(7)", "AC-4", "AC-4(21)", "AC-6", "SC-7", "SC-7(11)", "SC-7(16)", "SC-7(20)", "SC-7(21)", "SC-7(3)", "SC-7(4)", "SC-7(9)"]], ["PCI DSS version 3.2.1", ["1.2.1", "1.3", "1.3.1", "1.3.2", "1.3.4", "1.3.6", "2.2", "2.2.2"]]]),
            controlObjectives: new Set(["Enforce least privilege"]),
            releaseDate: "2022-11-28",
            description: "This AWS control checks whether the following public access block settings are configured from account level: ignorePublicAcls: True, blockPublicPolicy: True, blockPublicAcls: True, restrictPublicBuckets: True.",
            resourceTypes: new Set(["AWS::S3::Account"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.S3.10",
            name: "S3 buckets with versioning enabled should have lifecycle policies configured",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon S3"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AU-9(2)", "CP-10", "CP-6(2)", "CP-9", "SC-5(2)", "SI-13(5)"]], ["PCI DSS version 3.2.1", ["10.5.3", "10.5.4", "10.7", "3.1"]]]),
            controlObjectives: new Set(["Optimize costs", "Improve availability"]),
            releaseDate: "2022-11-28",
            description: "This control checks if Amazon Simple Storage Service (Amazon S3) version enabled buckets have lifecycle policy configured. This rule fails if Amazon S3 lifecycle policy is not enabled.",
            resourceTypes: new Set(["AWS::S3::Bucket"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.S3.11",
            name: "S3 buckets should have event notifications enabled",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon S3"]),
            frameworks: new Set(["NIST 800-53 Rev 5"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CA-7", "SI-3(8)", "SI-4", "SI-4(4)"]]]),
            controlObjectives: new Set(["Establish logging and monitoring"]),
            releaseDate: "2022-11-28",
            description: "This control checks if S3 Event Notifications are enabled on an S3 bucket. This control fails if S3 Event Notifications are not enabled on a bucket.",
            resourceTypes: new Set(["AWS::S3::Bucket"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.S3.12",
            name: "S3 access control lists (ACLs) should not be used to manage user access to buckets",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon S3"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-2(1)", "AC-3", "AC-3(15)", "AC-3(7)", "AC-6"]], ["PCI DSS version 3.2.1", ["7.1.1", "7.2.3"]]]),
            controlObjectives: new Set(["Enforce least privilege"]),
            releaseDate: "2022-11-28",
            description: "This control checks if S3 buckets allow user permissions via access control lists (ACLs). This control fails if ACLs are configured for user access on S3 Bucket.",
            resourceTypes: new Set(["AWS::S3::Bucket"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.S3.13",
            name: "S3 buckets should have lifecycle policies configured",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon S3"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AU-9(2)", "CP-10", "CP-6(2)", "CP-9", "SC-5(2)", "SI-13(5)"]], ["PCI DSS version 3.2.1", ["10.5.3", "10.5.4", "10.7", "3.1"]]]),
            controlObjectives: new Set(["Optimize costs", "Improve availability"]),
            releaseDate: "2022-11-28",
            description: "This control checks if a lifecycle policy is configured for an S3 bucket. This control fails if the lifecycle policy is not configured for an S3 bucket.",
            resourceTypes: new Set(["AWS::S3::Bucket"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "LOW"
        }, {
            identifier: "SH.S3.2",
            name: "S3 buckets should prohibit public read access",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon S3"]),
            frameworks: new Set(["CIS AWS Benchmark 1.4", "NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["CIS AWS Benchmark 1.4", ["3.3"]], ["NIST 800-53 Rev 5", ["AC-21", "AC-3", "AC-3(7)", "AC-4", "AC-4(21)", "AC-6", "SC-7", "SC-7(11)", "SC-7(16)", "SC-7(20)", "SC-7(21)", "SC-7(3)", "SC-7(4)", "SC-7(9)"]], ["PCI DSS version 3.2.1", ["1.2.1", "1.3", "1.3.1", "1.3.2", "1.3.4", "1.3.6", "2.2", "2.2.2"]]]),
            controlObjectives: new Set(["Enforce least privilege"]),
            releaseDate: "2022-11-28",
            description: "This AWS control checks whether your S3 buckets allow public read access by evaluating the Block Public Access settings, the bucket policy, and the bucket access control list (ACL).",
            resourceTypes: new Set(["AWS::S3::Bucket"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "CRITICAL"
        }, {
            identifier: "SH.S3.3",
            name: "S3 buckets should prohibit public write access",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon S3"]),
            frameworks: new Set(["CIS AWS Benchmark 1.4", "NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["CIS AWS Benchmark 1.4", ["3.3"]], ["NIST 800-53 Rev 5", ["AC-21", "AC-3", "AC-3(7)", "AC-4", "AC-4(21)", "AC-6", "SC-7", "SC-7(11)", "SC-7(16)", "SC-7(20)", "SC-7(21)", "SC-7(3)", "SC-7(4)", "SC-7(9)"]], ["PCI DSS version 3.2.1", ["1.2.1", "1.3", "1.3.1", "1.3.2", "1.3.4", "1.3.6", "2.2", "2.2.2"]]]),
            controlObjectives: new Set(["Enforce least privilege"]),
            releaseDate: "2022-11-28",
            description: "This AWS control checks whether your S3 buckets allow public write access by evaluating the Block Public Access settings, the bucket policy, and the bucket access control list (ACL).",
            resourceTypes: new Set(["AWS::S3::Bucket"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "CRITICAL"
        }, {
            identifier: "SH.S3.4",
            name: "S3 buckets should have server-side encryption enabled",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon S3"]),
            frameworks: new Set(["CIS AWS Benchmark 1.4", "NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["CIS AWS Benchmark 1.4", ["2.1.1"]], ["NIST 800-53 Rev 5", ["AU-9", "CA-9(1)", "CM-3(6)", "SC-13", "SC-28", "SC-28(1)", "SC-7(10)", "SI-7(6)"]], ["PCI DSS version 3.2.1", ["10.5", "10.5.2", "2.2", "3.4", "8.2.1"]]]),
            controlObjectives: new Set(["Encrypt data at rest"]),
            releaseDate: "2022-11-28",
            description: "This AWS control checks that your Amazon S3 bucket either has Amazon S3 default encryption enabled or that the S3 bucket policy explicitly denies put-object requests without server side encryption.",
            resourceTypes: new Set(["AWS::S3::Bucket"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.S3.5",
            name: "S3 buckets should require requests to use Secure Socket Layer",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon S3"]),
            frameworks: new Set(["CIS AWS Benchmark 1.4", "NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["CIS AWS Benchmark 1.4", ["2.1.2"]], ["NIST 800-53 Rev 5", ["AC-17(2)", "AC-4", "IA-5(1)", "SC-12(3)", "SC-13", "SC-23", "SC-23(3)", "SC-7(4)", "SC-8", "SC-8(1)", "SC-8(2)", "SI-7(6)"]], ["PCI DSS version 3.2.1", ["2.2", "4.1", "8.2.1"]]]),
            controlObjectives: new Set(["Encrypt data in transit"]),
            releaseDate: "2022-11-28",
            description: "This AWS control checks whether S3 buckets have policies that require requests to use Secure Socket Layer (SSL).",
            resourceTypes: new Set(["AWS::S3::Bucket"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.S3.6",
            name: "S3 permissions granted to other AWS accounts in bucket policies should be restricted",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon S3"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CA-9(1)", "CM-2"]], ["PCI DSS version 3.2.1", ["7.1.1", "7.2.3"]]]),
            controlObjectives: new Set(["Enforce least privilege"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether the S3 bucket policy allows sensitive bucket-level or object-level actions from a principal in another AWS account. The control fails if any of the following actions are allowed in the S3 bucket policy for a principal in another AWS account: s3:DeleteBucketPolicy, s3:PutBucketAcl, s3:PutBucketPolicy, s3:PutObjectAcl, and s3:PutEncryptionConfiguration.",
            resourceTypes: new Set(["AWS::S3::Bucket"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "HIGH"
        }, {
            identifier: "SH.S3.8",
            name: "S3 Block Public Access setting should be enabled at the bucket-level",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon S3"]),
            frameworks: new Set(["CIS AWS Benchmark 1.4", "NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["CIS AWS Benchmark 1.4", ["2.1.5"]], ["NIST 800-53 Rev 5", ["AC-21", "AC-3", "AC-3(7)", "AC-4", "AC-4(21)", "AC-6", "SC-7", "SC-7(11)", "SC-7(16)", "SC-7(20)", "SC-7(21)", "SC-7(3)", "SC-7(4)", "SC-7(9)"]], ["PCI DSS version 3.2.1", ["1.2.1", "1.3", "1.3.1", "1.3.2", "1.3.4", "1.3.6", "2.2.2"]]]),
            controlObjectives: new Set(["Enforce least privilege"]),
            releaseDate: "2022-11-28",
            description: 'This control checks if Amazon S3 buckets have bucket level public access blocks applied. This control fails if any of the bucket level settings are set to "false" public: ignorePublicAcls, blockPublicPolicy, blockPublicAcls, restrictPublicBuckets.',
            resourceTypes: new Set(["AWS::S3::Bucket"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "HIGH"
        }, {
            identifier: "SH.S3.9",
            name: "S3 bucket server access logging should be enabled",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon S3"]),
            frameworks: new Set(["CIS AWS Benchmark 1.4", "NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["CIS AWS Benchmark 1.4", ["3.6"]], ["NIST 800-53 Rev 5", ["AC-2(4)", "AC-4(26)", "AC-6(9)", "AU-10", "AU-12", "AU-2", "AU-3", "AU-6(3)", "AU-6(4)", "CA-7", "SC-7(9)", "SI-3(8)", "SI-4(20)", "SI-7(8)"]], ["PCI DSS version 3.2.1", ["10.1", "10.2.1", "10.2.3", "10.2.4", "10.3.1", "10.3.2", "10.3.3", "10.3.4", "10.3.5", "10.3.6", "2.2"]]]),
            controlObjectives: new Set(["Establish logging and monitoring"]),
            releaseDate: "2022-11-28",
            description: "This control checks if an Amazon S3 Bucket has server access logging enabled to a chosen target bucket.",
            resourceTypes: new Set(["AWS::S3::Bucket"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "AWS-GR_AUDIT_BUCKET_DELETION_PROHIBITED",
            name: "Disallow deletion of log archive",
            behavior: "PREVENTIVE",
            implementationTypes: new Set(["Service control policy (SCP)"]),
            services: new Set(["Amazon S3"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CA-9(1)", "CM-2", "CM-2(2)", "CM-3", "SC-5(2)", "SI-12"]], ["PCI DSS version 3.2.1", ["2.2"]]]),
            controlObjectives: new Set(["Protect data integrity"]),
            releaseDate: "2019-10-14",
            description: "Disallow deletion of Amazon S3 buckets created by AWS Control Tower in the log archive account.",
            resourceTypes: new Set(["AWS::S3::Bucket"]),
            controlOwner: "AWS Control Tower",
            guidance: "Mandatory",
            severity: "CRITICAL"
        }, {
            identifier: "AWS-GR_AUDIT_BUCKET_ENCRYPTION_ENABLED",
            name: "Enable encryption at rest for log archive",
            behavior: "PREVENTIVE",
            implementationTypes: new Set(["Service control policy (SCP)"]),
            services: new Set(["Amazon S3"]),
            frameworks: new Set(["CIS AWS Benchmark 1.4", "NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["CIS AWS Benchmark 1.4", ["2.1.1"]], ["NIST 800-53 Rev 5", ["AU-9", "CA-9(1)", "CM-3(6)", "SC-13", "SC-28", "SC-28(1)", "SC-7(10)", "SI-7(6)"]], ["PCI DSS version 3.2.1", ["10.5", "10.5.2", "2.2", "3.4", "8.2.1"]]]),
            controlObjectives: new Set(["Encrypt data at rest"]),
            releaseDate: "2019-04-30",
            description: "Protect the integrity of your log archive through encryption at rest using server side encryption (SSE) with KMS customer-created master keys (CMK).",
            resourceTypes: new Set(["AWS::S3::Bucket"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "AWS-GR_AUDIT_BUCKET_LOGGING_ENABLED",
            name: "Enable access logging for log archive",
            behavior: "PREVENTIVE",
            implementationTypes: new Set(["Service control policy (SCP)"]),
            services: new Set(["Amazon S3"]),
            frameworks: new Set(["CIS AWS Benchmark 1.4", "NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["CIS AWS Benchmark 1.4", ["3.6"]], ["NIST 800-53 Rev 5", ["AC-2(4)", "AC-4(26)", "AC-6(9)", "AU-10", "AU-12", "AU-2", "AU-3", "AU-6(3)", "AU-6(4)", "CA-7", "SC-7(9)", "SI-3(8)", "SI-4(20)", "SI-7(8)"]], ["PCI DSS version 3.2.1", ["10.1", "10.2.1", "10.2.3", "10.2.4", "10.3.1", "2.2"]]]),
            controlObjectives: new Set(["Establish logging and monitoring"]),
            releaseDate: "2019-04-30",
            description: "Track log archive access requests using S3 bucket access logging.",
            resourceTypes: new Set(["AWS::S3::Bucket"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "AWS-GR_AUDIT_BUCKET_POLICY_CHANGES_PROHIBITED",
            name: "Disallow policy changes to log archive",
            behavior: "PREVENTIVE",
            implementationTypes: new Set(["Service control policy (SCP)"]),
            services: new Set(["Amazon S3"]),
            frameworks: new Set(["NIST 800-53 Rev 5"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CM-2", "CM-2(2)", "CM-3", "CM-3(8)", "SA-8(19)"]]]),
            controlObjectives: new Set(["Protect data integrity"]),
            releaseDate: "2019-04-30",
            description: "Protect the integrity of your log archive by ensuring no policy changes happen to the S3 bucket by any user.",
            resourceTypes: new Set(["AWS::S3::Bucket"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "AWS-GR_AUDIT_BUCKET_RETENTION_POLICY",
            name: "Set a retention policy for log archive",
            behavior: "PREVENTIVE",
            implementationTypes: new Set(["Service control policy (SCP)"]),
            services: new Set(["Amazon S3"]),
            frameworks: new Set(["NIST 800-53 Rev 5"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["SI-12"]]]),
            controlObjectives: new Set(["Improve resiliency"]),
            releaseDate: "2019-04-30",
            description: "Limit data retention in the log archive using a retention policy that defaults to 365 days.",
            resourceTypes: new Set(["AWS::S3::Bucket"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "AWS-GR_CT_AUDIT_BUCKET_ENCRYPTION_CHANGES_PROHIBITED",
            name: "Disallow Changes to Encryption Configuration for AWS Control Tower Created S3 Buckets in Log Archive",
            behavior: "PREVENTIVE",
            implementationTypes: new Set(["Service control policy (SCP)"]),
            services: new Set(["Amazon S3"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CM-2", "CM-2(2)", "CM-3", "CM-3(8)", "SA-8(19)"]], ["PCI DSS version 3.2.1", ["10.5.2"]]]),
            controlObjectives: new Set(["Protect configurations"]),
            releaseDate: "2021-04-07",
            description: "Protect the integrity of your log archive by ensuring that no encryption configuration changes occur to the S3 buckets created by AWS Control Tower.",
            resourceTypes: new Set(["AWS::S3::Bucket"]),
            controlOwner: "AWS Control Tower",
            guidance: "Mandatory",
            severity: "CRITICAL"
        }, {
            identifier: "AWS-GR_CT_AUDIT_BUCKET_LIFECYCLE_CONFIGURATION_CHANGES_PROHIBITED",
            name: "Disallow Changes to Lifecycle Configuration for AWS Control Tower Created S3 Buckets in Log Archive",
            behavior: "PREVENTIVE",
            implementationTypes: new Set(["Service control policy (SCP)"]),
            services: new Set(["Amazon S3"]),
            frameworks: new Set(["NIST 800-53 Rev 5"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CM-2", "CM-2(2)", "CM-3", "CM-3(8)", "SA-8(19)"]]]),
            controlObjectives: new Set(["Protect configurations"]),
            releaseDate: "2021-04-07",
            description: "Protect the integrity of your log archive by ensuring that no lifecycle configuration changes occur to the S3 buckets created by AWS Control Tower.",
            resourceTypes: new Set(["AWS::S3::Bucket"]),
            controlOwner: "AWS Control Tower",
            guidance: "Mandatory",
            severity: "CRITICAL"
        }, {
            identifier: "AWS-GR_CT_AUDIT_BUCKET_LOGGING_CONFIGURATION_CHANGES_PROHIBITED",
            name: "Disallow Changes to Logging Configuration for AWS Control Tower Created S3 Buckets in Log Archive",
            behavior: "PREVENTIVE",
            implementationTypes: new Set(["Service control policy (SCP)"]),
            services: new Set(["Amazon S3"]),
            frameworks: new Set(["NIST 800-53 Rev 5"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CM-2", "CM-2(2)", "CM-3", "CM-3(8)", "SA-8(19)"]]]),
            controlObjectives: new Set(["Protect configurations"]),
            releaseDate: "2021-04-07",
            description: "Protect the integrity of your log archive by ensuring that no logging configuration changes occur to the S3 buckets created by AWS Control Tower.",
            resourceTypes: new Set(["AWS::S3::Bucket"]),
            controlOwner: "AWS Control Tower",
            guidance: "Mandatory",
            severity: "CRITICAL"
        }, {
            identifier: "AWS-GR_CT_AUDIT_BUCKET_POLICY_CHANGES_PROHIBITED",
            name: "Disallow Changes to Bucket Policy for AWS Control Tower Created S3 Buckets in Log Archive",
            behavior: "PREVENTIVE",
            implementationTypes: new Set(["Service control policy (SCP)"]),
            services: new Set(["Amazon S3"]),
            frameworks: new Set(["NIST 800-53 Rev 5"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CM-2", "CM-2(2)", "CM-3", "CM-3(8)", "SA-8(19)"]]]),
            controlObjectives: new Set(["Protect configurations"]),
            releaseDate: "2021-04-07",
            description: "Protect the integrity of your log archive by ensuring that no bucket policy changes occur to the S3 buckets created by AWS Control Tower.",
            resourceTypes: new Set(["AWS::S3::Bucket"]),
            controlOwner: "AWS Control Tower",
            guidance: "Mandatory",
            severity: "CRITICAL"
        }, {
            identifier: "AWS-GR_RESTRICT_S3_CROSS_REGION_REPLICATION",
            name: "Disallow cross region replication for S3 buckets",
            behavior: "PREVENTIVE",
            implementationTypes: new Set(["Service control policy (SCP)"]),
            services: new Set(["Amazon S3"]),
            frameworks: new Set(["NIST 800-53 Rev 5"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CM-2", "CM-2(2)", "CM-3", "CM-3(8)", "SA-8(19)"]]]),
            controlObjectives: new Set(["Improve resiliency"]),
            releaseDate: "2019-07-30",
            description: "Contain the location of your S3 data to a single region by disabling any automatic, asynchronous copying of objects across buckets to other AWS Regions.",
            resourceTypes: new Set(["AWS::S3::Bucket"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "AWS-GR_RESTRICT_S3_DELETE_WITHOUT_MFA",
            name: "Disallow delete actions on S3 buckets without MFA",
            behavior: "PREVENTIVE",
            implementationTypes: new Set(["Service control policy (SCP)"]),
            services: new Set(["Amazon S3"]),
            frameworks: new Set(["CIS AWS Benchmark 1.4", "NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["CIS AWS Benchmark 1.4", ["2.1.3"]], ["NIST 800-53 Rev 5", ["CA-9(1)", "CM-2", "CM-2(2)", "CM-3", "SC-5(2)", "SI-12"]], ["PCI DSS version 3.2.1", ["2.2"]]]),
            controlObjectives: new Set(["Protect data integrity"]),
            releaseDate: "2019-07-30",
            description: "Protect your S3 buckets by requiring multi-factor authentication (MFA) for delete actions. MFA adds an extra authentication code on top of a user name and password.",
            resourceTypes: new Set(["AWS::S3::Bucket"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "AWS-GR_SAGEMAKER_NOTEBOOK_NO_DIRECT_INTERNET_ACCESS",
            name: "Detect whether an Amazon SageMaker notebook instance allows direct internet access",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon SageMaker"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-21", "AC-3", "AC-3(7)", "AC-4", "AC-4(21)", "AC-6", "SC-7", "SC-7(11)", "SC-7(16)", "SC-7(20)", "SC-7(21)", "SC-7(3)", "SC-7(4)", "SC-7(9)"]], ["PCI DSS version 3.2.1", ["1.2.1", "1.3", "1.3.1", "1.3.2", "1.3.4", "1.3.6", "2.2.2"]]]),
            controlObjectives: new Set(["Limit network access"]),
            releaseDate: "2021-11-30",
            description: "Detects whether direct internet access is allowed for an Amazon SageMaker notebook instance. The rule is NON_COMPLIANT if Amazon SageMaker notebook instances allow direct internet access.",
            resourceTypes: new Set(["AWS::SageMaker::NotebookInstance"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.SAGEMAKER.PR.1",
            name: "Require an Amazon SageMaker notebook instance to prevent direct internet access",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon SageMaker"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-21", "AC-3", "AC-3(7)", "AC-4", "AC-4(21)", "AC-6", "SC-7", "SC-7(11)", "SC-7(16)", "SC-7(20)", "SC-7(21)", "SC-7(3)", "SC-7(4)", "SC-7(9)"]], ["PCI DSS version 3.2.1", ["1.2.1", "1.3", "1.3.1", "1.3.2", "1.3.4", "1.3.6", "2.2.2"]]]),
            controlObjectives: new Set(["Limit network access"]),
            releaseDate: "2023-05-19",
            description: "This control checks whether direct internet access is disabled for an Amazon SageMaker notebook instance.",
            resourceTypes: new Set(["AWS::SageMaker::NotebookInstance"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "HIGH"
        }, {
            identifier: "CT.SAGEMAKER.PR.2",
            name: "Require Amazon SageMaker notebook instances to be deployed within a custom Amazon VPC",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon SageMaker"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-21", "AC-3", "AC-3(7)", "AC-4", "AC-4(21)", "AC-6", "SC-7", "SC-7(11)", "SC-7(16)", "SC-7(20)", "SC-7(21)", "SC-7(3)", "SC-7(4)", "SC-7(9)"]], ["PCI DSS version 3.2.1", ["1.2.1", "1.3", "1.3.1", "1.3.2", "1.3.4", "1.3.6", "2.2.2"]]]),
            controlObjectives: new Set(["Limit network access"]),
            releaseDate: "2023-05-19",
            description: "This control checks whether an Amazon SageMaker notebook instance is configured to launch within a custom Amazon VPC.",
            resourceTypes: new Set(["AWS::SageMaker::NotebookInstance"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "HIGH"
        }, {
            identifier: "CT.SAGEMAKER.PR.3",
            name: "Require Amazon SageMaker notebook instances to have root access disabled",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon SageMaker"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-2(1)", "AC-3(15)", "AC-3(7)", "AC-6", "AC-6(10)", "AC-6(2)"]], ["PCI DSS version 3.2.1", ["2.2", "7.1.1", "7.1.2", "7.2.1", "7.2.2", "8.1.1"]]]),
            controlObjectives: new Set(["Enforce least privilege"]),
            releaseDate: "2023-05-19",
            description: "This control checks whether Amazon SageMaker notebook instances allow root access.",
            resourceTypes: new Set(["AWS::SageMaker::NotebookInstance"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "HIGH"
        }, {
            identifier: "SH.SageMaker.1",
            name: "Amazon SageMaker notebook instances should not have direct internet access",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon SageMaker"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-21", "AC-3", "AC-3(7)", "AC-4", "AC-4(21)", "AC-6", "SC-7", "SC-7(11)", "SC-7(16)", "SC-7(20)", "SC-7(21)", "SC-7(3)", "SC-7(4)", "SC-7(9)"]], ["PCI DSS version 3.2.1", ["1.2.1", "1.3", "1.3.1", "1.3.2", "1.3.4", "1.3.6", "2.2.2"]]]),
            controlObjectives: new Set(["Limit network access"]),
            releaseDate: "2022-11-28",
            description: "This AWS control checks whether direct internet access is disabled for an Amazon SageMaker notebook instance by examining the DirectInternetAccess field is disabled for an Amazon SageMaker notebook instance.",
            resourceTypes: new Set(["AWS::SageMaker::NotebookInstance"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "HIGH"
        }, {
            identifier: "SH.SageMaker.2",
            name: "SageMaker notebook instances should be launched in a custom VPC",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon SageMaker"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-21", "AC-3", "AC-3(7)", "AC-4", "AC-4(21)", "AC-6", "SC-7", "SC-7(11)", "SC-7(16)", "SC-7(20)", "SC-7(21)", "SC-7(3)", "SC-7(4)", "SC-7(9)"]], ["PCI DSS version 3.2.1", ["1.2.1", "1.3", "1.3.1", "1.3.2", "1.3.4", "1.3.6", "2.2.2"]]]),
            controlObjectives: new Set(["Limit network access"]),
            releaseDate: "2023-06-12",
            description: "This control checks if an Amazon SageMaker notebook instance is launched within a custom VPC. The control fails if a SageMaker notebook instance is not launched within a custom VPC.",
            resourceTypes: new Set(["AWS::SageMaker::NotebookInstance"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "HIGH"
        }, {
            identifier: "SH.SageMaker.3",
            name: "Users should not have root access to SageMaker notebook instances",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon SageMaker"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-2(1)", "AC-3(15)", "AC-3(7)", "AC-6", "AC-6(10)", "AC-6(2)"]], ["PCI DSS version 3.2.1", ["2.2", "7.1.1", "7.1.2", "7.2.1", "7.2.2", "8.1.1"]]]),
            controlObjectives: new Set(["Enforce least privilege"]),
            releaseDate: "2023-06-12",
            description: "This control checks whether root access is turned off for Amazon SageMaker notebook instances. The control fails if root access is turned on for a SageMaker notebook instance.",
            resourceTypes: new Set(["AWS::SageMaker::NotebookInstance"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "HIGH"
        }, {
            identifier: "CT.SNS.PR.1",
            name: "Require any Amazon SNS topic to have encryption at rest configured using AWS KMS",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon SNS"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CA-9(1)", "CM-3(6)", "SC-13", "SC-28", "SC-28(1)", "SC-7(10)", "SI-7(6)"]], ["PCI DSS version 3.2.1", ["3.4", "8.2.1"]]]),
            controlObjectives: new Set(["Encrypt data at rest"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether an Amazon SNS topic is encrypted with AWS KMS.",
            resourceTypes: new Set(["AWS::SNS::Topic"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.SNS.1",
            name: "SNS topics should be encrypted at-rest using AWS KMS",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon SNS"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CA-9(1)", "CM-3(6)", "SC-13", "SC-28", "SC-28(1)", "SC-7(10)", "SI-7(6)"]], ["PCI DSS version 3.2.1", ["3.4", "8.2.1"]]]),
            controlObjectives: new Set(["Encrypt data at rest"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether an Amazon SNS topic is encrypted at rest using AWS KMS.",
            resourceTypes: new Set(["AWS::SNS::Topic"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.SNS.2",
            name: "Logging of delivery status should be enabled for notification messages sent to a topic",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon SNS"]),
            frameworks: new Set(["PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["PCI DSS version 3.2.1", ["10.1"]]]),
            controlObjectives: new Set(["Establish logging and monitoring"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether logging is enabled for the delivery status of notification messages sent to a topic for the endpoints. This control fails if the delivery status notification for messages is not enabled.",
            resourceTypes: new Set(["AWS::SNS::Topic"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "AWS-GR_SNS_CHANGE_PROHIBITED",
            name: "Disallow changes to Amazon SNS set up by Control Tower",
            behavior: "PREVENTIVE",
            implementationTypes: new Set(["Service control policy (SCP)"]),
            services: new Set(["Amazon SNS"]),
            frameworks: new Set(["NIST 800-53 Rev 5"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CM-2", "CM-2(2)", "CM-3", "CM-3(8)", "SA-8(19)"]]]),
            controlObjectives: new Set(["Protect configurations"]),
            releaseDate: "2019-04-24",
            description: "Protect the integrity of Amazon SNS notification settings set up by Control Tower.",
            resourceTypes: new Set(["AWS::SNS::Topic"]),
            controlOwner: "AWS Control Tower",
            guidance: "Mandatory",
            severity: "CRITICAL"
        }, {
            identifier: "AWS-GR_SNS_SUBSCRIPTION_CHANGE_PROHIBITED",
            name: "Disallow changes to Amazon SNS subscriptions set up by Control Tower",
            behavior: "PREVENTIVE",
            implementationTypes: new Set(["Service control policy (SCP)"]),
            services: new Set(["Amazon SNS"]),
            frameworks: new Set(["NIST 800-53 Rev 5"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CM-2", "CM-2(2)", "CM-3", "CM-3(8)", "SA-8(19)"]]]),
            controlObjectives: new Set(["Protect configurations"]),
            releaseDate: "2019-04-24",
            description: "Protect the integrity of Amazon SNS subscriptions set up by Control Tower to trigger notifications for Config Rule compliance changes.",
            resourceTypes: new Set(["AWS::SNS::Subscription"]),
            controlOwner: "AWS Control Tower",
            guidance: "Mandatory",
            severity: "CRITICAL"
        }, {
            identifier: "CT.SQS.PR.1",
            name: "Require any Amazon SQS queue to have a dead-letter queue configured",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon SQS"]),
            frameworks: new Set([]),
            frameworksIds: new Map,
            controlObjectives: new Set(["Improve resiliency"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether an Amazon SQS queue is configured to use a dead-letter queue.",
            resourceTypes: new Set(["AWS::SQS::Queue"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "HIGH"
        }, {
            identifier: "CT.SQS.PR.2",
            name: "Require any Amazon SQS queue to have encryption at rest configured",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Amazon SQS"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CA-9(1)", "CM-3(6)", "SC-13", "SC-28", "SC-28(1)", "SC-7(10)", "SI-7(6)"]], ["PCI DSS version 3.2.1", ["3.4"]]]),
            controlObjectives: new Set(["Encrypt data at rest"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether an Amazon SQS queue is encrypted at rest.",
            resourceTypes: new Set(["AWS::SQS::Queue"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.SQS.1",
            name: "Amazon SQS queues should be encrypted at rest",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon SQS"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CA-9(1)", "CM-3(6)", "SC-13", "SC-28", "SC-28(1)", "SC-7(10)", "SI-7(6)"]], ["PCI DSS version 3.2.1", ["3.4"]]]),
            controlObjectives: new Set(["Encrypt data at rest"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether Amazon SQS queues are encrypted at rest.",
            resourceTypes: new Set(["AWS::SQS::Queue"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.EC2.20",
            name: "Both VPN tunnels for an AWS Site-to-Site VPN connection should be up",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Amazon VPC"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CP-10", "CP-6(2)", "SC-36", "SC-5(2)", "SI-13(5)"]], ["PCI DSS version 3.2.1", ["1.2.1", "1.3.2"]]]),
            controlObjectives: new Set(["Improve availability"]),
            releaseDate: "2022-11-28",
            description: "This control checks that both VPN tunnels provided by AWS Site-to-Site VPN are in UP status. The control fails if one or both tunnels are in DOWN status.",
            resourceTypes: new Set(["AWS::EC2::VPNConnection"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.Account.1",
            name: "Security contact information should be provided for an AWS account.",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["AWS Account Management"]),
            frameworks: new Set(["CIS AWS Benchmark 1.4", "NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["CIS AWS Benchmark 1.4", ["1.2"]], ["NIST 800-53 Rev 5", ["CM-2", "CM-2(2)"]], ["PCI DSS version 3.2.1", ["2.2"]]]),
            controlObjectives: new Set(["Establish logging and monitoring"]),
            releaseDate: "2023-06-12",
            description: "This control checks if an Amazon Web Services (AWS) account has security contact information. The control fails if security contact information is not provided for the account.",
            resourceTypes: new Set(["AWS::::Account"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.APPSYNC.PR.1",
            name: "Require an AWS AppSync GraphQL API to have logging enabled",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["AWS AppSync"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-4(26)", "AU-10", "AU-12", "AU-2", "AU-3", "AU-6(3)", "AU-6(4)", "CA-7", "SC-7(9)", "SI-7(8)"]], ["PCI DSS version 3.2.1", ["10.1", "10.3.1", "10.3.2", "10.3.3", "10.3.4", "10.3.5", "10.3.6"]]]),
            controlObjectives: new Set(["Establish logging and monitoring"]),
            releaseDate: "2023-07-24",
            description: "This control checks whether an AWS AppSync GraphQL API has been configured to send GraphQL operations and tracing logs to Amazon CloudWatch Logs.",
            resourceTypes: new Set(["AWS::AppSync::GraphQLApi"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.AppSync.2",
            name: "AWS AppSync should have request-level and field-level logging turned on",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["AWS AppSync"]),
            frameworks: new Set([]),
            frameworksIds: new Map,
            controlObjectives: new Set(["Establish logging and monitoring"]),
            releaseDate: "<UPDATE>",
            description: "This control checks whether an AWS AppSync API has request-level and field-level logging turned on. The control fails if request-level logging isn't turned on or if the field resolver log level is set to \u2018None\u2019.",
            resourceTypes: new Set(["AWS::AppSync::GraphQLApi"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.ACM.PR.1",
            name: "Require AWS Private CA certificate to have a single domain name",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["AWS Certificate Manager"]),
            frameworks: new Set([]),
            frameworksIds: new Map,
            controlObjectives: new Set(["Protect configurations"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether AWS Private CA certificates have wildcard domain names instead of single domain names.",
            resourceTypes: new Set(["AWS::CertificateManager::Certificate"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.ACM.1",
            name: "Imported and ACM-issued certificates should be renewed after a specified time period",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["AWS Certificate Manager"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["SC-28(3)", "SC-7(16)"]], ["PCI DSS version 3.2.1", ["4.1"]]]),
            controlObjectives: new Set(["Encrypt data in transit"]),
            releaseDate: "2022-11-28",
            description: "This AWS control checks whether ACM Certificates in your account are marked for expiration within a specified time period. Certificates provided by ACM are automatically renewed. ACM does not automatically renew certificates that you import.",
            resourceTypes: new Set(["AWS::ACM::Certificate"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.ACM.2",
            name: "RSA certificates managed by ACM should use a key length of at least 2,048 bits",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["AWS Certificate Manager"]),
            frameworks: new Set([]),
            frameworksIds: new Map,
            controlObjectives: new Set(["Encrypt data in transit"]),
            releaseDate: "<UPDATE>",
            description: "This control checks whether RSA certificates managed by AWS Certificate Manager use a key length of at least 2,048 bits. The control fails if the key length is smaller than 2,048 bits.",
            resourceTypes: new Set(["AWS::ACM::Certificate"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "HIGH"
        }, {
            identifier: "SH.CloudFormation.1",
            name: "CloudFormation stacks should be integrated with Simple Notification Service (SNS)",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["AWS CloudFormation"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["SI-4(12)", "SI-4(5)"]], ["PCI DSS version 3.2.1", ["11.5"]]]),
            controlObjectives: new Set(["Establish logging and monitoring"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether your CloudFormation stacks are sending event notifications to SNS topic. This control fails if CloudFormation stacks are not sending event notifications to an SNS topic.",
            resourceTypes: new Set(["AWS::CloudFormation::Stack"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "LOW"
        }, {
            identifier: "CT.CLOUDFORMATION.PR.1",
            name: "Disallow management of resource types, modules, and hooks within the AWS CloudFormation registry",
            behavior: "PREVENTIVE",
            implementationTypes: new Set(["Service control policy (SCP)"]),
            services: new Set(["AWS CloudFormation"]),
            frameworks: new Set([]),
            frameworksIds: new Map,
            controlObjectives: new Set(["Protect configurations"]),
            releaseDate: "2022-11-28",
            description: "This control disallows management of the following extension types in the AWS CloudFormation registry: resource types, modules, and hooks.",
            resourceTypes: new Set(["AWS::CloudFormation::HookDefaultVersion", "AWS::CloudFormation::HookTypeConfig", "AWS::CloudFormation::HookVersion", "AWS::CloudFormation::ModuleDefaultVersion", "AWS::CloudFormation::ModuleVersion", "AWS::CloudFormation::ResourceDefaultVersion", "AWS::CloudFormation::ResourceVersion"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "CRITICAL"
        }, {
            identifier: "AWS-GR_DETECT_CLOUDTRAIL_ENABLED_ON_MEMBER_ACCOUNTS",
            name: "Detect whether an account has AWS CloudTrail or CloudTrail Lake enabled.",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["AWS CloudTrail"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-2(4)", "AC-4(26)", "AC-6(9)", "AU-10", "AU-12", "AU-14(1)", "AU-2", "AU-3", "AU-6(3)", "AU-6(4)", "AU-9", "CA-7", "SA-8(22)", "SC-7(9)", "SI-3(8)", "SI-4(20)", "SI-7(8)"]], ["PCI DSS version 3.2.1", ["10.1", "10.2.1", "10.2.2", "10.2.3", "10.2.4", "10.2.5", "10.2.6", "10.2.7", "10.3.1", "10.3.2", "10.3.3", "10.3.4", "10.3.5", "10.3.6", "10.5.3", "10.5.4"]]]),
            controlObjectives: new Set(["Establish logging and monitoring"]),
            releaseDate: "2022-07-12",
            description: "Detects whether an account has AWS CloudTrail or CloudTrail Lake enabled. The rule is NON_COMPLIANT if either CloudTrail or CloudTrail Lake is not enabled in an account.",
            resourceTypes: new Set(["AWS::CloudTrail::Trail"]),
            controlOwner: "AWS Control Tower",
            guidance: "Strongly-Recommended",
            severity: "HIGH"
        }, {
            identifier: "AWS-GR_DETECT_CLOUDTRAIL_ENABLED_ON_SHARED_ACCOUNTS",
            name: "Detect whether a shared account in the Security organizational unit has AWS CloudTrail or CloudTrail Lake enabled.",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["AWS CloudTrail"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-2(4)", "AC-4(26)", "AC-6(9)", "AU-10", "AU-12", "AU-14(1)", "AU-2", "AU-3", "AU-6(3)", "AU-6(4)", "AU-9", "CA-7", "SA-8(22)", "SC-7(9)", "SI-3(8)", "SI-4(20)", "SI-7(8)"]], ["PCI DSS version 3.2.1", ["10.1", "10.2.1", "10.2.2", "10.2.3", "10.2.4", "10.2.5", "10.2.6", "10.2.7", "10.3.1", "10.3.2", "10.3.3", "10.3.4", "10.3.5", "10.3.6", "10.5.3", "10.5.4"]]]),
            controlObjectives: new Set(["Establish logging and monitoring"]),
            releaseDate: "2022-07-12",
            description: "Detects whether a shared account in the Security organizational unit has AWS CloudTrail or CloudTrail Lake enabled. The rule is NON_COMPLIANT if either CloudTrail or CloudTrail Lake is not enabled in an account.",
            resourceTypes: new Set(["AWS::CloudTrail::Trail"]),
            controlOwner: "AWS Control Tower",
            guidance: "Mandatory",
            severity: "CRITICAL"
        }, {
            identifier: "CT.CLOUDTRAIL.PR.1",
            name: "Require an AWS CloudTrail trail to have encryption at rest activated",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["AWS CloudTrail"]),
            frameworks: new Set(["CIS AWS Benchmark 1.4", "NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["CIS AWS Benchmark 1.4", ["3.7"]], ["NIST 800-53 Rev 5", ["AU-9", "CA-9(1)", "CM-3(6)", "SC-13", "SC-28", "SC-28(1)", "SC-7(10)", "SI-7(6)"]], ["PCI DSS version 3.2.1", ["10.5", "10.5.2", "2.2", "3.4"]]]),
            controlObjectives: new Set(["Encrypt data at rest"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether your AWS CloudTrail is configured to use the server-side encryption (SSE) AWS KMS key encryption.",
            resourceTypes: new Set(["AWS::CloudTrail::Trail"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "HIGH"
        }, {
            identifier: "CT.CLOUDTRAIL.PR.2",
            name: "Require an AWS CloudTrail trail to have log file validation activated",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["AWS CloudTrail"]),
            frameworks: new Set(["CIS AWS Benchmark 1.4", "NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["CIS AWS Benchmark 1.4", ["3.2"]], ["NIST 800-53 Rev 5", ["AU-9", "SI-4", "SI-7(1)", "SI-7(3)", "SI-7(7)"]], ["PCI DSS version 3.2.1", ["10.5.5", "11.5", "2.2"]]]),
            controlObjectives: new Set(["Protect data integrity"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether log file integrity validation is enabled on an AWS CloudTrail trail.",
            resourceTypes: new Set(["AWS::CloudTrail::Trail"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "HIGH"
        }, {
            identifier: "CT.CLOUDTRAIL.PR.3",
            name: "Require an AWS CloudTrail trail to have an Amazon CloudWatch log group configuration",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["AWS CloudTrail"]),
            frameworks: new Set(["CIS AWS Benchmark 1.4", "NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["CIS AWS Benchmark 1.4", ["3.4"]], ["NIST 800-53 Rev 5", ["AC-2(4)", "AC-4(26)", "AC-6(9)", "AU-10", "AU-12", "AU-2", "AU-3", "AU-6(1)", "AU-6(3)", "AU-6(4)", "AU-6(5)", "AU-7(1)", "AU-9(7)", "CA-7", "SC-7(9)", "SI-20", "SI-3(8)", "SI-4(20)", "SI-4(5)", "SI-7(8)"]], ["PCI DSS version 3.2.1", ["10.5.3", "10.5.4", "2.2"]]]),
            controlObjectives: new Set(["Establish logging and monitoring"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether your AWS CloudTrail trail is configured to send logs to Amazon CloudWatch Logs.",
            resourceTypes: new Set(["AWS::CloudTrail::Trail"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "LOW"
        }, {
            identifier: "CT.CLOUDTRAIL.PR.4",
            name: "Require an AWS CloudTrail Lake event data store to have encryption at rest with an AWS KMS key",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["AWS CloudTrail"]),
            frameworks: new Set([]),
            frameworksIds: new Map,
            controlObjectives: new Set(["Encrypt data at rest"]),
            releaseDate: "2023-11-28",
            description: "This control checks whether a CloudTrail Lake event data store is encrypted at rest with a KMS key.",
            resourceTypes: new Set(["AWS::CloudTrail::EventDataStore"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "LOW"
        }, {
            identifier: "SH.CloudTrail.1",
            name: "CloudTrail should be enabled and configured with at least one multi-Region trail that includes read and write management events",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["AWS CloudTrail"]),
            frameworks: new Set(["CIS AWS Benchmark 1.4", "NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["CIS AWS Benchmark 1.4", ["3.1"]], ["NIST 800-53 Rev 5", ["AC-2(4)", "AC-4(26)", "AC-6(9)", "AU-10", "AU-12", "AU-2", "AU-3", "AU-6(3)", "AU-6(4)", "CA-7", "SC-7(9)", "SI-3(8)", "SI-4(20)", "SI-7(8)"]], ["PCI DSS version 3.2.1", ["10.1", "10.2.1", "10.2.2", "10.2.3", "10.2.4", "10.2.5", "10.2.6", "10.2.7", "10.3.1", "10.3.2", "10.3.3", "10.3.4", "10.3.5", "10.3.6", "2.2"]]]),
            controlObjectives: new Set(["Establish logging and monitoring"]),
            releaseDate: "2022-11-28",
            description: "This AWS control checks that there is at least one multi-region AWS CloudTrail trail includes read and write management events.",
            resourceTypes: new Set(["AWS::::Account"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "HIGH"
        }, {
            identifier: "SH.CloudTrail.2",
            name: "CloudTrail should have encryption at-rest enabled",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["AWS CloudTrail"]),
            frameworks: new Set(["CIS AWS Benchmark 1.4", "NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["CIS AWS Benchmark 1.4", ["3.7"]], ["NIST 800-53 Rev 5", ["AU-9", "CA-9(1)", "CM-3(6)", "SC-13", "SC-28", "SC-28(1)", "SC-7(10)", "SI-7(6)"]], ["PCI DSS version 3.2.1", ["10.5", "10.5.2", "2.2", "3.4"]]]),
            controlObjectives: new Set(["Encrypt data at rest"]),
            releaseDate: "2022-11-28",
            description: "This AWS control checks whether AWS CloudTrail is configured to use the server side encryption (SSE) AWS Key Management Service (AWS KMS) customer master key (CMK) encryption. The check will pass if the KmsKeyId is defined.",
            resourceTypes: new Set(["AWS::CloudTrail::Trail"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.CloudTrail.4",
            name: "CloudTrail log file validation should be enabled",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["AWS CloudTrail"]),
            frameworks: new Set(["CIS AWS Benchmark 1.4", "NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["CIS AWS Benchmark 1.4", ["3.2"]], ["NIST 800-53 Rev 5", ["AU-9", "SI-4", "SI-7(1)", "SI-7(3)", "SI-7(7)"]], ["PCI DSS version 3.2.1", ["10.5.5", "11.5", "2.2"]]]),
            controlObjectives: new Set(["Protect data integrity"]),
            releaseDate: "2022-11-28",
            description: "This AWS control checks whether CloudTrail log file validation is enabled.",
            resourceTypes: new Set(["AWS::CloudTrail::Trail"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.CloudTrail.5",
            name: "CloudTrail trails should be integrated with Amazon CloudWatch Logs",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["AWS CloudTrail"]),
            frameworks: new Set(["CIS AWS Benchmark 1.4", "NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["CIS AWS Benchmark 1.4", ["3.4"]], ["NIST 800-53 Rev 5", ["AC-2(4)", "AC-4(26)", "AC-6(9)", "AU-10", "AU-12", "AU-2", "AU-3", "AU-6(1)", "AU-6(3)", "AU-6(4)", "AU-6(5)", "AU-7(1)", "AU-9(7)", "CA-7", "SC-7(9)", "SI-20", "SI-3(8)", "SI-4(20)", "SI-4(5)", "SI-7(8)"]], ["PCI DSS version 3.2.1", ["10.5.3", "10.5.4", "2.2"]]]),
            controlObjectives: new Set(["Establish logging and monitoring"]),
            releaseDate: "2022-11-28",
            description: "This AWS control checks whether AWS CloudTrail trails are configured to send logs to Amazon CloudWatch Logs.",
            resourceTypes: new Set(["AWS::CloudTrail::Trail"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "LOW"
        }, {
            identifier: "AWS-GR_CLOUDTRAIL_CHANGE_PROHIBITED",
            name: "Disallow configuration changes to AWS CloudTrail",
            behavior: "PREVENTIVE",
            implementationTypes: new Set(["Service control policy (SCP)"]),
            services: new Set(["AWS CloudTrail"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CM-2", "CM-2(2)", "CM-3", "CM-3(8)", "SA-8(19)"]], ["PCI DSS version 3.2.1", ["10.5.2"]]]),
            controlObjectives: new Set(["Establish logging and monitoring"]),
            releaseDate: "2019-05-21",
            description: "Log API activity in a consistent manner by ensuring that your AWS CloudTrail settings do not change.",
            resourceTypes: new Set(["AWS::CloudTrail::Trail"]),
            controlOwner: "AWS Control Tower",
            guidance: "Mandatory",
            severity: "CRITICAL"
        }, {
            identifier: "AWS-GR_CLOUDTRAIL_CLOUDWATCH_LOGS_ENABLED",
            name: "Integrate CloudTrail events with CloudWatch logs",
            behavior: "PREVENTIVE",
            implementationTypes: new Set(["Service control policy (SCP)"]),
            services: new Set(["AWS CloudTrail"]),
            frameworks: new Set(["CIS AWS Benchmark 1.4", "NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["CIS AWS Benchmark 1.4", ["3.4"]], ["NIST 800-53 Rev 5", ["AC-2(4)", "AC-4(26)", "AC-6(9)", "AU-10", "AU-12", "AU-2", "AU-3", "AU-6(1)", "AU-6(3)", "AU-6(4)", "AU-6(5)", "AU-7(1)", "AU-9(7)", "CA-7", "SC-7(9)", "SI-20", "SI-3(8)", "SI-4(20)", "SI-4(5)", "SI-7(8)"]], ["PCI DSS version 3.2.1", ["10.5.3", "10.5.4", "2.2"]]]),
            controlObjectives: new Set(["Establish logging and monitoring"]),
            releaseDate: "2019-05-21",
            description: "Perform real-time analysis of activity data by sending CloudTrail events to AWS CloudWatch logs.",
            resourceTypes: new Set(["AWS::CloudTrail::Trail"]),
            controlOwner: "AWS Control Tower",
            guidance: "Mandatory",
            severity: "CRITICAL"
        }, {
            identifier: "AWS-GR_CLOUDTRAIL_ENABLED",
            name: "Enable AWS CloudTrail in all available regions",
            behavior: "PREVENTIVE",
            implementationTypes: new Set(["Service control policy (SCP)"]),
            services: new Set(["AWS CloudTrail"]),
            frameworks: new Set(["CIS AWS Benchmark 1.4", "NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["CIS AWS Benchmark 1.4", ["3.1"]], ["NIST 800-53 Rev 5", ["AC-2(4)", "AC-4(26)", "AC-6(9)", "AU-10", "AU-12", "AU-14(1)", "AU-2", "AU-3", "AU-6(3)", "AU-6(4)", "AU-9", "CA-7", "SA-8(22)", "SC-7(9)", "SI-3(8)", "SI-4(20)", "SI-7(8)"]], ["PCI DSS version 3.2.1", ["10.1", "10.2.3", "10.2.6"]]]),
            controlObjectives: new Set(["Establish logging and monitoring"]),
            releaseDate: "2019-05-21",
            description: "Track AWS API call activity within your accounts using AWS CloudTrail, which records call history including the identity of the caller and the time of the call.",
            resourceTypes: new Set(["AWS::CloudTrail::Trail"]),
            controlOwner: "AWS Control Tower",
            guidance: "Mandatory",
            severity: "CRITICAL"
        }, {
            identifier: "AWS-GR_CLOUDTRAIL_VALIDATION_ENABLED",
            name: "Enable integrity validation for CloudTrail log file",
            behavior: "PREVENTIVE",
            implementationTypes: new Set(["Service control policy (SCP)"]),
            services: new Set(["AWS CloudTrail"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AU-9", "SI-4", "SI-7(1)", "SI-7(3)", "SI-7(7)"]], ["PCI DSS version 3.2.1", ["10.5.5", "11.5", "2.2"]]]),
            controlObjectives: new Set(["Protect data integrity"]),
            releaseDate: "2019-05-21",
            description: "Protect the integrity of account activity logs using AWS CloudTrail log file validation, which creates a digitally signed digest file containing a hash of each log that CloudTrail writes to Amazon S3.",
            resourceTypes: new Set(["AWS::CloudTrail::Trail"]),
            controlOwner: "AWS Control Tower",
            guidance: "Mandatory",
            severity: "CRITICAL"
        }, {
            identifier: "CT.CODEBUILD.PR.1",
            name: "Require OAuth on GitHub or Bitbucket source repository URLs for AWS CodeBuild projects",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["AWS CodeBuild"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["SA-3"]], ["PCI DSS version 3.2.1", ["6.4.4", "8.2.1"]]]),
            controlObjectives: new Set(["Use strong authentication"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether the GitHub or Bitbucket source repository URL contains either personal access tokens or a username and password.",
            resourceTypes: new Set(["AWS::CodeBuild::Project"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "CRITICAL"
        }, {
            identifier: "CT.CODEBUILD.PR.2",
            name: "Require any AWS CodeBuild project environment variable to encrypt credentials in environment variables",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["AWS CodeBuild"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["IA-5(7)", "SA-3"]], ["PCI DSS version 3.2.1", ["8.2.1"]]]),
            controlObjectives: new Set(["Use strong authentication"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether AWS CodeBuild projects contain environment variables 'AWS_ACCESS_KEY_ID' and 'AWS_SECRET_ACCESS_KEY' stored as 'PLAINTEXT'.",
            resourceTypes: new Set(["AWS::CodeBuild::Project"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "CRITICAL"
        }, {
            identifier: "CT.CODEBUILD.PR.3",
            name: "Require any AWS CodeBuild project environment to have logging configured",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["AWS CodeBuild"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-2(12)", "AC-2(4)", "AC-4(26)", "AC-6(9)", "AU-10", "AU-12", "AU-2", "AU-3", "AU-6(3)", "AU-6(4)", "AU-9(7)", "CA-7", "SC-7(9)", "SI-3(8)", "SI-4", "SI-4(20)", "SI-7(8)"]], ["PCI DSS version 3.2.1", ["10.1", "10.2.1", "10.2.2", "10.2.3", "10.2.4", "10.2.5", "10.3.1", "10.3.2", "10.3.3", "10.3.4", "10.3.5", "10.3.6"]]]),
            controlObjectives: new Set(["Establish logging and monitoring"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether AWS CodeBuild projects environment has at least one logging option enabled.",
            resourceTypes: new Set(["AWS::CodeBuild::Project"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.CODEBUILD.PR.4",
            name: "Require any AWS CodeBuild project to deactivate privileged mode when running",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["AWS CodeBuild"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-2(1)", "AC-3", "AC-3(15)", "AC-3(7)", "AC-5", "AC-6", "AC-6(10)", "AC-6(2)"]], ["PCI DSS version 3.2.1", ["8.2.1"]]]),
            controlObjectives: new Set(["Enforce least privilege"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether AWS CodeBuild projects have privileged mode turned off.",
            resourceTypes: new Set(["AWS::CodeBuild::Project"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "HIGH"
        }, {
            identifier: "CT.CODEBUILD.PR.5",
            name: "Require encryption on all AWS CodeBuild project artifacts",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["AWS CodeBuild"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CA-9(1)", "CM-3(6)", "SC-13", "SC-28", "SC-28(1)", "SI-7(6)"]], ["PCI DSS version 3.2.1", ["2.2"]]]),
            controlObjectives: new Set(["Encrypt data at rest"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether AWS CodeBuild projects are configured to encrypt artifacts.",
            resourceTypes: new Set(["AWS::CodeBuild::Project"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "HIGH"
        }, {
            identifier: "CT.CODEBUILD.PR.6",
            name: "Require encryption on all Amazon S3 logs for AWS CodeBuild projects",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["AWS CodeBuild"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CA-9(1)", "CM-3(6)", "SC-13", "SC-28", "SC-28(1)", "SI-7(6)"]], ["PCI DSS version 3.2.1", ["10.5", "10.5.2", "2.2", "3.4"]]]),
            controlObjectives: new Set(["Encrypt data at rest"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether AWS CodeBuild projects configured with Amazon S3 logs have encryption enabled.",
            resourceTypes: new Set(["AWS::CodeBuild::Project"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "HIGH"
        }, {
            identifier: "SH.CodeBuild.1",
            name: "CodeBuild GitHub or Bitbucket source repository URLs should use OAuth",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["AWS CodeBuild"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["SA-3"]], ["PCI DSS version 3.2.1", ["6.4.4", "8.2.1"]]]),
            controlObjectives: new Set(["Use strong authentication"]),
            releaseDate: "2022-11-28",
            description: "This AWS control checks whether the GitHub or Bitbucket source repository URL contains either personal access tokens or user name and password.",
            resourceTypes: new Set(["AWS::CodeBuild::Project"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "CRITICAL"
        }, {
            identifier: "SH.CodeBuild.2",
            name: "CodeBuild project environment variables should not contain clear text credentials",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["AWS CodeBuild"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["IA-5(7)", "SA-3"]], ["PCI DSS version 3.2.1", ["8.2.1"]]]),
            controlObjectives: new Set(["Use strong authentication"]),
            releaseDate: "2022-11-28",
            description: "This AWS control checks whether the project contains environment variables AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY.",
            resourceTypes: new Set(["AWS::CodeBuild::Project"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "CRITICAL"
        }, {
            identifier: "SH.CodeBuild.3",
            name: "CodeBuild S3 logs should be encrypted",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["AWS CodeBuild"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CA-9(1)", "CM-3(6)", "SC-13", "SC-28", "SC-28(1)", "SI-7(6)"]], ["PCI DSS version 3.2.1", ["10.5", "10.5.2", "2.2", "3.4"]]]),
            controlObjectives: new Set(["Encrypt data at rest"]),
            releaseDate: "2023-06-12",
            description: "This control checks if Amazon S3 logs for an AWS CodeBuild project are encrypted. The control fails if encryption is deactivated for S3 Logs for a CodeBuild project.",
            resourceTypes: new Set(["AWS::CodeBuild::Project"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "LOW"
        }, {
            identifier: "SH.CodeBuild.4",
            name: "CodeBuild project environments should have a logging configuration",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["AWS CodeBuild"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-2(12)", "AC-2(4)", "AC-4(26)", "AC-6(9)", "AU-10", "AU-12", "AU-2", "AU-3", "AU-6(3)", "AU-6(4)", "AU-9(7)", "CA-7", "SC-7(9)", "SI-3(8)", "SI-4", "SI-4(20)", "SI-7(8)"]], ["PCI DSS version 3.2.1", ["10.1", "10.2.1", "10.2.2", "10.2.3", "10.2.4", "10.2.5", "10.3.1", "10.3.2", "10.3.3", "10.3.4", "10.3.5", "10.3.6"]]]),
            controlObjectives: new Set(["Establish logging and monitoring"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether a CodeBuild project environment has at least one log option enabled.",
            resourceTypes: new Set(["AWS::CodeBuild::Project"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.CodeBuild.5",
            name: "CodeBuild project environments should not have privileged mode enabled",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["AWS CodeBuild"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-2(1)", "AC-3", "AC-3(15)", "AC-3(7)", "AC-5", "AC-6", "AC-6(10)", "AC-6(2)"]], ["PCI DSS version 3.2.1", ["8.2.1"]]]),
            controlObjectives: new Set(["Enforce least privilege"]),
            releaseDate: "2022-11-28",
            description: "This control checks if an AWS CodeBuild project environment has privileged mode enabled.",
            resourceTypes: new Set(["AWS::CodeBuild::Project"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "HIGH"
        }, {
            identifier: "AWS-GR_CONFIG_AGGREGATION_AUTHORIZATION_POLICY",
            name: "Disallow deletion of AWS Config Aggregation Authorizations",
            behavior: "PREVENTIVE",
            implementationTypes: new Set(["Service control policy (SCP)"]),
            services: new Set(["AWS Config"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CA-9(1)", "CM-2", "CM-2(2)", "CM-3", "SI-12"]], ["PCI DSS version 3.2.1", ["2.2"]]]),
            controlObjectives: new Set(["Establish logging and monitoring"]),
            releaseDate: "2019-10-14",
            description: "Disallow deletion of AWS Config Aggregation Authorizations created by AWS Control Tower in the audit account.",
            resourceTypes: new Set(["AWS::Config::AggregationAuthorization"]),
            controlOwner: "AWS Control Tower",
            guidance: "Mandatory",
            severity: "CRITICAL"
        }, {
            identifier: "AWS-GR_CONFIG_AGGREGATION_CHANGE_PROHIBITED",
            name: "Disallow changes to AWS Config aggregation set up by Control Tower",
            behavior: "PREVENTIVE",
            implementationTypes: new Set(["Service control policy (SCP)"]),
            services: new Set(["AWS Config"]),
            frameworks: new Set(["NIST 800-53 Rev 5"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CM-2", "CM-2(2)", "CM-3", "CM-3(8)", "SA-8(19)"]]]),
            controlObjectives: new Set(["Protect configurations"]),
            releaseDate: "2019-04-24",
            description: "Protect the integrity of AWS Config aggregation set up by Control Tower to collect configuration and compliance data.",
            resourceTypes: new Set(["AWS::Config::AggregationAuthorization"]),
            controlOwner: "AWS Control Tower",
            guidance: "Mandatory",
            severity: "CRITICAL"
        }, {
            identifier: "AWS-GR_CONFIG_CHANGE_PROHIBITED",
            name: "Disallow configuration changes to AWS Config",
            behavior: "PREVENTIVE",
            implementationTypes: new Set(["Service control policy (SCP)"]),
            services: new Set(["AWS Config"]),
            frameworks: new Set(["NIST 800-53 Rev 5"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CM-2", "CM-2(2)", "CM-3", "CM-3(8)", "SA-8(19)"]]]),
            controlObjectives: new Set(["Protect configurations"]),
            releaseDate: "2019-04-30",
            description: "Record resource configurations in a consistent manner by ensuring that AWS Config settings don't change.",
            resourceTypes: new Set(["AWS::Config::AggregationAuthorization", "AWS::Config::ConfigRule", "AWS::Config::ConfigurationAggregator"]),
            controlOwner: "AWS Control Tower",
            guidance: "Mandatory",
            severity: "CRITICAL"
        }, {
            identifier: "AWS-GR_CONFIG_ENABLED",
            name: "Enable AWS Config in all available regions",
            behavior: "PREVENTIVE",
            implementationTypes: new Set(["Service control policy (SCP)"]),
            services: new Set(["AWS Config"]),
            frameworks: new Set(["CIS AWS Benchmark 1.4", "NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["CIS AWS Benchmark 1.4", ["3.5"]], ["NIST 800-53 Rev 5", ["CM-3", "CM-6(1)", "CM-8", "CM-8(2)"]], ["PCI DSS version 3.2.1", ["11.5"]]]),
            controlObjectives: new Set(["Establish logging and monitoring"]),
            releaseDate: "2019-04-30",
            description: "Identify configuration changes on AWS resources using AWS Config.",
            resourceTypes: new Set(["AWS::Config::ConfigurationRecorder", "AWS::Config::DeliveryChannel"]),
            controlOwner: "AWS Control Tower",
            guidance: "Mandatory",
            severity: "CRITICAL"
        }, {
            identifier: "AWS-GR_CONFIG_RULE_CHANGE_PROHIBITED",
            name: "Disallow changes to AWS Config Rules set up by Control Tower",
            behavior: "PREVENTIVE",
            implementationTypes: new Set(["Service control policy (SCP)"]),
            services: new Set(["AWS Config"]),
            frameworks: new Set(["NIST 800-53 Rev 5"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CM-2", "CM-2(2)", "CM-3", "CM-3(8)", "SA-8(19)"]]]),
            controlObjectives: new Set(["Protect configurations"]),
            releaseDate: "2019-04-24",
            description: "Protect the integrity of AWS Config Rules set up by Control Tower to implement detective guardrails.",
            resourceTypes: new Set(["AWS::Config::ConfigurationRecorder", "AWS::Config::DeliveryChannel"]),
            controlOwner: "AWS Control Tower",
            guidance: "Mandatory",
            severity: "CRITICAL"
        }, {
            identifier: "AWS-GR_DMS_REPLICATION_NOT_PUBLIC",
            name: "Detect whether replication instances for AWS Database Migration Service are public",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["AWS Database Migration Service"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-21", "AC-3", "AC-3(7)", "AC-4", "AC-4(21)", "AC-6", "SC-7", "SC-7(11)", "SC-7(16)", "SC-7(20)", "SC-7(21)", "SC-7(3)", "SC-7(4)", "SC-7(9)"]], ["PCI DSS version 3.2.1", ["1.2.1", "1.3", "1.3.1", "1.3.2", "1.3.4", "1.3.6", "2.2.2"]]]),
            controlObjectives: new Set(["Limit network access"]),
            releaseDate: "2021-11-30",
            description: "Detects whether AWS Database Migration Service replication instances are public. The rule is NON_COMPLIANT if the value of the PubliclyAccessible field is set as True.",
            resourceTypes: new Set(["AWS::DMS::ReplicationInstance"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.DMS.PR.1",
            name: "Require that a public AWS DMS replication instance is not public",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["AWS Database Migration Service"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-21", "AC-3", "AC-3(7)", "AC-4", "AC-4(21)", "AC-6", "SC-7", "SC-7(11)", "SC-7(16)", "SC-7(20)", "SC-7(21)", "SC-7(3)", "SC-7(4)", "SC-7(9)"]], ["PCI DSS version 3.2.1", ["1.2.1", "1.3", "1.3.1", "1.3.2", "1.3.4", "1.3.6", "2.2.2"]]]),
            controlObjectives: new Set(["Limit network access", "Enforce least privilege"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether your AWS DMS replication instance is public.",
            resourceTypes: new Set(["AWS::DMS::ReplicationInstance"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "CRITICAL"
        }, {
            identifier: "SH.DMS.1",
            name: "Database Migration Service replication instances should not be public",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["AWS Database Migration Service"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-21", "AC-3", "AC-3(7)", "AC-4", "AC-4(21)", "AC-6", "SC-7", "SC-7(11)", "SC-7(16)", "SC-7(20)", "SC-7(21)", "SC-7(3)", "SC-7(4)", "SC-7(9)"]], ["PCI DSS version 3.2.1", ["1.2.1", "1.3", "1.3.1", "1.3.2", "1.3.4", "1.3.6", "2.2.2"]]]),
            controlObjectives: new Set(["Limit network access", "Enforce least privilege"]),
            releaseDate: "2022-11-28",
            description: "This AWS control checks whether AWS Database Migration Service replication instances are public by examining the PubliclyAccessible field value.",
            resourceTypes: new Set(["AWS::DMS::ReplicationInstance"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "CRITICAL"
        }, {
            identifier: "CT.ELASTICBEANSTALK.PR.1",
            name: "Require AWS Elastic Beanstalk environments to have enhanced health reporting enabled",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["AWS Elastic Beanstalk"]),
            frameworks: new Set(["NIST 800-53 Rev 5"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CA-7", "SI-2"]]]),
            controlObjectives: new Set(["Improve resiliency"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether AWS Elastic Beanstalk environments and configuration templates are configured for 'enhanced' health reporting.",
            resourceTypes: new Set(["AWS::ElasticBeanstalk::Environment", "AWS::ElasticBeanstalk::ConfigurationTemplate"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "LOW"
        }, {
            identifier: "CT.ELASTICBEANSTALK.PR.2",
            name: "Require AWS Elastic Beanstalk environments to have managed platform updates enabled",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["AWS Elastic Beanstalk"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["SI-2", "SI-2(2)", "SI-2(4)", "SI-2(5)"]], ["PCI DSS version 3.2.1", ["6.2"]]]),
            controlObjectives: new Set(["Manage vulnerabilities"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether managed platform updates in AWS Elastic Beanstalk environments and configuration templates are enabled.",
            resourceTypes: new Set(["AWS::ElasticBeanstalk::Environment", "AWS::ElasticBeanstalk::ConfigurationTemplate"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "HIGH"
        }, {
            identifier: "CT.ELASTICBEANSTALK.PR.3",
            name: "Require AWS Elastic Beanstalk environments to have a logging configuration",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["AWS Elastic Beanstalk"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-4(26)", "AU-10", "AU-12", "AU-2", "AU-3", "AU-6(3)", "AU-6(4)", "CA-7", "SC-7(9)", "SI-7(8)"]], ["PCI DSS version 3.2.1", ["10.1", "10.2.1", "10.2.2", "10.2.3", "10.2.4", "10.2.5", "10.2.7", "10.3.1", "10.3.2", "10.3.3", "10.3.4", "10.3.5", "10.3.6"]]]),
            controlObjectives: new Set(["Establish logging and monitoring"]),
            releaseDate: "2023-07-24",
            description: "This control checks whether AWS Elastic Beanstalk environments are configured to send logs to Amazon CloudWatch Logs.",
            resourceTypes: new Set(["AWS::ElasticBeanstalk::Environment", "AWS::ElasticBeanstalk::ConfigurationTemplate"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "LOW"
        }, {
            identifier: "SH.ElasticBeanstalk.1",
            name: "Elastic Beanstalk environments should have enhanced health reporting enabled",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["AWS Elastic Beanstalk"]),
            frameworks: new Set(["NIST 800-53 Rev 5"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CA-7", "SI-2"]]]),
            controlObjectives: new Set(["Improve resiliency"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether enhanced health reporting is enabled for your AWS Elastic Beanstalk environments.",
            resourceTypes: new Set(["AWS::ElasticBeanstalk::Environment"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "LOW"
        }, {
            identifier: "SH.ElasticBeanstalk.2",
            name: "Elastic Beanstalk managed platform updates should be enabled",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["AWS Elastic Beanstalk"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["SI-2", "SI-2(2)", "SI-2(4)", "SI-2(5)"]], ["PCI DSS version 3.2.1", ["6.2"]]]),
            controlObjectives: new Set(["Manage vulnerabilities"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether managed platform updates are enabled for the AWS Elastic Beanstalk environment.",
            resourceTypes: new Set(["AWS::ElasticBeanstalk::Environment"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "HIGH"
        }, {
            identifier: "SH.ElasticBeanstalk.3",
            name: "Elastic Beanstalk should stream logs to CloudWatch",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["AWS Elastic Beanstalk"]),
            frameworks: new Set([]),
            frameworksIds: new Map,
            controlObjectives: new Set(["Establish logging and monitoring"]),
            releaseDate: "<UPDATE>",
            description: "This control checks whether an AWS Elastic Beanstalk environment is configured to send logs to CloudWatch Logs. The control fails if the Elastic Beanstalk environment is not configured to send logs to CloudWatch Logs.",
            resourceTypes: new Set(["AWS::ElasticBeanstalk::Environment"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "HIGH"
        }, {
            identifier: "CT.GLUE.PR.1",
            name: "Require an AWS Glue job to have an associated security configuration",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["AWS Glue"]),
            frameworks: new Set([]),
            frameworksIds: new Map,
            controlObjectives: new Set(["Encrypt data at rest"]),
            releaseDate: "2023-10-28",
            description: "This control checks whether an AWS Glue job has an associated security configuration.",
            resourceTypes: new Set(["AWS::Glue::Job"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.GLUE.PR.2",
            name: "Require an AWS Glue security configuration to encrypt data in S3 targets using KMS keys",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["AWS Glue"]),
            frameworks: new Set([]),
            frameworksIds: new Map,
            controlObjectives: new Set(["Encrypt data at rest"]),
            releaseDate: "2023-10-28",
            description: "This control checks whether an AWS Glue security configuration is configured to encrypt data in S3 targets using KMS keys.",
            resourceTypes: new Set(["AWS::Glue::SecurityConfiguration"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "AWS-GR_IAM_USER_MFA_ENABLED",
            name: "Disallow access to IAM users without MFA",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["AWS Identity and Access Management (IAM)"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-2(1)", "AC-3(15)", "IA-2(1)", "IA-2(2)", "IA-2(6)", "IA-2(8)"]], ["PCI DSS version 3.2.1", ["8.3.1", "8.3.2", "8.6"]]]),
            controlObjectives: new Set(["Enforce least privilege"]),
            releaseDate: "2019-07-30",
            description: "Protect your account by requiring multi-factor authentication (MFA) for any AWS Identity and Access Management (IAM) user using the account. MFA adds an extra authentication code on top of a user name and password.",
            resourceTypes: new Set(["AWS::IAM::User"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "AWS-GR_MFA_ENABLED_FOR_IAM_CONSOLE_ACCESS",
            name: "Disallow console access to IAM users without MFA",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["AWS Identity and Access Management (IAM)"]),
            frameworks: new Set(["CIS AWS Benchmark 1.4", "NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["CIS AWS Benchmark 1.4", ["1.1"]], ["NIST 800-53 Rev 5", ["AC-2(1)", "AC-3(15)", "IA-2(1)", "IA-2(2)", "IA-2(6)", "IA-2(8)"]], ["PCI DSS version 3.2.1", ["2.2", "8.3.1", "8.3.2", "8.6"]]]),
            controlObjectives: new Set(["Enforce least privilege"]),
            releaseDate: "2019-07-30",
            description: "Protect your account by requiring multi-factor authentication (MFA) for any AWS Identity and Access Management (IAM) user using the console. MFA adds an extra authentication code on top of a user name and password.",
            resourceTypes: new Set(["AWS::IAM::User"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "AWS-GR_ROOT_ACCOUNT_MFA_ENABLED",
            name: "Enable MFA for the root user",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["AWS Identity and Access Management (IAM)"]),
            frameworks: new Set(["CIS AWS Benchmark 1.4", "NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["CIS AWS Benchmark 1.4", ["1.5"]], ["NIST 800-53 Rev 5", ["AC-2(1)", "AC-3(15)", "IA-2(1)", "IA-2(2)", "IA-2(6)", "IA-2(8)"]], ["PCI DSS version 3.2.1", ["2.1", "2.2", "8.3.1", "8.3.2"]]]),
            controlObjectives: new Set(["Enforce least privilege"]),
            releaseDate: "2018-11-15",
            description: "Reduce vulnerability from weak authentication by using Multi-Factor Authentication (MFA), which adds an extra authentication code on top of a user name and password.",
            resourceTypes: new Set(["AWS::::Account"]),
            controlOwner: "AWS Control Tower",
            guidance: "Strongly-Recommended",
            severity: "HIGH"
        }, {
            identifier: "CT.IAM.PR.1",
            name: 'Require that AWS Identity and Access Management (IAM) inline policies do not have a statement that includes "*" in both the Action and Resource elements',
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["AWS Identity and Access Management (IAM)"]),
            frameworks: new Set(["CIS AWS Benchmark 1.4", "NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["CIS AWS Benchmark 1.4", ["1.16"]], ["NIST 800-53 Rev 5", ["AC-2", "AC-2(1)", "AC-3", "AC-3(15)", "AC-3(7)", "AC-5", "AC-6", "AC-6(10)", "AC-6(2)", "AC-6(3)"]], ["PCI DSS version 3.2.1", ["2.2", "7.1.1", "7.1.2", "7.2.1", "7.2.2"]]]),
            controlObjectives: new Set(["Enforce least privilege"]),
            releaseDate: "2022-11-28",
            description: 'This control checks whether AWS Identity and Access Management (IAM) inline policies do not include "Effect": "Allow" with "Action": "*" over "Resource": "*".',
            resourceTypes: new Set(["AWS::IAM::Policy", "AWS::IAM::Role", "AWS::IAM::User", "AWS::IAM::Group"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "HIGH"
        }, {
            identifier: "CT.IAM.PR.2",
            name: 'Require that AWS Identity and Access Management (IAM) customer managed policies do not have a statement that includes "*" in both the Action and Resource elements',
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["AWS Identity and Access Management (IAM)"]),
            frameworks: new Set(["CIS AWS Benchmark 1.4", "NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["CIS AWS Benchmark 1.4", ["1.16"]], ["NIST 800-53 Rev 5", ["AC-2", "AC-2(1)", "AC-3", "AC-3(15)", "AC-3(7)", "AC-5", "AC-6", "AC-6(10)", "AC-6(2)", "AC-6(3)"]], ["PCI DSS version 3.2.1", ["2.2", "7.1.1", "7.1.2", "7.2.1", "7.2.2"]]]),
            controlObjectives: new Set(["Enforce least privilege"]),
            releaseDate: "2022-11-28",
            description: 'This control checks whether AWS Identity and Access Management (IAM) customer managed policies do not include "Effect": "Allow" with "Action": "*" over "Resource": "*".',
            resourceTypes: new Set(["AWS::IAM::ManagedPolicy"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "HIGH"
        }, {
            identifier: "CT.IAM.PR.3",
            name: "Require that AWS Identity and Access Management (IAM) customer managed policies do not have wildcard service actions",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["AWS Identity and Access Management (IAM)"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-2", "AC-2(1)", "AC-3", "AC-3(15)", "AC-3(7)", "AC-5", "AC-6", "AC-6(10)", "AC-6(2)", "AC-6(3)"]], ["PCI DSS version 3.2.1", ["7.1.1", "7.1.2", "7.2.1", "7.2.2"]]]),
            controlObjectives: new Set(["Enforce least privilege"]),
            releaseDate: "2022-11-28",
            description: 'This control checks whether AWS Identity and Access Management (IAM) customer managed policies do not include "Effect": "Allow" with "Action": "Service:*" (e.g. s3:*) for individual AWS services or use the combination of "NotAction" with an "Effect" of "Allow".',
            resourceTypes: new Set(["AWS::IAM::ManagedPolicy"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "LOW"
        }, {
            identifier: "CT.IAM.PR.4",
            name: "Require that AWS Identity and Access Management (IAM) users do not have an inline or managed policy directly attached",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["AWS Identity and Access Management (IAM)"]),
            frameworks: new Set(["CIS AWS Benchmark 1.4", "NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["CIS AWS Benchmark 1.4", ["1.15"]], ["NIST 800-53 Rev 5", ["AC-2", "AC-2(1)", "AC-3", "AC-3(15)", "AC-3(7)", "AC-6", "AC-6(3)"]], ["PCI DSS version 3.2.1", ["2.2", "7.1.1", "7.1.2", "7.2.1", "7.2.2"]]]),
            controlObjectives: new Set(["Enforce least privilege"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether your AWS Identity and Access Management (IAM) user has inline or managed (AWS and customer) policies directly attached. Instead, IAM users should inherit permissions from IAM groups or roles.",
            resourceTypes: new Set(["AWS::IAM::User", "AWS::IAM::Policy", "AWS::IAM::ManagedPolicy"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "LOW"
        }, {
            identifier: "CT.IAM.PR.5",
            name: "Require that AWS Identity and Access Management (IAM) inline policies do not have wildcard service actions",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["AWS Identity and Access Management (IAM)"]),
            frameworks: new Set([]),
            frameworksIds: new Map,
            controlObjectives: new Set(["Enforce least privilege"]),
            releaseDate: "2022-11-28",
            description: 'This control checks whether AWS Identity and Access Management (IAM) inline policies do not include "Effect": "Allow" with "Action": "Service:*" (e.g. s3:*) for individual AWS services or use the combination of "NotAction" with an "Effect" of "Allow".',
            resourceTypes: new Set(["AWS::IAM::Policy", "AWS::IAM::Role", "AWS::IAM::User", "AWS::IAM::Group"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "LOW"
        }, {
            identifier: "SH.IAM.1",
            name: 'IAM policies should not allow full "*" administrative privileges',
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["AWS Identity and Access Management (IAM)"]),
            frameworks: new Set(["CIS AWS Benchmark 1.4", "NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["CIS AWS Benchmark 1.4", ["1.16"]], ["NIST 800-53 Rev 5", ["AC-2", "AC-2(1)", "AC-3", "AC-3(15)", "AC-3(7)", "AC-5", "AC-6", "AC-6(10)", "AC-6(2)", "AC-6(3)"]], ["PCI DSS version 3.2.1", ["2.2", "7.1.1", "7.1.2", "7.2.1", "7.2.2"]]]),
            controlObjectives: new Set(["Enforce least privilege"]),
            releaseDate: "2022-11-28",
            description: 'This AWS control checks whether the default version of AWS Identity and Access Management (IAM) policies (also known as customer managed policies) do not have administrator access with a statement that has "Effect": "Allow" with "Action": "*" over "Resource": "*". It only checks for the Customer Managed Policies that you created, but not inline and AWS Managed Policies.',
            resourceTypes: new Set(["AWS::IAM::Policy"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "HIGH"
        }, {
            identifier: "SH.IAM.2",
            name: "IAM users should not have IAM policies attached",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["AWS Identity and Access Management (IAM)"]),
            frameworks: new Set(["CIS AWS Benchmark 1.4", "NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["CIS AWS Benchmark 1.4", ["1.15"]], ["NIST 800-53 Rev 5", ["AC-2", "AC-2(1)", "AC-3", "AC-3(15)", "AC-3(7)", "AC-6", "AC-6(3)"]], ["PCI DSS version 3.2.1", ["2.2", "7.1.1", "7.1.2", "7.2.1", "7.2.2"]]]),
            controlObjectives: new Set(["Enforce least privilege"]),
            releaseDate: "2022-11-28",
            description: "This AWS control checks that none of your IAM users have policies attached. Instead, IAM users must inherit permissions from IAM groups or roles.",
            resourceTypes: new Set(["AWS::IAM::User"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "LOW"
        }, {
            identifier: "SH.IAM.21",
            name: "IAM customer managed policies that you create should not allow wildcard actions for services",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["AWS Identity and Access Management (IAM)"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-2", "AC-2(1)", "AC-3", "AC-3(15)", "AC-3(7)", "AC-5", "AC-6", "AC-6(10)", "AC-6(2)", "AC-6(3)"]], ["PCI DSS version 3.2.1", ["7.1.1", "7.1.2", "7.2.1", "7.2.2"]]]),
            controlObjectives: new Set(["Enforce least privilege"]),
            releaseDate: "2022-11-28",
            description: 'This control checks whether the IAM identity-based custom policies have Allow statements that grant permissions for all actions on a service. The control fails if any policy statement includes "Effect": "Allow" with "Action": "Service:*".',
            resourceTypes: new Set(["AWS::IAM::Policy"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "LOW"
        }, {
            identifier: "SH.IAM.3",
            name: "IAM users' access keys should be rotated every 90 days or less",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["AWS Identity and Access Management (IAM)"]),
            frameworks: new Set(["CIS AWS Benchmark 1.4", "NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["CIS AWS Benchmark 1.4", ["1.14"]], ["NIST 800-53 Rev 5", ["AC-2(1)", "AC-2(3)", "AC-3(15)"]], ["PCI DSS version 3.2.1", ["2.2", "8.2.4"]]]),
            controlObjectives: new Set(["Enforce least privilege"]),
            releaseDate: "2022-11-28",
            description: "This AWS control checks whether the active access keys are rotated within 90 days.",
            resourceTypes: new Set(["AWS::IAM::User"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.IAM.4",
            name: "IAM root user access key should not exist",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["AWS Identity and Access Management (IAM)"]),
            frameworks: new Set(["CIS AWS Benchmark 1.4", "NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["CIS AWS Benchmark 1.4", ["1.4"]], ["NIST 800-53 Rev 5", ["AC-2(1)", "AC-3(15)", "AC-3(7)", "AC-6", "AC-6(10)", "AC-6(2)"]], ["PCI DSS version 3.2.1", ["2.2", "7.1.1", "7.1.2", "7.2.1", "7.2.2", "8.1.1"]]]),
            controlObjectives: new Set(["Enforce least privilege"]),
            releaseDate: "2022-11-28",
            description: "This AWS control checks whether the root user access key is available.",
            resourceTypes: new Set(["AWS::::Account"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "CRITICAL"
        }, {
            identifier: "SH.IAM.5",
            name: "MFA should be enabled for all IAM users that have a console password",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["AWS Identity and Access Management (IAM)"]),
            frameworks: new Set(["CIS AWS Benchmark 1.4", "NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["CIS AWS Benchmark 1.4", ["1.1"]], ["NIST 800-53 Rev 5", ["AC-2(1)", "AC-3(15)", "IA-2(1)", "IA-2(2)", "IA-2(6)", "IA-2(8)"]], ["PCI DSS version 3.2.1", ["2.2", "8.3.1", "8.3.2", "8.6"]]]),
            controlObjectives: new Set(["Enforce least privilege"]),
            releaseDate: "2022-11-28",
            description: "This AWS control checks whether AWS Multi-Factor Authentication (MFA) is enabled for all AWS Identity and Access Management (IAM) users that use a console password.",
            resourceTypes: new Set(["AWS::IAM::User"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.IAM.6",
            name: "Hardware MFA should be enabled for the root user",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["AWS Identity and Access Management (IAM)"]),
            frameworks: new Set(["CIS AWS Benchmark 1.4", "NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["CIS AWS Benchmark 1.4", ["1.6"]], ["NIST 800-53 Rev 5", ["AC-2(1)", "AC-3(15)", "IA-2(1)", "IA-2(2)", "IA-2(6)", "IA-2(8)"]], ["PCI DSS version 3.2.1", ["2.2", "8.3.1", "8.3.2", "8.6"]]]),
            controlObjectives: new Set(["Enforce least privilege"]),
            releaseDate: "2022-11-28",
            description: "This AWS control checks whether your AWS account is enabled to use a hardware multi-factor authentication (MFA) device to sign in with root user credentials.",
            resourceTypes: new Set(["AWS::IAM::User"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "CRITICAL"
        }, {
            identifier: "SH.IAM.7",
            name: "Password policies for IAM users should have strong configurations",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["AWS Identity and Access Management (IAM)"]),
            frameworks: new Set([]),
            frameworksIds: new Map,
            controlObjectives: new Set(["Protect configurations"]),
            releaseDate: "2022-11-28",
            description: "This AWS control checks whether the account password policy for IAM users uses the following recommended configurations: RequireUppercaseCharacters: true, RequireLowercaseCharacters: true, RequireSymbols: true, RequireNumbers: true, MinimumPasswordLength: 8.",
            resourceTypes: new Set(["AWS::::Account"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.IAM.8",
            name: "Unused IAM user credentials should be removed",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["AWS Identity and Access Management (IAM)"]),
            frameworks: new Set(["CIS AWS Benchmark 1.4", "NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["CIS AWS Benchmark 1.4", ["1.12"]], ["NIST 800-53 Rev 5", ["AC-2", "AC-2(1)", "AC-2(3)", "AC-3", "AC-3(15)", "AC-3(7)", "AC-6"]], ["PCI DSS version 3.2.1", ["2.2", "8.1.4"]]]),
            controlObjectives: new Set(["Enforce least privilege"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether your IAM users have passwords or active access keys that were not used within the previous 90 days.",
            resourceTypes: new Set(["AWS::IAM::User"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "AWS-GR_IAM_ROLE_CHANGE_PROHIBITED",
            name: "Disallow changes to IAM roles set up by AWS Control Tower and AWS CloudFormation",
            behavior: "PREVENTIVE",
            implementationTypes: new Set(["Service control policy (SCP)"]),
            services: new Set(["AWS Identity and Access Management (IAM)"]),
            frameworks: new Set(["NIST 800-53 Rev 5"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CM-2", "CM-2(2)", "CM-3", "CM-3(8)", "SA-8(19)"]]]),
            controlObjectives: new Set(["Protect configurations"]),
            releaseDate: "2020-09-09",
            description: "Protect the integrity of IAM roles set up for your accounts by Control Tower.",
            resourceTypes: new Set(["AWS::IAM::Role"]),
            controlOwner: "AWS Control Tower",
            guidance: "Mandatory",
            severity: "CRITICAL"
        }, {
            identifier: "AWS-GR_RESTRICT_ROOT_USER_ACCESS_KEYS",
            name: "Disallow creation of access keys for the root user",
            behavior: "PREVENTIVE",
            implementationTypes: new Set(["Service control policy (SCP)"]),
            services: new Set(["AWS Identity and Access Management (IAM)"]),
            frameworks: new Set(["CIS AWS Benchmark 1.4", "NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["CIS AWS Benchmark 1.4", ["1.4"]], ["NIST 800-53 Rev 5", ["AC-2(1)", "AC-3(15)", "AC-3(7)", "AC-6", "AC-6(10)", "AC-6(2)"]], ["PCI DSS version 3.2.1", ["2.2", "7.1.1", "7.1.2", "7.2.1", "7.2.2", "8.1.1"]]]),
            controlObjectives: new Set(["Enforce least privilege"]),
            releaseDate: "2019-07-30",
            description: "Secure your AWS accounts by disallowing creation of access keys for the root user, which will allow unrestricted access to all resources in the account. We recommend that you instead create access keys for an AWS Identity and Access Management (IAM) user for everyday interaction with your AWS account.",
            resourceTypes: new Set(["AWS::::Account", "AWS::IAM::AccessKey"]),
            controlOwner: "AWS Control Tower",
            guidance: "Strongly-Recommended",
            severity: "HIGH"
        }, {
            identifier: "AWS-GR_RESTRICT_ROOT_USER",
            name: "Disallow actions as a root user",
            behavior: "PREVENTIVE",
            implementationTypes: new Set(["Service control policy (SCP)"]),
            services: new Set(["AWS Identity and Access Management (IAM)"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-2(1)", "AC-3(15)", "AC-3(7)", "AC-6", "AC-6(10)", "AC-6(2)"]], ["PCI DSS version 3.2.1", ["2.2", "7.1.1", "7.1.2", "7.2.1", "7.2.2", "8.1.1"]]]),
            controlObjectives: new Set(["Enforce least privilege"]),
            releaseDate: "2019-07-30",
            description: "Secure your AWS accounts by disallowing account access with root user credentials, which are credentials of the account owner and allow unrestricted access to all resources in the account. We recommend that you instead create AWS Identity and Access Management (IAM) users for everyday interaction with your AWS account.",
            resourceTypes: new Set(["AWS::::Account"]),
            controlOwner: "AWS Control Tower",
            guidance: "Strongly-Recommended",
            severity: "HIGH"
        }, {
            identifier: "CT.KMS.PR.1",
            name: "Require any AWS KMS key to have rotation configured",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["AWS Key Management Service (AWS KMS)"]),
            frameworks: new Set(["CIS AWS Benchmark 1.4", "NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["CIS AWS Benchmark 1.4", ["3.8"]], ["NIST 800-53 Rev 5", ["SC-12", "SC-12(2)", "SC-28(3)"]], ["PCI DSS version 3.2.1", ["2.2", "3.6.4"]]]),
            controlObjectives: new Set(["Encrypt data at rest"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether key rotation is enabled for AWS KMS customer managed keys.",
            resourceTypes: new Set(["AWS::KMS::Key"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.KMS.PR.2",
            name: "Require an AWS KMS asymmetric key with RSA key material used for encryption to have a key length greater than 2048 bits",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["AWS Key Management Service (AWS KMS)"]),
            frameworks: new Set([]),
            frameworksIds: new Map,
            controlObjectives: new Set(["Encrypt data at rest"]),
            releaseDate: "2022-08-31",
            description: "This control checks whether an AWS KMS asymmetric key with RSA key material that is used for encryption and decryption to use a key spec with a key length greater than 2048 bits (key spec other than 'RSA_2048').",
            resourceTypes: new Set(["AWS::KMS::Key"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.KMS.PR.3",
            name: "Require any AWS KMS key policies to have a statement that limits creation of AWS KMS grants to AWS services",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["AWS Key Management Service (AWS KMS)"]),
            frameworks: new Set([]),
            frameworksIds: new Map,
            controlObjectives: new Set(["Enforce least privilege"]),
            releaseDate: "2023-08-31",
            description: "This control checks whether KMS keys have an associated key policy statement that limits creation of AWS KMS grants to AWS services.",
            resourceTypes: new Set(["AWS::KMS::Key"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.KMS.1",
            name: "IAM customer managed policies should not allow decryption actions on all KMS keys",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["AWS Key Management Service (AWS KMS)"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-2", "AC-2(1)", "AC-3", "AC-3(15)", "AC-3(7)", "AC-5", "AC-6", "AC-6(3)"]], ["PCI DSS version 3.2.1", ["3.5.2", "7.1.1", "7.1.2", "7.2.1", "7.2.2"]]]),
            controlObjectives: new Set(["Enforce least privilege"]),
            releaseDate: "2022-11-28",
            description: "Checks whether the default version of IAM customer managed policies allow principals to use the AWS Key Management Service (KMS) decryption actions on all resources. This control fails if kms:Decrypt or kms:ReEncryptFrom actions are allowed on all KMS keys. The control evaluates both attached and unattached customer managed policies. It does not check inline policies or AWS managed policies.",
            resourceTypes: new Set(["AWS::IAM::Policy"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.KMS.2",
            name: "IAM principals should not have IAM inline policies that allow decryption actions on all KMS keys",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["AWS Key Management Service (AWS KMS)"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-2", "AC-2(1)", "AC-3", "AC-3(15)", "AC-3(7)", "AC-5", "AC-6", "AC-6(3)"]], ["PCI DSS version 3.2.1", ["3.5.2", "7.1.1", "7.1.2", "7.2.1", "7.2.2"]]]),
            controlObjectives: new Set(["Enforce least privilege"]),
            releaseDate: "2022-11-28",
            description: "Checks whether the inline policies embedded in your IAM principals (Role/User/Group) allow the AWS Key Management Service (KMS) decryption actions on all KMS keys. This control fails if kms:Decrypt or kms:ReEncryptFrom actions are allowed on all KMS keys in an inline policy.",
            resourceTypes: new Set(["AWS::IAM::Role", "AWS::IAM::Group", "AWS::IAM::User"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.KMS.3",
            name: "AWS KMS keys should not be deleted unintentionally",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["AWS Key Management Service (AWS KMS)"]),
            frameworks: new Set([]),
            frameworksIds: new Map,
            controlObjectives: new Set(["Protect data integrity"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether AWS Key Management Service (KMS) customer managed keys (CMK) are scheduled for deletion. The control fails if a KMS CMK is scheduled for deletion.",
            resourceTypes: new Set(["AWS::KMS::Key"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "CRITICAL"
        }, {
            identifier: "AWS-GR_LAMBDA_FUNCTION_PUBLIC_ACCESS_PROHIBITED",
            name: "Detect whether the AWS Lambda function policy attached to the Lambda resource blocks public access",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["AWS Lambda"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-21", "AC-3", "AC-3(7)", "AC-4", "AC-4(21)", "AC-6", "SC-7", "SC-7(11)", "SC-7(16)", "SC-7(20)", "SC-7(21)", "SC-7(3)", "SC-7(4)", "SC-7(9)"]], ["PCI DSS version 3.2.1", ["1.2.1", "1.3", "1.3.1", "1.3.2", "1.3.4", "2.2.2"]]]),
            controlObjectives: new Set(["Limit network access"]),
            releaseDate: "2021-11-30",
            description: "Detects whether the AWS Lambda function policy attached to the Lambda resource prohibits public access. The rule is NON_COMPLIANT if the Lambda function policy allows public access.",
            resourceTypes: new Set(["AWS::Lambda::Function"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.LAMBDA.PR.1",
            name: "Require any AWS Lambda function to have a supported runtime",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["AWS Lambda"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CA-9(1)", "CM-2", "SI-2", "SI-2(2)", "SI-2(4)", "SI-2(5)"]], ["PCI DSS version 3.2.1", ["2.2"]]]),
            controlObjectives: new Set(["Manage vulnerabilities"]),
            releaseDate: "2023-03-31",
            description: "This control checks whether AWS Lambda function runtime settings match supported runtimes for each language.",
            resourceTypes: new Set(["AWS::Lambda::Function"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.LAMBDA.PR.2",
            name: "Require AWS Lambda function policies to prohibit public access",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["AWS Lambda"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-21", "AC-3", "AC-3(7)", "AC-4", "AC-4(21)", "AC-6", "SC-7", "SC-7(11)", "SC-7(16)", "SC-7(20)", "SC-7(21)", "SC-7(3)", "SC-7(4)", "SC-7(9)"]], ["PCI DSS version 3.2.1", ["1.2.1", "1.3", "1.3.1", "1.3.2", "1.3.4", "2.2.2"]]]),
            controlObjectives: new Set(["Limit network access"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether an AWS Lambda function resource-based policy prohibits public access.",
            resourceTypes: new Set(["AWS::Lambda::Permission"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "CRITICAL"
        }, {
            identifier: "CT.LAMBDA.PR.3",
            name: "Require an AWS Lambda function to be in an Amazon Virtual Private Cloud (VPC)",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["AWS Lambda"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-21", "AC-3", "AC-3(7)", "AC-4", "AC-4(21)", "AC-6", "SC-7", "SC-7(11)", "SC-7(16)", "SC-7(20)", "SC-7(21)", "SC-7(3)", "SC-7(4)", "SC-7(9)"]], ["PCI DSS version 3.2.1", ["1.2.1", "1.3", "1.3.1", "1.3.2", "1.3.4", "2.2.2"]]]),
            controlObjectives: new Set(["Limit network access"]),
            releaseDate: "2023-07-24",
            description: "This control checks whether an AWS Lambda function has been configured to access resources in an Amazon Virtual Private Cloud (VPC).",
            resourceTypes: new Set(["AWS::Lambda::Function"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "LOW"
        }, {
            identifier: "CT.LAMBDA.PR.4",
            name: "Require an AWS Lambda layer permission to grant access to an AWS organization or specific AWS account",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["AWS Lambda"]),
            frameworks: new Set([]),
            frameworksIds: new Map,
            controlObjectives: new Set(["Enforce least privilege"]),
            releaseDate: "2023-08-31",
            description: "This control checks whether an AWS Lambda layer permission has been configured to only grant access to an AWS organization or specific AWS account, by ensuring that public access from all AWS accounts has not been granted to a layer.",
            resourceTypes: new Set(["AWS::Lambda::LayerVersionPermission"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "CRITICAL"
        }, {
            identifier: "CT.LAMBDA.PR.5",
            name: "Require an AWS Lambda function URL to use AWS IAM based authentication",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["AWS Lambda"]),
            frameworks: new Set([]),
            frameworksIds: new Map,
            controlObjectives: new Set(["Enforce least privilege"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether an AWS Lambda function URL has been configured to use AWS IAM based authentication.",
            resourceTypes: new Set(["AWS::Lambda::Url"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "CRITICAL"
        }, {
            identifier: "CT.LAMBDA.PR.6",
            name: "Require an AWS Lambda function URL CORS policy to restrict access to specific origins",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["AWS Lambda"]),
            frameworks: new Set([]),
            frameworksIds: new Map,
            controlObjectives: new Set(["Limit network access"]),
            releaseDate: "2023-08-31",
            description: "This control checks whether an AWS Lambda function URL has been configured with a cross-origin resource sharing (CORS) policy that does not grant access to all origins.",
            resourceTypes: new Set(["AWS::Lambda::Url"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "HIGH"
        }, {
            identifier: "SH.Lambda.1",
            name: "Lambda function policies should prohibit public access",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["AWS Lambda"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-21", "AC-3", "AC-3(7)", "AC-4", "AC-4(21)", "AC-6", "SC-7", "SC-7(11)", "SC-7(16)", "SC-7(20)", "SC-7(21)", "SC-7(3)", "SC-7(4)", "SC-7(9)"]], ["PCI DSS version 3.2.1", ["1.2.1", "1.3", "1.3.1", "1.3.2", "1.3.4", "2.2.2"]]]),
            controlObjectives: new Set(["Limit network access"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether the AWS Lambda function policy attached to the Lambda resource prohibits public access. If the Lambda function policy allows public access, the control fails.",
            resourceTypes: new Set(["AWS::Lambda::Function"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "CRITICAL"
        }, {
            identifier: "SH.Lambda.2",
            name: "Lambda functions should use supported runtimes",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["AWS Lambda"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CA-9(1)", "CM-2", "SI-2", "SI-2(2)", "SI-2(4)", "SI-2(5)"]], ["PCI DSS version 3.2.1", ["2.2"]]]),
            controlObjectives: new Set(["Manage vulnerabilities"]),
            releaseDate: "2022-11-28",
            description: "This AWS control checks that the lambda function settings for runtimes, match the expected values set for the supported runtimes for each language. The supported runtimes this control checks for are: nodejs18.x, nodejs16.x, nodejs14.x, python3.10, python3.9, python3.8, python3.7, java17, java11, java8, java8.al2, go1.x, dotnet6, ruby3.2, ruby2.7",
            resourceTypes: new Set(["AWS::Lambda::Function"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.Lambda.5",
            name: "VPC Lambda functions should operate in more than one Availability Zone",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["AWS Lambda"]),
            frameworks: new Set(["NIST 800-53 Rev 5"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CP-10", "CP-6(2)", "SC-36", "SC-5(2)", "SI-13(5)"]]]),
            controlObjectives: new Set(["Improve availability"]),
            releaseDate: "2022-11-28",
            description: "This control checks if Lambda has more than one Availability Zone (AZ) associated. The rule fails if only one AZ is associated with Lambda.",
            resourceTypes: new Set(["AWS::Lambda::Function"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "AWS-GR_LAMBDA_CHANGE_PROHIBITED",
            name: "Disallow changes to Lambda functions set up by Control Tower",
            behavior: "PREVENTIVE",
            implementationTypes: new Set(["Service control policy (SCP)"]),
            services: new Set(["AWS Lambda"]),
            frameworks: new Set(["NIST 800-53 Rev 5"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CM-2", "CM-2(2)", "CM-3", "CM-3(8)", "SA-8(19)"]]]),
            controlObjectives: new Set(["Protect configurations"]),
            releaseDate: "2019-04-24",
            description: "Protect the integrity of AWS Lambda functions set up by Control Tower.",
            resourceTypes: new Set(["AWS::Lambda::Function", "AWS::Lambda::EventSourceMapping", "AWS::Lambda::Permission"]),
            controlOwner: "AWS Control Tower",
            guidance: "Mandatory",
            severity: "CRITICAL"
        }, {
            identifier: "CT.NETWORK-FIREWALL.PR.1",
            name: "Require any AWS Network Firewall firewall policy to have an associated rule group",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["AWS Network Firewall"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CA-9(1)", "CM-2"]], ["PCI DSS version 3.2.1", ["1.3.6", "11.4"]]]),
            controlObjectives: new Set(["Limit network access"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether there is at least one stateful or stateless rule group associated with an AWS Network Firewall firewall policy.",
            resourceTypes: new Set(["AWS::NetworkFirewall::FirewallPolicy"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.NETWORK-FIREWALL.PR.2",
            name: "Require any AWS Network Firewall firewall policy to DROP or FORWARD stateless full packets by default that do not match a rule",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["AWS Network Firewall"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CA-9(1)", "CM-2"]], ["PCI DSS version 3.2.1", ["1.2.1", "1.3", "1.3.1", "1.3.2", "1.3.4", "1.3.6"]]]),
            controlObjectives: new Set(["Limit network access"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether an AWS Network Firewall firewall policy is configured with a user-defined stateless default action for full packets.",
            resourceTypes: new Set(["AWS::NetworkFirewall::FirewallPolicy"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.NETWORK-FIREWALL.PR.3",
            name: "Require any AWS Network Firewall firewall policy to DROP or FORWARD fragmented packets by default that do not match a stateless rule",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["AWS Network Firewall"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CA-9(1)", "CM-2"]], ["PCI DSS version 3.2.1", ["1.2.1", "1.3", "1.3.1", "1.3.2", "1.3.4", "1.3.6"]]]),
            controlObjectives: new Set(["Limit network access"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether an AWS Network Firewall firewall policy is configured with a default action to DROP or FORWARD fragmented packets when they do not match a stateless rule.",
            resourceTypes: new Set(["AWS::NetworkFirewall::FirewallPolicy"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.NETWORK-FIREWALL.PR.4",
            name: "Require any AWS Network Firewall rule group to contain at least one rule",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["AWS Network Firewall"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-4(21)", "SC-7", "SC-7(11)", "SC-7(16)", "SC-7(21)", "SC-7(5)"]], ["PCI DSS version 3.2.1", ["1.2.1", "1.3", "1.3.1", "1.3.2", "1.3.4", "1.3.6"]]]),
            controlObjectives: new Set(["Limit network access"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether an AWS Network Firewall stateless Rule Group contains rules.",
            resourceTypes: new Set(["AWS::NetworkFirewall::RuleGroup"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.NetworkFirewall.3",
            name: "Network Firewall policies should have at least one rule group associated",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["AWS Network Firewall"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CA-9(1)", "CM-2"]], ["PCI DSS version 3.2.1", ["1.3.6", "11.4"]]]),
            controlObjectives: new Set(["Limit network access"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether a Network Firewall policy has any stateful or stateless rule groups associated. This control fails if stateless or stateful rule groups are not assigned.",
            resourceTypes: new Set(["AWS::NetworkFirewall::FirewallPolicy"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.NetworkFirewall.4",
            name: "The default stateless action for Network Firewall policies should be drop or forward for full packets",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["AWS Network Firewall"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CA-9(1)", "CM-2"]], ["PCI DSS version 3.2.1", ["1.2.1", "1.3", "1.3.1", "1.3.2", "1.3.4", "1.3.6"]]]),
            controlObjectives: new Set(["Limit network access"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether the default stateless action for full packets for a Network Firewall policy is drop or forward. The control passes if Drop or Forward is selected, and fails if Pass is selected.",
            resourceTypes: new Set(["AWS::NetworkFirewall::FirewallPolicy"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.NetworkFirewall.5",
            name: "The default stateless action for Network Firewall policies should be drop or forward for fragmented packets",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["AWS Network Firewall"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CA-9(1)", "CM-2"]], ["PCI DSS version 3.2.1", ["1.2.1", "1.3", "1.3.1", "1.3.2", "1.3.4", "1.3.6"]]]),
            controlObjectives: new Set(["Limit network access"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether a Network Firewall policy has drop or forward as the default stateless action for fragmented packets. The control passes if Drop or Forward is selected, and fails if Pass is selected.",
            resourceTypes: new Set(["AWS::NetworkFirewall::FirewallPolicy"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.NetworkFirewall.6",
            name: "Stateless network firewall rule group should not be empty",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["AWS Network Firewall"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-4(21)", "SC-7", "SC-7(11)", "SC-7(16)", "SC-7(21)", "SC-7(5)"]], ["PCI DSS version 3.2.1", ["1.2.1", "1.3", "1.3.1", "1.3.2", "1.3.4", "1.3.6"]]]),
            controlObjectives: new Set(["Limit network access"]),
            releaseDate: "2022-11-28",
            description: "This control checks if a Stateless Network Firewall Rule Group contains rules. The rule will fail if there are no rules in a Stateless Network Firewall Rule Group.",
            resourceTypes: new Set(["AWS::NetworkFirewall::RuleGroup"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.SecretsManager.1",
            name: "Secrets Manager secrets should have automatic rotation enabled",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["AWS Secrets Manager"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-2(1)", "AC-3(15)"]], ["PCI DSS version 3.2.1", ["8.2.4"]]]),
            controlObjectives: new Set(["Manage secrets"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether a secret stored in AWS Secrets Manager is configured to rotate automatically.",
            resourceTypes: new Set(["AWS::SecretsManager::Secret"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.SecretsManager.2",
            name: "Secrets Manager secrets configured with automatic rotation should rotate successfully",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["AWS Secrets Manager"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-2(1)", "AC-3(15)"]], ["PCI DSS version 3.2.1", ["8.2.4"]]]),
            controlObjectives: new Set(["Manage secrets"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether an AWS Secrets Manager secret rotated successfully based on the rotation schedule. The control fails if RotationOccurringAsScheduled is false. The control does not evaluate secrets that do not have rotation configured.",
            resourceTypes: new Set(["AWS::SecretsManager::Secret"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.SecretsManager.3",
            name: "Remove unused Secrets Manager secrets",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["AWS Secrets Manager"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-2(1)", "AC-3(15)"]], ["PCI DSS version 3.2.1", ["8.1.4"]]]),
            controlObjectives: new Set(["Manage secrets"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether your secrets have been accessed within a specified number of days. The default value is 90 days. Secrets that have not been accessed even once within the number days you define, fail this check.",
            resourceTypes: new Set(["AWS::SecretsManager::Secret"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.SecretsManager.4",
            name: "Secrets Manager secrets should be rotated within a specified number of days",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["AWS Secrets Manager"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-2(1)", "AC-3(15)"]], ["PCI DSS version 3.2.1", ["8.2.4"]]]),
            controlObjectives: new Set(["Manage secrets"]),
            releaseDate: "2022-11-28",
            description: "This control checks if your secrets have rotated at least once within 90 days.",
            resourceTypes: new Set(["AWS::SecretsManager::Secret"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.STEPFUNCTIONS.PR.1",
            name: "Require Amazon Step Functions state machines to have logging activated",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["AWS Step Functions"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-4(26)", "AU-10", "AU-12", "AU-2", "AU-3", "AU-6(3)", "AU-6(4)", "CA-7", "SC-7(9)", "SI-7(8)"]], ["PCI DSS version 3.2.1", ["10.1", "10.2.1", "10.2.4", "10.2.7", "10.3.1", "10.3.2", "10.3.3", "10.3.4", "10.3.5", "10.3.6"]]]),
            controlObjectives: new Set(["Establish logging and monitoring"]),
            releaseDate: "2023-07-24",
            description: "This control checks whether Amazon Step Functions state machines have logging enabled.",
            resourceTypes: new Set(["AWS::StepFunctions::StateMachine"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "HIGH"
        }, {
            identifier: "CT.STEPFUNCTIONS.PR.2",
            name: "Require Amazon Step Functions state machines to have AWS X-ray tracing activated",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["AWS Step Functions"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-4(26)", "AU-10", "AU-12", "AU-2", "AU-3", "AU-6(3)", "AU-6(4)", "CA-7", "SC-7(9)", "SI-7(8)"]], ["PCI DSS version 3.2.1", ["10.1", "10.2.1", "10.2.4", "10.2.7", "10.3.1", "10.3.2", "10.3.3", "10.3.4", "10.3.5", "10.3.6"]]]),
            controlObjectives: new Set(["Establish logging and monitoring"]),
            releaseDate: "2023-07-24",
            description: "This control checks whether Amazon Step Functions state machines have AWS X-Ray tracing enabled.",
            resourceTypes: new Set(["AWS::StepFunctions::StateMachine"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.StepFunctions.1",
            name: "Step Functions state machines should have logging turned on",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["AWS Step Functions"]),
            frameworks: new Set([]),
            frameworksIds: new Map,
            controlObjectives: new Set(["Establish logging and monitoring"]),
            releaseDate: "<UPDATE>",
            description: "This controls checks if an AWS Step Functions state machine has logging turned on. The control fails if a state machine doesn't have logging turned on.",
            resourceTypes: new Set(["AWS::StepFunctions::StateMachine"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "AWS-GR_SSM_DOCUMENT_NOT_PUBLIC",
            name: "Detect whether AWS Systems Manager documents owned by the account are public",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["AWS Systems Manager"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-21", "AC-3", "AC-3(7)", "AC-4", "AC-4(21)", "AC-6", "SC-7", "SC-7(11)", "SC-7(16)", "SC-7(20)", "SC-7(21)", "SC-7(3)", "SC-7(4)", "SC-7(9)"]], ["PCI DSS version 3.2.1", ["1.2.1", "1.3", "1.3.1", "1.3.2", "1.3.4", "2.2.2"]]]),
            controlObjectives: new Set(["Limit network access"]),
            releaseDate: "2021-11-30",
            description: "Detects whether AWS Systems Manager (SSM) documents owned by the account are public. This rule is NON_COMPLIANT if any documents with owner 'Self' are public.",
            resourceTypes: new Set(["AWS::SSM::Document"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.SSM.1",
            name: "EC2 instances should be managed by AWS Systems Manager",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["AWS Systems Manager"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CA-9(1)", "CM-2", "CM-2(2)", "CM-8", "CM-8(1)", "CM-8(2)", "CM-8(3)", "SA-15(2)", "SA-15(8)", "SA-3", "SI-2(3)"]], ["PCI DSS version 3.2.1", ["2.4"]]]),
            controlObjectives: new Set(["Manage vulnerabilities", "Protect configurations"]),
            releaseDate: "2022-11-28",
            description: "This AWS control checks whether the Amazon EC2 instances in your account are managed by AWS Systems Manager.",
            resourceTypes: new Set(["AWS::EC2::Instance"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.SSM.2",
            name: "EC2 instances managed by Systems Manager should have a patch compliance status of COMPLIANT after a patch installation",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["AWS Systems Manager"]),
            frameworks: new Set(["PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["PCI DSS version 3.2.1", ["2.2", "6.2"]]]),
            controlObjectives: new Set(["Manage vulnerabilities"]),
            releaseDate: "2022-11-28",
            description: "This AWS control checks whether the compliance status of the Amazon EC2 Systems Manager patch compliance is COMPLIANT or NON_COMPLIANT after the patch installation on the instance. It only checks instances that are managed by AWS Systems Manager Patch Manager.",
            resourceTypes: new Set(["AWS::SSM::PatchCompliance"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "HIGH"
        }, {
            identifier: "SH.SSM.3",
            name: "EC2 instances managed by Systems Manager should have an association compliance status of COMPLIANT",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["AWS Systems Manager"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CA-9(1)", "CM-2", "CM-2(2)", "CM-8", "CM-8(1)", "CM-8(3)", "SI-2(3)"]], ["PCI DSS version 3.2.1", ["2.2", "6.2"]]]),
            controlObjectives: new Set(["Manage vulnerabilities", "Protect configurations"]),
            releaseDate: "2022-11-28",
            description: "This AWS control checks whether the status of the AWS Systems Manager association compliance is COMPLIANT or NON_COMPLIANT after the association is executed on an instance.",
            resourceTypes: new Set(["AWS::SSM::AssociationCompliance"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "LOW"
        }, {
            identifier: "SH.SSM.4",
            name: "SSM documents should not be public",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["AWS Systems Manager"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-21", "AC-3", "AC-3(7)", "AC-4", "AC-4(21)", "AC-6", "SC-7", "SC-7(11)", "SC-7(16)", "SC-7(20)", "SC-7(21)", "SC-7(3)", "SC-7(4)", "SC-7(9)"]], ["PCI DSS version 3.2.1", ["1.2.1", "1.3", "1.3.1", "1.3.2", "1.3.4", "2.2.2"]]]),
            controlObjectives: new Set(["Limit network access"]),
            releaseDate: "2022-11-28",
            description: 'This control checks whether AWS Systems Manager documents that the account owns are public. This control fails if SSM documents that have "Self" as the owner are public.',
            resourceTypes: new Set(["AWS::SSM::Document"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "CRITICAL"
        }, {
            identifier: "CT.WAF-REGIONAL.PR.1",
            name: "Require any AWS WAF Classic regional rule to have a condition",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["AWS WAF"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-4(21)", "SC-7", "SC-7(11)", "SC-7(16)", "SC-7(21)"]], ["PCI DSS version 3.2.1", ["6.6"]]]),
            controlObjectives: new Set(["Limit network access"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether an AWS WAF Classic regional rule contains any conditions.",
            resourceTypes: new Set(["AWS::WAFRegional::Rule"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.WAF-REGIONAL.PR.2",
            name: "Require any AWS WAF Classic regional web ACL to have a rule or rule group",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["AWS WAF"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CA-9(1)", "CM-2"]], ["PCI DSS version 3.2.1", ["6.6"]]]),
            controlObjectives: new Set(["Limit network access"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether an AWS WAF Classic regional web ACL contains any WAF rules or rule groups.",
            resourceTypes: new Set(["AWS::WAFRegional::WebACL"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.WAF.PR.1",
            name: "Require any AWS WAF Classic global rule to have a condition",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["AWS WAF"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CA-9(1)", "CM-2"]], ["PCI DSS version 3.2.1", ["6.6"]]]),
            controlObjectives: new Set(["Limit network access"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether an AWS WAF Classic global rule contains any conditions.",
            resourceTypes: new Set(["AWS::WAF::Rule"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.WAF.PR.2",
            name: "Require any AWS WAF Classic global web ACL to have a rule or rule group",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["AWS WAF"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-4(21)", "SC-7", "SC-7(11)", "SC-7(16)", "SC-7(21)"]], ["PCI DSS version 3.2.1", ["6.6"]]]),
            controlObjectives: new Set(["Limit network access"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether an AWS WAF Classic global web ACL contains any WAF rules or rule groups.",
            resourceTypes: new Set(["AWS::WAF::WebACL"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.WAFV2.PR.1",
            name: "Require an AWS WAF web ACL to be non-empty",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["AWS WAF"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-4(21)", "SC-7", "SC-7(11)", "SC-7(16)", "SC-7(21)"]], ["PCI DSS version 3.2.1", ["6.6"]]]),
            controlObjectives: new Set(["Limit network access"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether an AWS WAF web ACL contains any WAF rules or WAF rule groups.",
            resourceTypes: new Set(["AWS::WAFv2::WebACL"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.WAFV2.PR.2",
            name: "Require an AWS WAF rule group to be non-empty",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["AWS WAF"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CA-9(1)", "CM-2"]], ["PCI DSS version 3.2.1", ["6.6"]]]),
            controlObjectives: new Set(["Limit network access"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether AWS WAF rule groups contain rules.",
            resourceTypes: new Set(["AWS::WAFv2::RuleGroup"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.WAF.1",
            name: "AWS WAF Classic Global Web ACL logging should be enabled",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["AWS WAF"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-4(26)", "AU-10", "AU-12", "AU-2", "AU-3", "AU-6(3)", "AU-6(4)", "CA-7", "SC-7(9)", "SI-7(8)"]], ["PCI DSS version 3.2.1", ["10.1", "10.3.1", "10.3.2", "10.3.3", "10.3.4", "10.3.5", "10.3.6", "6.6"]]]),
            controlObjectives: new Set(["Establish logging and monitoring"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether logging is enabled for a WAF global Web ACL. This control fails if logging is not enabled for the Web ACL.",
            resourceTypes: new Set(["AWS::WAF::WebACL"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.WAF.10",
            name: "A WAFV2 web ACL should have at least one rule or rule group",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["AWS WAF"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CA-9(1)", "CM-2"]], ["PCI DSS version 3.2.1", ["6.6"]]]),
            controlObjectives: new Set(["Limit network access"]),
            releaseDate: "2023-06-12",
            description: "This control checks whether a WAFV2 web ACL contains at least one WAF rule or WAF rule group. The control fails if a web ACL does not contain any WAF rule or rule group.",
            resourceTypes: new Set(["AWS::WAFv2::WebACL"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.WAF.2",
            name: "A WAF Regional rule should have at least one condition",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["AWS WAF"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-4(21)", "SC-7", "SC-7(11)", "SC-7(16)", "SC-7(21)"]], ["PCI DSS version 3.2.1", ["6.6"]]]),
            controlObjectives: new Set(["Limit network access"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether a WAF Regional rule has at least one condition. The control fails if no conditions are present within a rule.",
            resourceTypes: new Set(["AWS::WAFRegional::Rule"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.WAF.3",
            name: "A WAF Regional rule group should have at least one rule",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["AWS WAF"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-4(21)", "SC-7", "SC-7(11)", "SC-7(16)", "SC-7(21)"]], ["PCI DSS version 3.2.1", ["6.6"]]]),
            controlObjectives: new Set(["Limit network access"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether a WAF Regional rule group has at least one rule. The control fails if no rules are present within a rule group.",
            resourceTypes: new Set(["AWS::WAFRegional::RuleGroup"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.WAF.4",
            name: "A WAF Regional web ACL should have at least one rule or rule group",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["AWS WAF"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CA-9(1)", "CM-2"]], ["PCI DSS version 3.2.1", ["6.6"]]]),
            controlObjectives: new Set(["Limit network access"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether a WAF Regional web ACL contains any WAF rules or WAF rule groups. This control fails if a web ACL does not contain any WAF rules or rule groups.",
            resourceTypes: new Set(["AWS::WAFRegional::WebACL"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.WAF.6",
            name: "A WAF global rule should have at least one condition",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["AWS WAF"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CA-9(1)", "CM-2"]], ["PCI DSS version 3.2.1", ["6.6"]]]),
            controlObjectives: new Set(["Limit network access"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether a WAF global rule has at least one condition. This control fails if no conditions are present within a rule.",
            resourceTypes: new Set(["AWS::WAF::Rule"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.WAF.7",
            name: "A WAF global rule group should have at least one rule",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["AWS WAF"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CA-9(1)", "CM-2"]], ["PCI DSS version 3.2.1", ["6.6"]]]),
            controlObjectives: new Set(["Limit network access"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether a WAF global rule group has at least one rule. The control fails if no rules are present within a rule group.",
            resourceTypes: new Set(["AWS::WAF::RuleGroup"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.WAF.8",
            name: "A WAF global web ACL should have at least one rule or rule group",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["AWS WAF"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-4(21)", "SC-7", "SC-7(11)", "SC-7(16)", "SC-7(21)"]], ["PCI DSS version 3.2.1", ["6.6"]]]),
            controlObjectives: new Set(["Limit network access"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether a WAF global web ACL contains any WAF rules or WAF rule groups. This control fails if a web ACL does not contain any WAF rules or WAF rule groups.",
            resourceTypes: new Set(["AWS::WAF::WebACL"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.ELASTICLOADBALANCING.PR.1",
            name: "Require any Application Load Balancer listener default actions to redirect all HTTP requests to HTTPS",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Elastic Load Balancing"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-17(2)", "AC-4", "IA-5(1)", "SC-12(3)", "SC-13", "SC-23", "SC-23(3)", "SC-7(4)", "SC-8", "SC-8(1)", "SC-8(2)", "SI-7(6)"]], ["PCI DSS version 3.2.1", ["2.3", "4.1", "8.2.1"]]]),
            controlObjectives: new Set(["Encrypt data in transit"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether HTTP to HTTPS redirection is configured as a default action on HTTP listeners of Application Load Balancers.",
            resourceTypes: new Set(["AWS::ElasticLoadBalancingV2::Listener"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.ELASTICLOADBALANCING.PR.10",
            name: "Require an Application or Classic Load Balancer to have logging activated",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Elastic Load Balancing"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-4(26)", "AU-10", "AU-12", "AU-2", "AU-3", "AU-6(3)", "AU-6(4)", "CA-7", "SC-7(9)", "SI-7(8)"]], ["PCI DSS version 3.2.1", ["10.1", "10.3.1", "10.3.2", "10.3.3", "10.3.4", "10.3.5", "10.3.6"]]]),
            controlObjectives: new Set(["Establish logging and monitoring"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether Classic Load Balancers have logging enabled.",
            resourceTypes: new Set(["AWS::ElasticLoadBalancing::LoadBalancer"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.ELASTICLOADBALANCING.PR.11",
            name: "Require any Classic Load Balancer to have connection draining activated",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Elastic Load Balancing"]),
            frameworks: new Set(["NIST 800-53 Rev 5"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CA-9(1)", "CM-2"]]]),
            controlObjectives: new Set(["Improve resiliency"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether Classic Load Balancers have connection draining enabled.",
            resourceTypes: new Set(["AWS::ElasticLoadBalancing::LoadBalancer"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.ELASTICLOADBALANCING.PR.12",
            name: "Require any Classic Load Balancer SSL/HTTPS listener to have a predefined security policy with a strong configuration",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Elastic Load Balancing"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-17(2)", "AC-4", "IA-5(1)", "SC-12(3)", "SC-13", "SC-23", "SC-23(3)", "SC-7(4)", "SC-8", "SC-8(1)", "SC-8(2)", "SI-7(6)"]], ["PCI DSS version 3.2.1", ["2.3", "4.1", "8.2.1"]]]),
            controlObjectives: new Set(["Limit network access"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether Classic Load Balancer HTTPS/SSL listeners use the predefined security policy 'ELBSecurityPolicy-TLS-1-2-2017-01'.",
            resourceTypes: new Set(["AWS::ElasticLoadBalancing::LoadBalancer"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.ELASTICLOADBALANCING.PR.13",
            name: "Require any Classic Load Balancer to have cross-zone load balancing activated",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Elastic Load Balancing"]),
            frameworks: new Set(["NIST 800-53 Rev 5"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CP-10", "CP-6(2)", "SC-36", "SC-5(2)", "SI-13(5)"]]]),
            controlObjectives: new Set(["Improve availability"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether cross-zone load balancing is enabled for the Classic Load Balancer.",
            resourceTypes: new Set(["AWS::ElasticLoadBalancing::LoadBalancer"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.ELASTICLOADBALANCING.PR.14",
            name: "Require a Network Load Balancer to have cross-zone load balancing activated",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Elastic Load Balancing"]),
            frameworks: new Set([]),
            frameworksIds: new Map,
            controlObjectives: new Set(["Improve resiliency", "Improve availability"]),
            releaseDate: "2022-08-31",
            description: "This control checks whether a Network Load Balancer (NLB) is configured with cross-zone load balancing.",
            resourceTypes: new Set(["AWS::ElasticLoadBalancingV2::LoadBalancer"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.ELASTICLOADBALANCING.PR.15",
            name: "Require an Elastic Load Balancing v2 target group to not explicitly disable cross-zone load balancing",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Elastic Load Balancing"]),
            frameworks: new Set([]),
            frameworksIds: new Map,
            controlObjectives: new Set(["Improve availability"]),
            releaseDate: "2023-08-31",
            description: "This control checks whether an Elastic Load Balancing v2 target group has been configured to not explicitly disable cross-zone load balancing.",
            resourceTypes: new Set(["AWS::ElasticLoadBalancingV2::TargetGroup"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.ELASTICLOADBALANCING.PR.2",
            name: "Require any Application or Network Load Balancer to have an AWS Certificate Manager certificate",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Elastic Load Balancing"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-17(2)", "AC-4", "IA-5(1)", "SC-12(3)", "SC-13", "SC-23", "SC-23(3)", "SC-23(5)", "SC-7(4)", "SC-8", "SC-8(1)", "SC-8(2)", "SI-7(6)"]], ["PCI DSS version 3.2.1", ["4.1"]]]),
            controlObjectives: new Set(["Encrypt data in transit"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether your Application and Network Load Balancers use certificates provided by AWS Certificate Manager.",
            resourceTypes: new Set(["AWS::ElasticLoadBalancingV2::Listener", "AWS::ElasticLoadBalancingV2::ListenerCertificate"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.ELASTICLOADBALANCING.PR.3",
            name: "Require any Application Load Balancer to have defensive or strictest desync mitigation mode activated",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Elastic Load Balancing"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-4(21)", "CA-9(1)", "CM-2"]], ["PCI DSS version 3.2.1", ["1.2.1", "1.3", "1.3.1", "1.3.2", "1.3.4", "2.2.3", "6.6"]]]),
            controlObjectives: new Set(["Protect data integrity"]),
            releaseDate: "2022-11-28",
            description: "This control checks to ensure that an Application Load Balancer is configured with 'defensive' or 'strictest' desync mitigation mode.",
            resourceTypes: new Set(["AWS::ElasticLoadBalancingV2::LoadBalancer"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.ELASTICLOADBALANCING.PR.4",
            name: "Require that any Application Load Balancer must be configured to drop HTTP headers",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Elastic Load Balancing"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["SC-7(4)", "SC-8(2)"]], ["PCI DSS version 3.2.1", ["1.2.1", "1.3", "1.3.1", "1.3.2", "1.3.4"]]]),
            controlObjectives: new Set(["Protect configurations"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether Application Load Balancers are configured to drop invalid HTTP headers.",
            resourceTypes: new Set(["AWS::ElasticLoadBalancingV2::LoadBalancer"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.ELASTICLOADBALANCING.PR.5",
            name: "Application Load Balancer deletion protection should be enabled",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Elastic Load Balancing"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CA-9(1)", "CM-2", "CM-2(2)", "CM-3", "SC-5(2)"]], ["PCI DSS version 3.2.1", ["2.2"]]]),
            controlObjectives: new Set(["Improve availability"]),
            releaseDate: "2022-11-28",
            description: "Checks whether an Elastic Load Balancer has deletion protection enabled.",
            resourceTypes: new Set(["AWS::ElasticLoadBalancingV2::LoadBalancer"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.ELASTICLOADBALANCING.PR.6",
            name: "Application and Network Load Balancer access logging should be enabled",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Elastic Load Balancing"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-4(26)", "AU-10", "AU-12", "AU-2", "AU-3", "AU-6(3)", "AU-6(4)", "CA-7", "SC-7(9)", "SI-7(8)"]], ["PCI DSS version 3.2.1", ["10.1", "10.3.1", "10.3.2", "10.3.3", "10.3.4", "10.3.5", "10.3.6"]]]),
            controlObjectives: new Set(["Establish logging and monitoring"]),
            releaseDate: "2022-11-28",
            description: "Checks whether Application and Network Load Balancers have logging enabled.",
            resourceTypes: new Set(["AWS::ElasticLoadBalancingV2::LoadBalancer"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.ELASTICLOADBALANCING.PR.7",
            name: "Require any Classic Load Balancer to have multiple Availability Zones configured",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Elastic Load Balancing"]),
            frameworks: new Set(["NIST 800-53 Rev 5"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CP-10", "CP-6(2)", "SC-36", "SC-5(2)", "SI-13(5)"]]]),
            controlObjectives: new Set(["Improve availability"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether a Classic Load Balancer has been configured with multiple Availability Zones.",
            resourceTypes: new Set(["AWS::ElasticLoadBalancing::LoadBalancer"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.ELASTICLOADBALANCING.PR.8",
            name: "Require any Classic Load Balancer SSL/HTTPS listener to have a certificate provided by AWS Certificate Manager",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Elastic Load Balancing"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-17(2)", "AC-4", "IA-5(1)", "SC-12(3)", "SC-13", "SC-23", "SC-23(5)", "SC-7(4)", "SC-8", "SC-8(1)", "SC-8(2)", "SI-7(6)"]], ["PCI DSS version 3.2.1", ["2.3", "4.1", "8.2.1"]]]),
            controlObjectives: new Set(["Encrypt data in transit"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether Classic Load Balancers use HTTPS/SSL certificates provided by AWS Certificate Manager.",
            resourceTypes: new Set(["AWS::ElasticLoadBalancing::LoadBalancer"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "CT.ELASTICLOADBALANCING.PR.9",
            name: "Require that an AWS ELB Application or Classic Load Balancer listener is configured with HTTPS or TLS termination",
            behavior: "PROACTIVE",
            implementationTypes: new Set(["CloudFormation guard rule"]),
            services: new Set(["Elastic Load Balancing"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-17(2)", "AC-4", "IA-5(1)", "SC-12(3)", "SC-13", "SC-23", "SC-23(3)", "SC-7(4)", "SC-8", "SC-8(1)", "SC-8(2)", "SI-7(6)"]], ["PCI DSS version 3.2.1", ["2.3", "4.1", "8.2.1"]]]),
            controlObjectives: new Set(["Encrypt data in transit"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether your AWS Elastic Load Balancing (ELB) Classic Load Balancer front-end listeners are configured with HTTPS or SSL protocols.",
            resourceTypes: new Set(["AWS::ElasticLoadBalancing::LoadBalancer"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.ELB.1",
            name: "Application Load Balancer should be configured to redirect all HTTP requests to HTTPS",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Elastic Load Balancing"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-17(2)", "AC-4", "IA-5(1)", "SC-12(3)", "SC-13", "SC-23", "SC-23(3)", "SC-7(4)", "SC-8", "SC-8(1)", "SC-8(2)", "SI-7(6)"]], ["PCI DSS version 3.2.1", ["2.3", "4.1", "8.2.1"]]]),
            controlObjectives: new Set(["Encrypt data in transit"]),
            releaseDate: "2023-06-12",
            description: "This AWS control checks whether HTTP to HTTPS redirection is configured on all HTTP listeners of Application Load Balancers. The control will fail if one or more HTTP listeners of Application Load Balancers do not have HTTP to HTTPS redirection configured.",
            resourceTypes: new Set(["AWS::ElasticLoadBalancingV2::LoadBalancer"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.ELB.10",
            name: "Classic Load Balancer should span multiple Availability Zones",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Elastic Load Balancing"]),
            frameworks: new Set(["NIST 800-53 Rev 5"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CP-10", "CP-6(2)", "SC-36", "SC-5(2)", "SI-13(5)"]]]),
            controlObjectives: new Set(["Improve availability"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether a Classic Load Balancer has been configured to span multiple Availability Zones. The control fails if the Classic Load Balancer does not span multiple Availability Zones.",
            resourceTypes: new Set(["AWS::ElasticLoadBalancing::LoadBalancer"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.ELB.12",
            name: "Application Load Balancer should be configured with defensive or strictest desync mitigation mode",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Elastic Load Balancing"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-4(21)", "CA-9(1)", "CM-2"]], ["PCI DSS version 3.2.1", ["1.2.1", "1.3", "1.3.1", "1.3.2", "1.3.4", "2.2.3", "6.6"]]]),
            controlObjectives: new Set(["Protect data integrity"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether the Application Load Balancer is configured with defensive or strictest de-sync mitigation mode. This control fails if the Application Load Balancer is not configured with defensive or strictest desync mitigation mode.",
            resourceTypes: new Set(["AWS::ElasticLoadBalancingV2::LoadBalancer"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.ELB.13",
            name: "Application, Network and Gateway Load Balancers should span multiple Availability Zones",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Elastic Load Balancing"]),
            frameworks: new Set(["NIST 800-53 Rev 5"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CP-10", "CP-6(2)", "SC-36", "SC-5(2)", "SI-13(5)"]]]),
            controlObjectives: new Set(["Improve availability"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether an Elastic Load Balancer V2 (Application, Network, or Gateway Load Balancer) has registered instances from multiple Availability Zones. The control fails if an Elastic Load Balancer V2 has instances registered in less than 2 Availability Zones.",
            resourceTypes: new Set(["AWS::ElasticLoadBalancingV2::LoadBalancer"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.ELB.14",
            name: "Classic Load Balancer should be configured with defensive or strictest desync mitigation mode",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Elastic Load Balancing"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-4(21)", "CA-9(1)", "CM-2"]], ["PCI DSS version 3.2.1", ["1.2.1", "1.3", "1.3.1", "1.3.2", "1.3.4", "2.2.3", "6.6"]]]),
            controlObjectives: new Set(["Protect data integrity"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether the Classic Load Balancer is configured with defensive or strictest desync mitigation mode. This control will fail if the Classic Load Balancer is not configured with defensive or strictest desync mitigation mode.",
            resourceTypes: new Set(["AWS::ElasticLoadBalancing::LoadBalancer"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.ELB.2",
            name: "Classic Load Balancers with SSL/HTTPS listeners should use a certificate provided by AWS Certificate Manager",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Elastic Load Balancing"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-17(2)", "AC-4", "IA-5(1)", "SC-12(3)", "SC-13", "SC-23", "SC-23(5)", "SC-7(4)", "SC-8", "SC-8(1)", "SC-8(2)", "SI-7(6)"]], ["PCI DSS version 3.2.1", ["2.3", "4.1", "8.2.1"]]]),
            controlObjectives: new Set(["Encrypt data in transit"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether a Classic Load Balancer uses HTTPS/SSL certificates provided by AWS Certificate Manager. The control fails if a Classic Load Balancer that is configured with an HTTPS/SSL listener does not use a certificate provided by AWS Certificate Manager.",
            resourceTypes: new Set(["AWS::ElasticLoadBalancing::LoadBalancer"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.ELB.3",
            name: "Classic Load Balancer listeners should be configured with HTTPS or TLS termination",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Elastic Load Balancing"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-17(2)", "AC-4", "IA-5(1)", "SC-12(3)", "SC-13", "SC-23", "SC-23(3)", "SC-7(4)", "SC-8", "SC-8(1)", "SC-8(2)", "SI-7(6)"]], ["PCI DSS version 3.2.1", ["2.3", "4.1", "8.2.1"]]]),
            controlObjectives: new Set(["Encrypt data in transit"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether your Classic Load Balancer listeners are configured with HTTPS or TLS protocol for front-end (client to load balancer) connections. The control is applicable if a Classic Load Balancer has listeners. If your Classic Load Balancer does not have a listener configured, then the control does not report any findings.",
            resourceTypes: new Set(["AWS::ElasticLoadBalancing::LoadBalancer"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.ELB.4",
            name: "Application load balancer should be configured to drop http headers",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Elastic Load Balancing"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["SC-7(4)", "SC-8(2)"]], ["PCI DSS version 3.2.1", ["1.2.1", "1.3", "1.3.1", "1.3.2", "1.3.4"]]]),
            controlObjectives: new Set(["Protect configurations"]),
            releaseDate: "2022-11-28",
            description: "This control evaluates AWS Application Load Balancers (ALB) to ensure they are configured to drop http headers. By default, ALBs are not configured to drop invalid http header values. This control evaluates all ALBs fails if the attribute value of routing.http.drop_invalid_header_fields.enabled is set to false.",
            resourceTypes: new Set(["AWS::ElasticLoadBalancingV2::LoadBalancer"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.ELB.5",
            name: "Application and Classic Load Balancers logging should be enabled",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Elastic Load Balancing"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-4(26)", "AU-10", "AU-12", "AU-2", "AU-3", "AU-6(3)", "AU-6(4)", "CA-7", "SC-7(9)", "SI-7(8)"]], ["PCI DSS version 3.2.1", ["10.1", "10.3.1", "10.3.2", "10.3.3", "10.3.4", "10.3.5", "10.3.6"]]]),
            controlObjectives: new Set(["Establish logging and monitoring"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether the Application Load Balancer and the Classic Load Balancer have logging enabled. The control fails if the access_logs.s3.enabled is false.",
            resourceTypes: new Set(["AWS::ElasticLoadBalancing::LoadBalancer"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.ELB.6",
            name: "Application Load Balancer deletion protection should be enabled",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Elastic Load Balancing"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CA-9(1)", "CM-2", "CM-2(2)", "CM-3", "SC-5(2)"]], ["PCI DSS version 3.2.1", ["2.2"]]]),
            controlObjectives: new Set(["Improve availability"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether an Application Load Balancer has deletion protection enabled. The control fails if deletion protection is not configured.",
            resourceTypes: new Set(["AWS::ElasticLoadBalancingV2::LoadBalancer"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.ELB.7",
            name: "Classic Load Balancers should have connection draining enabled",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Elastic Load Balancing"]),
            frameworks: new Set(["NIST 800-53 Rev 5"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CA-9(1)", "CM-2"]]]),
            controlObjectives: new Set(["Improve resiliency"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether AWS Classic Load Balancers have connection draining enabled.",
            resourceTypes: new Set(["AWS::ElasticLoadBalancing::LoadBalancer"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.ELB.8",
            name: "Classic Load Balancers with SSL listeners should use a predefined security policy that has strong configuration",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Elastic Load Balancing"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-17(2)", "AC-4", "IA-5(1)", "SC-12(3)", "SC-13", "SC-23", "SC-23(3)", "SC-7(4)", "SC-8", "SC-8(1)", "SC-8(2)", "SI-7(6)"]], ["PCI DSS version 3.2.1", ["2.3", "4.1", "8.2.1"]]]),
            controlObjectives: new Set(["Limit network access"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether your Classic Load Balancer SSL listeners use the predefined policy ELBSecurityPolicy-TLS-1-2-2017-01. The control fails if the Classic Load Balancer SSL listeners do not use the predefined policy ELBSecurityPolicy-TLS-1-2-2017-01.",
            resourceTypes: new Set(["AWS::ElasticLoadBalancing::LoadBalancer"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.ELB.9",
            name: "Classic Load Balancers should have cross-zone load balancing enabled",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Elastic Load Balancing"]),
            frameworks: new Set(["NIST 800-53 Rev 5"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["CP-10", "CP-6(2)", "SC-36", "SC-5(2)", "SI-13(5)"]]]),
            controlObjectives: new Set(["Improve availability"]),
            releaseDate: "2022-11-28",
            description: "This control checks whether cross-zone load balancing is enabled for Classic Load Balancers. This control fails if cross-zone load balancing is not enabled for a Classic Load Balancer.",
            resourceTypes: new Set(["AWS::ElasticLoadBalancing::LoadBalancer"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "SH.ELBv2.1",
            name: "Application Load Balancer should be configured to redirect all HTTP requests to HTTPS",
            behavior: "DETECTIVE",
            implementationTypes: new Set(["AWS Config rule"]),
            services: new Set(["Elastic Load Balancing"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-17(2)", "AC-4", "IA-5(1)", "SC-12(3)", "SC-13", "SC-23", "SC-23(3)", "SC-7(4)", "SC-8", "SC-8(1)", "SC-8(2)", "SI-7(6)"]], ["PCI DSS version 3.2.1", ["2.3", "4.1", "8.2.1"]]]),
            controlObjectives: new Set(["Encrypt data in transit"]),
            releaseDate: "2022-11-28",
            description: "This AWS control checks whether HTTP to HTTPS redirection is configured on all HTTP listeners of Application Load Balancers. The control will fail if one or more HTTP listeners of Application Load Balancers do not have HTTP to HTTPS redirection configured.",
            resourceTypes: new Set(["AWS::ElasticLoadBalancingV2::LoadBalancer"]),
            controlOwner: "AWS Security Hub",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "AWS-GR_DISALLOW_CROSS_REGION_NETWORKING",
            name: "Disallow cross-region networking for Amazon EC2, Amazon CloudFront, and AWS Global Accelerator",
            behavior: "PREVENTIVE",
            implementationTypes: new Set(["Service control policy (SCP)"]),
            services: new Set(["Amazon CloudFront", "Amazon EC2", "AWS Global Accelerator"]),
            frameworks: new Set([]),
            frameworksIds: new Map,
            controlObjectives: new Set(["Limit network access"]),
            releaseDate: "2021-11-30",
            description: "Disallow cross-region networking connections from Amazon EC2, Amazon CloudFront, and AWS Global Accelerator services.",
            resourceTypes: new Set(["AWS::CloudFront::Distribution", "AWS::EC2::VPCPeeringConnection", "AWS::EC2::TransitGatewayPeeringAttachment", "AWS::GlobalAccelerator::Accelerator", "AWS::GlobalAccelerator::EndpointGroup", "AWS::GlobalAccelerator::Listener"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }, {
            identifier: "AWS-GR_REGION_DENY",
            name: "Disallow the specified actions except in Regions with status Governed by AWS Control Tower",
            behavior: "PREVENTIVE",
            implementationTypes: new Set(["Service control policy (SCP)"]),
            services: new Set(["Multiple"]),
            frameworks: new Set(["NIST 800-53 Rev 5", "PCI DSS version 3.2.1"]),
            frameworksIds: new Map([["NIST 800-53 Rev 5", ["AC-4", "AC-4(21)", "AC-6", "SC-7", "SC-7(11)", "SC-7(16)", "SC-7(20)", "SC-7(21)", "SC-7(3)", "SC-7(4)", "SC-7(9)"]], ["PCI DSS version 3.2.1", ["7.2.1"]]]),
            controlObjectives: new Set(["Protect configurations"]),
            releaseDate: "2022-07-26",
            description: "Disallows the specified actions except in Regions with status Governed by AWS Control Tower.",
            resourceTypes: new Set(["Multiple"]),
            controlOwner: "AWS Control Tower",
            guidance: "Elective",
            severity: "MEDIUM"
        }]
